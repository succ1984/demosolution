<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">

<html xmlns="http://www.w3.org/1999/xhtml">
<head>
    
   <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
   <title>正则表达式练习</title>
    <style type="text/css">
        *{
            margin:0px; padding:0px;
        }
        body{
            font-size:12px;
            padding:10px;             
        }
        .buttons{   
            border:1px solid #CDCDCD;
            margin-bottom:10px;
        }
        .mt10{
           margin-top:15px;
           overflow:hidden;
           padding:10px 10px 20px;
           border:2px solid #E3E3E3;
        } 
        .fl{
            float:left;
        }      
        .fr{
            float:right;
        }
        .pre{
            background-color:#CCCCCC;
            color:Gray;
        }
        .formText{
            width:200px;
            border:1px solid #CCCDDD;
            height:25px; line-height:25px;
        }
        .formButton{
            margin-left:15px;
            border:1px solid #CCCDDD;
            
            padding:5px;
        }       
        .mt10 h2{
            font-size:15px; color:Black; font-weight:700;
            background-color:#EEEEEE;
            height:25px; line-height:25px;
            padding-left:10px;
        }
        .mt10 p{          
            padding:10px;
        }
        .mt10 p span{
            display:block;
            clear:both;
            background-color:#EEEEEE;
            line-height:18px;
            overflow:hidden;
            margin-top:5px; padding-left:20px;
        }
        .descrip{
            background: none repeat scroll 0 0 #FFFFDD;
            border: 1px solid #F3C16B;
            clear: both;
            overflow: hidden;
            padding: 5px 10px;
            font-size:12px;
            line-height:1.5em;
            word-wrap:break-word;
            word-break:break-line;
        }
    </style>
    <script src="../../js/jsLib.js" type="text/javascript"></script>

    <script type="text/javascript">
        function trimEnd(s) {
            return s.replace(/\,$/, "");
        }
        function nextSibling(node, tag) {
            if (!tag) {
                tag = "*";
            }
            if (tag == "*") {
                while ((node.nextSibling.nodeType != 1)) {
                    node = node.nextSibling;
                }
            }
            else {
                while ((node.nextSibling.nodeType != 1) || (node.nextSibling.nodeType == 1 && node.nextSibling.tagName.toLowerCase() !== tag.toLowerCase())) {
                     node = node.nextSibling;
                }
            }
            return node.nextSibling;
        }
        JU.domReady(function () {
            //匹配汉字(带g)
            document.getElementById("btnMatchChineseLetters").onclick = function () {
                var regex = /[\u4E00-\u9FFF]/g
                    , input = document.getElementById("txtChineseLetters").value
                    , spResult = nextSibling(this)
                    , temp = ""
                    , szResult = "";
                while ((temp = regex.exec(input)) != null) {
                    szResult += temp + "(lastIndex: " + regex.lastIndex + ",";
                    szResult += "index: " + temp.index + ",length: " + temp.length + ", input: " + temp.input + ")";
                }
                szResult += "finalIndex: " + regex.lastIndex;
                spResult.innerHTML = szResult;
            };
            //匹配汉字(不带g)
            document.getElementById("btnMatchChineseLetters2").onclick = function () {
                var regex = /[\u4E00-\u9FFF]/
                    , input = document.getElementById("txtChineseLetters2").value
                    , spResult = nextSibling(this)
                    , temp = ""
                    , szResult = "";
                if ((temp = regex.exec(input)) != null) {
                    szResult += temp[0] + "(index: " + temp.index + ", length: " + temp.length + ")";
                }
                szResult += ", finalIndex: " + regex.lastIndex;
                spResult.innerHTML = szResult;
            };
            //String.search
            document.getElementById("btnSearch").onclick = function () {
                var regex = /aa/
                    , input = document.getElementById("txtSearch").value
                    , spResult = nextSibling(this)
                    , temp = ""
                    , szResult = "";
                if ((temp = input.search(regex)) != -1) {
                    szResult += temp;
                }
                else {
                    szResult = "未找到";
                }
                spResult.innerHTML = szResult;
            };
            //String.match(不带'g')
            document.getElementById("btnMatch").onclick = function () {
                var regex = /a.*(\d)/
                    , input = document.getElementById("txtMatch").value
                    , spResult = nextSibling(this, "span")
                    , temp = ""
                    , szResult = "";
                if (temp = input.match(regex)) {
                    szResult += temp;
                }
                else {
                    szResult = "未找到";
                }
                spResult.innerHTML = szResult;
            };
            //String.match(带'g')
            document.getElementById("btnMatch2").onclick = function () {
                var regex = /a.*(\d)/g
                    , input = document.getElementById("txtMatch2").value
                    , spResult = nextSibling(this, "span")
                    , temp = ""
                    , szResult = "";
                if (temp = input.match(regex)) {
                    szResult += temp;
                }
                else {
                    szResult = "未找到";
                }
                spResult.innerHTML = szResult;
            };

            //String.replace
            document.getElementById("btnReplace").onclick = function () {
                var regex = /a.*(\d)/g
                    , input = document.getElementById("txtReplace").value
                    , spResult = nextSibling(this, "span")
                    , temp = ""
                    , szResult = "";
                szResult = input.replace(regex, "22");
                spResult.innerHTML = szResult;
            };
            //String.replace2
            document.getElementById("btnReplace2").onclick = function () {
                var regex = /(\w+)\b (\w+)\b/g
                    , input = document.getElementById("txtReplace").value
                    , spResult = nextSibling(this, "span")
                    , temp = ""
                    , szResult = "";
                szResult = input.replace(regex, "$2 $1");
                spResult.innerHTML = szResult;
            };
            //String.replace3
            document.getElementById("btnReplace3").onclick = function () {
                var regex = /\b(\w+)\b/g
                    , input = document.getElementById("txtReplace").value
                    , spResult = nextSibling(this, "span")
                    , temp = ""
                    , szResult = "";
                szResult = input.replace(regex, function (word) {
                    return word.substring(0, 1).toUpperCase() + word.substring(1);
                });
                spResult.innerHTML = szResult;
            };

            //String.split
            document.getElementById("btnSplit").onclick = function () {
                var regex = /\s/
                    , input = document.getElementById("txtSplit").value
                    , spResult = nextSibling(this, "span")
                    , temp = ""
                    , szResult = "";
                temp = input.split(regex);
                spResult.innerHTML = temp;
            };
            //统计一个字符串中出现次数最多的字符，及其次数
            countMostFrequentChar = function (s) {
                var memory = {}
                    , result = []
                    , szChar = ""
                    , regex
                    , nLength = s.length
                    , i=0
                    , maxCount = 0
                    , temp = "";
                for (i = 0; i < s.length; i++) {
                    szChar = s.charAt(i);
                    if (memory[szChar]) {
                        continue;
                    }
                    regex = new RegExp(szChar, "g");
                    temp = s.match(regex).length;
                    if (temp > maxCount) {
                        result.length = 0;
                        result.push({ "char": szChar, "count": temp });
                        maxCount = temp;
                    }
                    else if (temp == maxCount) {
                        result.push({ "char": szChar, "count": temp });
                        maxCount = temp;
                    }
                    //保存统计过的字符，再次遇到该字符则跳过本次统计
                    memory[szChar] = temp;
                }
                return result;
            }

            document.getElementById("btnMostFrequent").onclick = function () {
                var regex = /\s/     
                    , temp = countMostFrequentChar(document.getElementById("txtMostFrequent").value)           
                    , spResult = nextSibling(this, "span")
                    , temp = ""
                    , i=0
                    , szResult = "";
                
                if (temp.length > 0) {
                    for ( i = 0; i < temp.length; i++) {
                        var item = temp[i];
                        szResult = szResult + "char: " + item["char"];
                        szResult = szResult + ", count:" + item["count"];
                        szResult += "<br/>";
                    }
                }
                else {
                    szResult = "Not found..";
                }
                spResult.innerHTML = trimEnd(szResult);
            }


        });
    
    </script>
</head>
<body>
    <div class="mt10">
        <h2>Match ChineseLetters(with 'g')</h2>
        <p>
            <input id="txtChineseLetters" type="text" value="" class="formText"/>
            <input id="btnMatchChineseLetters" type="button" class="formButton" value="GO.." />       
            <span></span>
        </p>
        <pre class="descrip">
       
定义和用法

exec() 方法用于检索字符串中的正则表达式的匹配。
语法

RegExpObject.exec(string)

参数 	描述
string 	必需。要检索的字符串。
返回值

返回一个数组，其中存放匹配的结果。如果未找到匹配，则返回值为 null。
说明

exec() 方法的功能非常强大，它是一个通用的方法，而且使用起来也比 test() 方法以及支持正则表达式的 String 对象的方法更为复杂。

如果 exec() 找到了匹配的文本，则返回一个结果数组。否则，返回 null。此数组的第 0 个元素是与正则表达式相匹配的文本，第 1 个元素是与 RegExpObject 的第 1 个子表达式相匹配的文本（如果有的话），第 2 个元素是与 RegExpObject 的第 2 个子表达式相匹配的文本（如果有的话），以此类推。除了数组元素和 length 属性之外，exec() 方法还返回两个属性。index 属性声明的是匹配文本的第一个字符的位置。input 属性则存放的是被检索的字符串 string。我们可以看得出，在调用非全局的 RegExp 对象的 exec() 方法时，返回的数组与调用方法 String.match() 返回的数组是相同的。

但是，当 RegExpObject 是一个全局正则表达式时，exec() 的行为就稍微复杂一些。它会在 RegExpObject 的 lastIndex 属性指定的字符处开始检索字符串 string。当 exec() 找到了与表达式相匹配的文本时，在匹配后，它将把 RegExpObject 的 lastIndex 属性设置为匹配文本的最后一个字符的下一个位置。这就是说，您可以通过反复调用 exec() 方法来遍历字符串中的所有匹配文本。当 exec() 再也找不到匹配的文本时，它将返回 null，并把 lastIndex 属性重置为 0。
提示和注释

重要事项：如果在一个字符串中完成了一次模式匹配之后要开始检索新的字符串，就必须手动地把 lastIndex 属性重置为 0。

提示：请注意，无论 RegExpObject 是否是全局模式，exec() 都会把完整的细节添加到它返回的数组中。这就是 exec() 与 String.match() 的不同之处，后者在全局模式下返回的信息要少得多。因此我们可以这么说，在循环中反复地调用 exec() 方法是唯一一种获得全局模式的完整模式匹配信息的方法。

        
        </pre>
    </div>

    <div class="mt10">
        <h2>Match ChineseLetters(without 'g')</h2>
        <p>
            <input id="txtChineseLetters2" type="text" value="" class="formText"/>
            <input id="btnMatchChineseLetters2" type="button" class="formButton" value="GO.." />       
            <span></span>
        </p>
    </div>

    <div class="mt10">
        <h2>String.search( search "aa")</h2>
        <p>
            <input id="txtSearch" type="text" value="" class="formText"/>
            <input id="btnSearch" type="button" class="formButton" value="GO.." />       
            <span></span>
        </p>
        <pre class="descrip">
            
定义和用法

search() 方法用于检索字符串中指定的子字符串，或检索与正则表达式相匹配的子字符串。
语法

stringObject.search(regexp)

参数 	描述
regexp 	

该参数可以是需要在 stringObject 中检索的子串，也可以是需要检索的 RegExp 对象。

注释：要执行忽略大小写的检索，请追加标志 i。
返回值

stringObject 中第一个与 regexp 相匹配的子串的起始位置。

注释：如果没有找到任何匹配的子串，则返回 -1。
说明

search() 方法不执行全局匹配，它将忽略标志 g。它同时忽略 regexp 的 lastIndex 属性，并且总是从字符串的开始进行检索，这意味着它总是返回 stringObject 的第一个匹配的位置。

        </pre>
    </div>

    <div class="mt10">
        <h2>String.match( match /a.*(\d)/)</h2>
        <p>
            <input id="txtMatch" type="text" value="" class="formText"/>
            <input id="btnMatch" type="button" class="formButton" value="GO..without 'g'" />  
            
            <input id="txtMatch2" type="text" value="" class="formText"/>
            <input id="btnMatch2" type="button" class="formButton" value="GO..without 'g'" />    
                 
            <span></span>
        </p>
        <pre class="descrip">
            

定义和用法

match() 方法可在字符串内检索指定的值，或找到一个或多个正则表达式的匹配。

该方法类似 indexOf() 和 lastIndexOf()，但是它返回指定的值，而不是字符串的位置。
语法

stringObject.match(searchvalue)
stringObject.match(regexp)

参数 	描述
searchvalue 	必需。规定要检索的字符串值。
regexp 	必需。规定要匹配的模式的 RegExp 对象。如果该参数不是 RegExp 对象，则需要首先把它传递给 RegExp 构造函数，将其转换为 RegExp 对象。
返回值

存放匹配结果的数组。该数组的内容依赖于 regexp 是否具有全局标志 g。
说明

match() 方法将检索字符串 stringObject，以找到一个或多个与 regexp 匹配的文本。这个方法的行为在很大程度上有赖于 regexp 是否具有标志 g。

如果 regexp 没有标志 g，那么 match() 方法就只能在 stringObject 中执行一次匹配。如果没有找到任何匹配的文本， match() 将返回 null。否则，它将返回一个数组，其中存放了与它找到的匹配文本有关的信息。该数组的第 0 个元素存放的是匹配文本，而其余的元素存放的是与正则表达式的子表达式匹配的文本。除了这些常规的数组元素之外，返回的数组还含有两个对象属性。index 属性声明的是匹配文本的起始字符在 stringObject 中的位置，input 属性声明的是对 stringObject 的引用。

如果 regexp 具有标志 g，则 match() 方法将执行全局检索，找到 stringObject 中的所有匹配子字符串。若没有找到任何匹配的子串，则返回 null。如果找到了一个或多个匹配子串，则返回一个数组。不过全局匹配返回的数组的内容与前者大不相同，它的数组元素中存放的是 stringObject 中所有的匹配子串，而且也没有 index 属性或 input 属性。

注意：在全局检索模式下，match() 即不提供与子表达式匹配的文本的信息，也不声明每个匹配子串的位置。如果您需要这些全局检索的信息，可以使用 RegExp.exec()。


        </pre>
    </div>

    <div class="mt10">
        <h2>String.replace</h2>
        <p>
            <input id="txtReplace" type="text" value="" class="formText"/>
            <input id="btnReplace" type="button" class="formButton" value="GO..( replace /a.*(\d)/ to 22)" />              
            <input id="btnReplace2" type="button" class="formButton" value="GO..( replace /(\w+)\b(\w+)/ to $2 $1)" />   
            <input id="btnReplace3" type="button" class="formButton" value="GO..(所有单词字母转为大写)" />     
            <span></span>
        </p>
        <pre class="descrip">
            
            
定义和用法

replace() 方法用于在字符串中用一些字符替换另一些字符，或替换一个与正则表达式匹配的子串。
语法

stringObject.replace(regexp/substr,replacement)

参数 	描述
regexp/substr 	

必需。规定子字符串或要替换的模式的 RegExp 对象。

请注意，如果该值是一个字符串，则将它作为要检索的直接量文本模式，而不是首先被转换为 RegExp 对象。
replacement 	必需。一个字符串值。规定了替换文本或生成替换文本的函数。
返回值

一个新的字符串，是用 replacement 替换了 regexp 的第一次匹配或所有匹配之后得到的。
说明

字符串 stringObject 的 replace() 方法执行的是查找并替换的操作。它将在 stringObject 中查找与 regexp 相匹配的子字符串，然后用 replacement 来替换这些子串。如果 regexp 具有全局标志 g，那么 replace() 方法将替换所有匹配的子串。否则，它只替换第一个匹配子串。

replacement 可以是字符串，也可以是函数。如果它是字符串，那么每个匹配都将由字符串替换。但是 replacement 中的 $ 字符具有特定的含义。如下表所示，它说明从模式匹配得到的字符串将用于替换。
字符 	替换文本
$1、$2、...、$99 	与 regexp 中的第 1 到第 99 个子表达式相匹配的文本。
$& 	与 regexp 相匹配的子串。
$` 	位于匹配子串左侧的文本。
$' 	位于匹配子串右侧的文本。
$$ 	直接量符号。

注意：ECMAScript v3 规定，replace() 方法的参数 replacement 可以是函数而不是字符串。在这种情况下，每个匹配都调用该函数，它返回的字符串将作为替换文本使用。该函数的第一个参数是匹配模式的字符串。接下来的参数是与模式中的子表达式匹配的字符串，可以有 0 个或多个这样的参数。接下来的参数是一个整数，声明了匹配在 stringObject 中出现的位置。最后一个参数是 stringObject 本身。




        </pre>
    </div>

    <div class="mt10">
        <h2>String.split</h2>
        <p>
            <input id="txtSplit" type="text" value="" class="formText"/>
            <input id="btnSplit" type="button" class="formButton" value="GO..以\s来分隔" />              
           
            <span></span>
        </p>
        <pre class="descrip">
            
            

定义和用法

split() 方法用于把一个字符串分割成字符串数组。
语法

stringObject.split(separator,howmany)

参数 	描述
separator 	必需。字符串或正则表达式，从该参数指定的地方分割 stringObject。
howmany 	可选。该参数可指定返回的数组的最大长度。如果设置了该参数，返回的子串不会多于这个参数指定的数组。如果没有设置该参数，整个字符串都会被分割，不考虑它的长度。
返回值

一个字符串数组。该数组是通过在 separator 指定的边界处将字符串 stringObject 分割成子串创建的。返回的数组中的字串不包括 separator 自身。

但是，如果 separator 是包含子表达式的正则表达式，那么返回的数组中包括与这些子表达式匹配的字串（但不包括与整个正则表达式匹配的文本）。
提示和注释

注释：如果把空字符串 ("") 用作 separator，那么 stringObject 中的每个字符之间都会被分割。

注释：String.split() 执行的操作与 Array.join 执行的操作是相反的。





        </pre>
    </div>

    <div class="mt10">
        <h2>统计一个字符串中出现次数最多的字符，及其次数</h2>
        <p>
            <input id="txtMostFrequent" type="text" value="" class="formText"/>
            <input id="btnMostFrequent" type="button" class="formButton" value="GO.." />              
           
            <span></span>
        </p>
        <pre class="descrip">
        </pre>
    </div>
</body>
</html>
