<?xml version="1.0"?>
<doc>
    <assembly>
        <name>DragonUtility</name>
    </assembly>
    <members>
        <member name="T:DragonSource.Utils.ArrayHelper">
            <summary>
            系统类型-“数组”扩展方法帮助类
            </summary>
        </member>
        <member name="M:DragonSource.Utils.ArrayHelper.Clear(System.Array)">
            <summary>
            清空数组，删除数组中所有项
            </summary>
            <param name="Array">要操作的数组</param>
            <returns>清空后的数组</returns>
        </member>
        <member name="M:DragonSource.Utils.ArrayHelper.Clear``1(``0[])">
            <summary>
            清空数组的泛型实现方法
            </summary>
            <param name="Array">要清空的数组</param>
            <typeparam name="ArrayType">数组类型</typeparam>
            <returns>清空后的数组</returns>
        </member>
        <member name="M:DragonSource.Utils.ArrayHelper.Combine``1(``0[],``0[])">
            <summary>
            合并数组
            </summary>
            <typeparam name="ArrayType">数组类型</typeparam>
            <param name="Array1">数组1</param>
            <param name="Array2">数组2</param>
            <returns>返回一个包含数组1和数组2两个数组所有项的新数组</returns>
        </member>
        <member name="T:DragonUtility.Paths.MagazinePath">
            <summary>
            期刊
            </summary>
        </member>
        <member name="M:DragonUtility.Paths.MagazinePath.MagazineCoverImage(System.String,System.Int32,System.Int32,DragonUtility.Enums.E_CoverImage)">
            <summary>
            期刊封面
            </summary>
            <param name="codename"></param>
            <param name="year"></param>
            <param name="issue"></param>
            <param name="cover"></param>
            <returns></returns>
        </member>
        <member name="M:DragonUtility.Paths.MagazinePath.OriginalImage(System.String,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            原貌图片
            </summary>
            <returns></returns>
        </member>
        <member name="M:DragonUtility.Paths.MagazinePath.OriginalThumbnailImage(System.String,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            原貌图片缩略图
            </summary>
            <param name="CodeName"></param>
            <param name="Year"></param>
            <param name="Issue"></param>
            <param name="StartPage"></param>
            <param name="PageCount"></param>
            <returns></returns>
        </member>
        <member name="M:DragonUtility.Paths.MagazinePath.OriginalCatalogXml(System.String,System.Int32,System.Int32)">
            <summary>
            原貌目录
            </summary>
            <param name="CodeName"></param>
            <param name="Year"></param>
            <param name="Issue"></param>
            <returns></returns>
        </member>
        <member name="M:DragonUtility.Paths.MagazinePath.ArticleImageUrl(System.String,System.Int32,System.Int32,System.String)">
            <summary>
            文章图片
            </summary>
            <param name="CodeName"></param>
            <param name="Year"></param>
            <param name="Issue"></param>
            <param name="ImgFileName"></param>
        </member>
        <member name="M:DragonUtility.Paths.MagazinePath.MultimediaFile(System.String,System.Int32,System.Int32)">
            <summary>
            多媒体下载地址
            </summary>
            <param name="CodeName"></param>
            <param name="Year"></param>
            <param name="Issue"></param>
            <returns></returns>
        </member>
        <member name="M:DragonUtility.Paths.MagazinePath.EReaderFile(System.String,System.Int32,System.Int32,System.String)">
            <summary>
            易博士期刊下载
            </summary>
            <param name="CodeName"></param>
            <param name="Year"></param>
            <param name="Issue"></param>
            <param name="MagazineName"></param>
            <returns></returns>
        </member>
        <member name="M:DragonUtility.Paths.MagazinePath.TTSVoiceFile(System.String,System.String)">
            <summary>
            TTS语音文件路径
            </summary>
            <param name="TitleID"></param>
            <param name="Title"></param>
            <returns></returns>
        </member>
        <member name="M:DragonUtility.Paths.MagazinePath.PeopleVoiceFile(System.String,System.String)">
            <summary>
            人声语音文件
            </summary>
            <param name="TitleID"></param>
            <param name="Title"></param>
            <returns></returns>
        </member>
        <member name="M:DragonUtility.Paths.MagazinePath.ArticlePDF(System.String)">
            <summary>
            文章PDF
            </summary>
            <param name="TitleID"></param>
            <returns></returns>
        </member>
        <member name="M:DragonUtility.Paths.MagazinePath.ArticleXml(System.String,System.Boolean)">
            <summary>
            期刊文章
            </summary>
            <param name="titleid"></param>
            <param name="has">当杂志超过99期时，获取99期之后的文章方式调整</param>
            <returns></returns>
        </member>
        <member name="M:DragonUtility.Paths.MagazinePath.TextCatalogXml(System.Int32,System.Int32,System.String)">
            <summary>
            期刊目录
            </summary>
            <param name="Year"></param>
            <param name="Issue"></param>
            <param name="CodeName"></param>
            <returns></returns>
        </member>
        <member name="M:DragonUtility.Paths.MagazinePath.MagazineAwards(System.String)">
            <summary>
            期刊奖项图片
            </summary>
            <param name="imgname">图片名称</param>
            <returns></returns>
        </member>
        <member name="T:DragonUtility.Paths.OtherArticlePath">
            <summary>
            投稿荐稿
            </summary>
        </member>
        <member name="M:DragonUtility.Paths.OtherArticlePath.DeliverPaperFeatureImage(System.String)">
            <summary>
            获取投稿专栏图片路径
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:DragonUtility.Paths.OtherArticlePath.InterviewImage(System.String)">
            <summary>
            获取主编头像图片的时候是Editor_ImgName字段，获取主编文章中的信息的时候传LivingPic字段
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:DragonUtility.Paths.OtherArticlePath.WriterImage(System.String)">
            <summary>
            名家名作
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:DragonUtility.Paths.OtherArticlePath.ArticelXml(System.String)">
            <summary>
            投荐稿文章
            </summary>
            <param name="titleid"></param>
            <returns></returns>
        </member>
        <member name="T:DragonUtility.Paths.VideoPath">
            <summary>
            视频
            </summary>
        </member>
        <member name="M:DragonUtility.Paths.VideoPath.FlvFile(System.String)">
            <summary>
            FLV视频文件路径
            </summary>
            <param name="titleid"></param>
            <returns></returns>
        </member>
        <member name="M:DragonUtility.Paths.VideoPath.MP4File(System.String)">
            <summary>
            MP4视频文件路径
            </summary>
            <param name="titleid"></param>
            <returns></returns>
        </member>
        <member name="M:DragonUtility.Paths.VideoPath.SmallCoverImage(System.String)">
            <summary>
            视频大图
            </summary>
            <param name="titleid"></param>
            <returns></returns>
        </member>
        <member name="M:DragonUtility.Paths.VideoPath.BigCoverImage(System.String)">
            <summary>
            视频小图
            </summary>
            <param name="titleid"></param>
            <returns></returns>
        </member>
        <member name="T:DragonUtility.Paths.HBRPath">
            <summary>
            哈弗
            </summary>
        </member>
        <member name="M:DragonUtility.Paths.HBRPath.Article(System.Int32)">
            <summary>
            哈佛文章
            </summary>
            <param name="contentid"></param>
            <returns></returns>
        </member>
        <member name="T:DragonUtility.Paths.BookPath">
            <summary>
            图书
            </summary>
        </member>
        <member name="M:DragonUtility.Paths.BookPath.DJVUReaderUrl(System.String)">
            <summary>
            Djvu图书的阅读地址
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:DragonUtility.Paths.BookPath.BookCoverImage(System.String)">
            <summary>
            电子书封面
            </summary>
            <param name="codename"></param>
            <returns></returns>
        </member>
        <member name="M:DragonUtility.Paths.BookPath.OriginalImage(System.String,System.Int32,System.Int32)">
            <summary>
            原貌图书图片
            </summary>
            <param name="codename"></param>
            <param name="StartPage"></param>
            <param name="PageCount"></param>
            <returns></returns>
        </member>
        <member name="M:DragonUtility.Paths.BookPath.OriginalThumbnailImage(System.String,System.Int32,System.Int32)">
            <summary>
            原貌图书缩略图
            </summary>
            <param name="codename"></param>
            <param name="StartPage"></param>
            <param name="PageCount"></param>
            <returns></returns>
        </member>
        <member name="M:DragonUtility.Paths.BookPath.EReaderFile(System.String,System.Int32,System.String)">
            <summary>
            易博士下载地址
            </summary>
            <param name="codename"></param>
            <param name="year"></param>
            <param name="bookname"></param>
            <returns></returns>
        </member>
        <member name="M:DragonUtility.Paths.BookPath.ArticleXml(System.String,System.String)">
            <summary>
            图书文章
            </summary>
        </member>
        <member name="M:DragonUtility.Paths.BookPath.TextCatalogXml(System.String)">
            <summary>
            图书目录
            </summary>
            <param name="bookguid"></param>
            <returns></returns>
        </member>
        <member name="T:DragonUtility.Paths.OtherPath">
            <summary>
            其他
            </summary>
        </member>
        <member name="M:DragonUtility.Paths.OtherPath.BlogUrl(System.String)">
            <summary>
            博客地址
            </summary>
            <param name="blogId"></param>
            <returns></returns>
        </member>
        <member name="M:DragonUtility.Paths.OtherPath.BlogArticleUrl(System.String,System.String)">
            <summary>
            博客文章地址
            </summary>
            <param name="blogId"></param>
            <param name="articleId"></param>
            <returns></returns>
        </member>
        <member name="M:DragonUtility.Paths.OtherPath.HeaderImage(System.String)">
            <summary>
            用户头像地址
            </summary>
            <param name="dir"></param>
            <returns></returns>
        </member>
        <member name="T:DragonUtility.Paths.FeaturePath">
            <summary>
            专题
            </summary>
        </member>
        <member name="M:DragonUtility.Paths.FeaturePath.FeatureImage(System.String)">
            <summary>
            专题图片
            </summary>
            <param name="imgname"></param>
            <returns></returns>
        </member>
        <member name="T:DragonUtility.Paths.NewsPaperPath">
            <summary>
            报纸路径封装
            </summary>
        </member>
        <member name="M:DragonUtility.Paths.NewsPaperPath.ArticleXml(System.String)">
            <summary>
            文章
            </summary>
            <param name="titleid"></param>
            <returns></returns>
        </member>
        <member name="M:DragonUtility.Paths.NewsPaperPath.CataLogXml(System.Int32,System.Int32,System.String)">
            <summary>
            目录
            </summary>
            <param name="Year"></param>
            <param name="Issue"></param>
            <param name="CodeName"></param>
            <returns></returns>
        </member>
        <member name="M:DragonUtility.Paths.NewsPaperPath.CoverImage(System.String,System.Int32,System.Int32,DragonUtility.Enums.E_CoverImage)">
            <summary>
            封面图片
            </summary>
            <param name="codename"></param>
            <param name="year"></param>
            <param name="issue"></param>
            <param name="cover"></param>
            <returns></returns>
        </member>
        <member name="T:DragonUtility.Logic.Magazine">
            <summary>
            期刊类
            </summary>
        </member>
        <member name="M:DragonUtility.Logic.Magazine.YearByCycle(System.Int32)">
            <summary>
            根据期刊类型，返回一年可阅读期数
            </summary>
            <param name="cycle"></param>
            <returns></returns>
        </member>
        <member name="M:DragonUtility.Logic.Magazine.GetCurrentIssue(DragonUtility.Enums.E_MagazineCycle,System.DateTime)">
            <summary>
             求当前期数
            </summary>
            <param name="cycle">发行周期</param>
            <param name="dt">起始或者结束日期</param>
            <returns></returns>
        </member>
        <member name="T:DragonUtility.IO.FileService.Client.FileRepositoryServiceClient">
            <summary>
            文件服务客户端调用类
            </summary>
        </member>
        <member name="T:DragonUtility.IO.FileService.Contracts.IFileRepositoryService">
            <summary>
            文件目录服务契约
            </summary>
        </member>
        <member name="M:DragonUtility.IO.FileService.Contracts.IFileRepositoryService.ExistsDirectory(System.String)">
            <summary>
            检查目录是否存在
            </summary>
            <param name="dirPath">目录路径名称，由管理员分配的路径名称+需要检测的路径名称,以"/"号来分隔，如 order/dir1
            其中order是由管理员分配的路径名称，dir1则为你想要检测的路径名称
            </param>
            <returns>CommonResult</returns>
        </member>
        <member name="M:DragonUtility.IO.FileService.Contracts.IFileRepositoryService.CreateDirectory(System.String)">
            <summary>
            创建一个目录,
            </summary>
            <param name="dirPath">目录路径名称，由管理员分配的路径名称+需要检测的路径名称,以"/"号来分隔，如 order/dir1
            其中order是由管理员分配的路径名称，dir1为相对于权限目录的相对目录
            </param>
            <returns></returns>
        </member>
        <member name="M:DragonUtility.IO.FileService.Contracts.IFileRepositoryService.DeleteDirectory(System.String)">
            <summary>
            删除一个目录
            </summary>
            <param name="dirPath">目录路径名称，由管理员分配的路径名称+需要检测的路径名称,以"/"号来分隔，如 order/dir1
            其中order是由管理员分配的路径名称，dir1为相对于权限目录的相对目录
            </param>
            <returns></returns>
        </member>
        <member name="M:DragonUtility.IO.FileService.Contracts.IFileRepositoryService.RenameDirectory(System.String,System.String)">
            <summary>
            重命名目录
            </summary>
            <param name="sourceDirName">源目录路径名称，由管理员分配的路径名称+需要检测的路径名称,以"/"号来分隔，如 
            order/dir1
            其中order是由管理员分配的路径名称，dir1为相对于权限目录的相对目录
            </param>
            <param name="destDirName">目标目录路径名称，由管理员分配的路径名称+需要检测的路径名称,以"/"号来分隔，如 
            order/dir2
            其中order是由管理员分配的路径名称，dir2为相对于权限目录的相对目录
            </param>
            <returns></returns>
        </member>
        <member name="M:DragonUtility.IO.FileService.Contracts.IFileRepositoryService.ExistsFile(System.String)">
            <summary>
            检查文件是否存在
            </summary>
            <param name="filePath">文件路径名称，由管理员分配的路径名称+需要检测的路径名称,以"/"号来分隔
            如：order/dir1/aa.txt,
            order为管理员分配的路径名称，
            dir1为你想要检测文件所在的相对目录路径，
            aa.txt为要检测的文件名
            称
            </param>
            <returns></returns>
        </member>
        <member name="M:DragonUtility.IO.FileService.Contracts.IFileRepositoryService.CreateImageFile(DragonUtility.IO.FileService.Contracts.FileMessage)">
            <summary>
            创建一个Image类型的文件,文件路径名称，由管理员分配的路径名称+需要检测的路径名称,以"/"号来分隔
            如：order/aa.txt, order为管理员分配的路径名称， aa.txt为要创建的文件名
            称
            </summary>
            <param name="message">要创建的文件的文件名称路径地址和流数据</param>
            <returns></returns>
        </member>
        <member name="M:DragonUtility.IO.FileService.Contracts.IFileRepositoryService.DeleteFile(System.String)">
            <summary>
            删除文件
            </summary>
            <param name="filePath"></param>
            <returns></returns>
        </member>
        <member name="M:DragonUtility.IO.FileService.Contracts.IFileRepositoryService.RenameFile(System.String,System.String)">
            <summary>
            重命名文件，文件名称格式：权限目录/相对目录/文件名称
            </summary>
            <param name="sourceFileName">源文件名称</param>
            <param name="destFileName">目录文件名称</param>
            <returns></returns>
        </member>
        <member name="M:DragonUtility.IO.FileService.Contracts.IFileRepositoryService.GetDirectories(System.String)">
            <summary>
            获取dirpath下的所有目录列表
            </summary>
            <param name="dirPath">权限目录/相对目录</param>
            <returns></returns>
        </member>
        <member name="M:DragonUtility.IO.FileService.Contracts.IFileRepositoryService.GetDirectoryInfo(System.String)">
            <summary>
            获取单个目录信息
            </summary>
            <param name="dirPath">由权限目录+相对目录构成，以"/"分隔，如order/dir1,也可以只写权限目录</param>
            <returns></returns>
        </member>
        <member name="M:DragonUtility.IO.FileService.Contracts.IFileRepositoryService.GetImageFiles(System.String)">
            <summary>
            获取目录下所有Image文件列表，
            </summary>
            <param name="dirPath">由权限目录+相对目录构成，以"/"分隔，如order/dir1,也可以只写权限目录</param>
            <returns></returns>
        </member>
        <member name="M:DragonUtility.IO.FileService.Contracts.IFileRepositoryService.SearchImageFiles(System.String,System.String)">
            <summary>
            按目录名称和文件名称查询图片文件
            </summary>
            <param name="dirPath">查询目录地址</param>
            <param name="fileName">文件名称</param>
            <returns></returns>
        </member>
        <member name="M:DragonUtility.IO.FileService.Contracts.IFileRepositoryService.GetFileStream(System.String)">
            <summary>
            获取文件的流数据
            </summary>
            <param name="filePath">要获取文件的路径地址</param>
            <returns></returns>
        </member>
        <member name="M:DragonUtility.IO.FileService.Client.FileRepositoryServiceClient.ExistsDirectory(System.String)">
            <summary>
            检查目录是否存在
            </summary>
            <param name="dirPath">目录路径名称，由管理员分配的路径名称+需要检测的路径名称,以"/"号来分隔，如 order/dir1
            其中order是由管理员分配的路径名称，dir1则为你想要检测的路径名称
            </param>
            <returns>CommonResult</returns>
        </member>
        <member name="M:DragonUtility.IO.FileService.Client.FileRepositoryServiceClient.CreateDirectory(System.String)">
            <summary>
            创建一个目录,
            </summary>
            <param name="dirPath">目录路径名称，由管理员分配的路径名称+需要检测的路径名称,以"/"号来分隔，如 order/dir1
            其中order是由管理员分配的路径名称，dir1为相对于权限目录的相对目录
            </param>
            <returns></returns>
        </member>
        <member name="M:DragonUtility.IO.FileService.Client.FileRepositoryServiceClient.DeleteDirectory(System.String)">
            <summary>
            删除一个目录
            </summary>
            <param name="dirPath">目录路径名称，由管理员分配的路径名称+需要检测的路径名称,以"/"号来分隔，如 order/dir1
            其中order是由管理员分配的路径名称，dir1为相对于权限目录的相对目录
            </param>
            <returns></returns>
        </member>
        <member name="M:DragonUtility.IO.FileService.Client.FileRepositoryServiceClient.RenameDirectory(System.String,System.String)">
            <summary>
            重命名目录
            </summary>
            <param name="sourceDirName">源目录路径名称，由管理员分配的路径名称+需要检测的路径名称,以"/"号来分隔，如 
            order/dir1
            其中order是由管理员分配的路径名称，dir1为相对于权限目录的相对目录
            </param>
            <param name="destDirName">目标目录路径名称，由管理员分配的路径名称+需要检测的路径名称,以"/"号来分隔，如 
            order/dir2
            其中order是由管理员分配的路径名称，dir2为相对于权限目录的相对目录
            </param>
            <returns></returns>
        </member>
        <member name="M:DragonUtility.IO.FileService.Client.FileRepositoryServiceClient.ExistsFile(System.String)">
            <summary>
            检查文件是否存在
            </summary>
            <param name="filePath">文件路径名称，由管理员分配的路径名称+需要检测的路径名称,以"/"号来分隔
            如：order/dir1/aa.txt,
            order为管理员分配的路径名称，
            dir1为你想要检测文件所在的相对目录路径，
            aa.txt为要检测的文件名
            称
            </param>
            <returns></returns>
        </member>
        <member name="M:DragonUtility.IO.FileService.Client.FileRepositoryServiceClient.CreateImageFile(System.String,System.IO.Stream,System.String@)">
            <summary>
            
            </summary>
            <param name="Path">文件路径名称，由管理员分配的路径名称+需要检测的路径名称,以"/"号来分隔, 如：order/dir1/aa.txt, order为管理员分配的路径名称， dir1为你想要检测文件所在的相对目录路径， aa.txt为要检测的文件名称</param>
            <param name="FileData">文件流数据</param>
            <param name="Message">out参数，用于传出处理结果，成功返回处理后文件名称，失败返回失败原因信息</param>
            <returns></returns>
        </member>
        <member name="M:DragonUtility.IO.FileService.Client.FileRepositoryServiceClient.DeleteFile(System.String)">
            <summary>
            删除文件
            </summary>
            <param name="filePath">文件路径名称，由管理员分配的路径名称+需要检测的路径名称</param>
            <returns></returns>
        </member>
        <member name="M:DragonUtility.IO.FileService.Client.FileRepositoryServiceClient.RenameFile(System.String,System.String)">
            <summary>
            重命名文件，文件名称格式：权限目录/相对目录/文件名称
            </summary>
            <param name="sourceFileName">源文件名称</param>
            <param name="destFileName">目录文件名称</param>
            <returns></returns>
        </member>
        <member name="M:DragonUtility.IO.FileService.Client.FileRepositoryServiceClient.GetDirectories(System.String)">
            <summary>
            获取dirpath下的所有目录列表
            </summary>
            <param name="dirPath">权限目录/相对目录</param>
            <returns></returns>
        </member>
        <member name="M:DragonUtility.IO.FileService.Client.FileRepositoryServiceClient.GetDirectoryInfo(System.String)">
            <summary>
            获取单个目录信息
            </summary>
            <param name="dirPath">由权限目录+相对目录构成，以"/"分隔，如order/dir1,也可以只写权限目录</param>
            <returns></returns>
        </member>
        <member name="M:DragonUtility.IO.FileService.Client.FileRepositoryServiceClient.GetImageFiles(System.String)">
            <summary>
            获取目录下所有Image文件列表，
            </summary>
            <param name="dirPath">由权限目录+相对目录构成，以"/"分隔，如order/dir1,也可以只写权限目录</param>
            <returns></returns>
        </member>
        <member name="M:DragonUtility.IO.FileService.Client.FileRepositoryServiceClient.SearchImageFiles(System.String,System.String)">
            <summary>
            按目录名称和文件名称查询图片文件
            </summary>
            <param name="dirPath">查询目录地址</param>
            <param name="fileName">文件名称</param>
            <returns></returns>
        </member>
        <member name="M:DragonUtility.IO.FileService.Client.FileRepositoryServiceClient.GetFileStream(System.String)">
            <summary>
            获取文件的流数据
            </summary>
            <param name="path">要获取文件的路径地址</param>
            <returns></returns>
        </member>
        <member name="T:DragonUtility.Operate.Logic.OperateItem">
            <summary>
            模块逻辑类
            </summary>
        </member>
        <member name="T:DragonUtility.Operate.Logic.OperateLogic">
            <summary>
            逻辑基类
            </summary>
        </member>
        <member name="P:DragonUtility.Operate.Logic.OperateLogic.ConnectionString">
            <summary>
            数据库连接字符串
            </summary>
        </member>
        <member name="M:DragonUtility.Operate.Logic.OperateItem.AddOperateItem(DragonUtility.Operate.Model.OperateItem)">
            <summary>
            添加模块
            </summary>
            <param name="operateItem">被添加模块</param>
            <returns></returns>
        </member>
        <member name="M:DragonUtility.Operate.Logic.OperateItem.UpdateOperateItem(DragonUtility.Operate.Model.OperateItem)">
            <summary>
            更新模块
            </summary>
            <param name="operateItem">被更新模块</param>
            <returns></returns>
        </member>
        <member name="M:DragonUtility.Operate.Logic.OperateItem.RemoveOperateItem(System.Int32)">
            <summary>
            删除模块
            </summary>
            <param name="operateID">模块编号</param>
            <returns></returns>
        </member>
        <member name="M:DragonUtility.Operate.Logic.OperateItem.GetOperateItem(System.Int32)">
            <summary>
            获取模块
            </summary>
            <param name="operateID">模块编号</param>
            <returns></returns>
        </member>
        <member name="M:DragonUtility.Operate.Logic.OperateItem.GetOperateItemList">
            <summary>
            获取模块列表
            </summary>
            <returns></returns>
        </member>
        <member name="M:DragonUtility.Operate.Logic.OperateItem.GetOperateItemList(System.Int32)">
            <summary>
            获取指定模块编号下的模块列表
            </summary>
            <param name="operateID">模块编号</param>
            <returns></returns>
        </member>
        <member name="M:DragonUtility.Operate.Logic.OperateItem.GetOperateItemList(DragonUtility.Operate.Model.SearchOperateItemModel)">
            <summary>
            获取模块列表
            </summary>
            <param name="model">查询实例</param>
            <returns></returns>
        </member>
        <member name="M:DragonUtility.Operate.Logic.OperateItem.GetOperateItemList(DragonUtility.Operate.Model.SearchOperateItemModel,System.Int32)">
            <summary>
            获取指定模块名称下的模块列表
            </summary>
            <param name="model">查询实例</param>
            <param name="orderType">排序类型 0:创建时间倒序 1:排序值倒序 2:排序值正序</param>
            <returns></returns>
        </member>
        <member name="M:DragonUtility.Operate.Logic.OperateItem.GetOperateItemList(System.Int32,System.Int32,DragonUtility.Operate.Model.SearchOperateItemModel,System.Int32)">
            <summary>
            获取指定模块编号和模块名称下的分页模块列表
            </summary>
            <param name="pageIndex">当前分页</param>
            <param name="pageSize">分页大小</param>
            <param name="model">查询实例</param>
            <param name="orderType">排序类型 0:创建时间倒序 1:排序值倒序 2:排序值正序</param>
            <returns></returns>
        </member>
        <member name="T:DragonUtility.DragonNavigation.SerialNumberBuilder">
            <summary>
            序列号生成器，序列号规则为36进制（0~9a~z）
            </summary>
            <remarks>
            Author: myun
            Create Date: 2013-04-26
            </remarks>
        </member>
        <member name="M:DragonUtility.DragonNavigation.SerialNumberBuilder.MakerSerialNumber(System.String)">
            <summary>
            产生新编号
            </summary>
            <param name="lastCode">当前编号的最后一个编号</param>
            <returns>新产生的编号，如果编号已经到最大值则会进位；如编号到达“zz”时返回“100”</returns>
        </member>
        <member name="M:DragonUtility.DragonNavigation.SerialNumberBuilder.SerialNumberCalculate(System.Char@)">
            <summary>
            编号运算器
            </summary>
            <param name="chr">编号字符；按照编号规则将参数值改为下一个字符，如果到达最后一个字符则修改为第一个字符</param>
            <returns>编号在范围内返回true，超出范围返回false</returns>
        </member>
        <member name="P:DragonUtility.DragonNavigation.SerialNumberBuilder.Instance">
            <summary>
            获取序列号生成器实例
            </summary>
        </member>
        <member name="T:DragonUtility.DataTypes.ExtensionMethods.ArrayExtensions">
            <summary>
            系统类型-“数组”扩展方法类
            </summary>
        </member>
        <member name="M:DragonUtility.DataTypes.ExtensionMethods.ArrayExtensions.Clear(System.Array)">
            <summary>
            清空数组，删除数组中所有项
            </summary>
            <param name="Array">要操作的数组</param>
            <returns>清空后的数组</returns>
        </member>
        <member name="M:DragonUtility.DataTypes.ExtensionMethods.ArrayExtensions.Clear``1(``0[])">
            <summary>
            清空数组的泛型实现方法
            </summary>
            <param name="Array">要清空的数组</param>
            <typeparam name="ArrayType">数组类型</typeparam>
            <returns>清空后的数组</returns>
        </member>
        <member name="M:DragonUtility.DataTypes.ExtensionMethods.ArrayExtensions.Combine``1(``0[],``0[])">
            <summary>
            合并数组
            </summary>
            <typeparam name="ArrayType">数组类型</typeparam>
            <param name="Array1">数组1</param>
            <param name="Array2">数组2</param>
            <returns>返回一个包含数组1和数组2两个数组所有项的新数组</returns>
        </member>
        <member name="T:DragonUtility.DataProvider.SqlHelper">
            <summary>
            访问SQL Server数据库常用操作封装类，所有方法均为Static类型
            </summary>
        </member>
        <member name="F:DragonUtility.DataProvider.SqlHelper.CONN_DragonResource">
            <summary>
            统一资源链接字符串
            </summary>
        </member>
        <member name="F:DragonUtility.DataProvider.SqlHelper.CONN_DragonUser">
            <summary>
            统一用户链接字符串
            </summary>
        </member>
        <member name="F:DragonUtility.DataProvider.SqlHelper.CONN_DragonLog">
            <summary>
            统一日志链接字符串
            </summary>
        </member>
        <member name="F:DragonUtility.DataProvider.SqlHelper.CONN_OperateLog">
            <summary>
            统一操作链接字符串
            </summary>
        </member>
        <member name="F:DragonUtility.DataProvider.SqlHelper.CONN_DragonSearch">
            <summary>
            统一检索链接字符串
            </summary>
        </member>
        <member name="F:DragonUtility.DataProvider.SqlHelper.CONN_DragonOperate">
            <summary>
            统一运营模块链接字符串
            </summary>
        </member>
        <member name="F:DragonUtility.DataProvider.SqlHelper.CONN_DragonCompilation">
            <summary>
            统一汇编系统链接字符串
            </summary>
        </member>
        <member name="F:DragonUtility.DataProvider.SqlHelper.CONN_DragonNavigation">
            <summary>
            统一导航模块链接字符串
            </summary>
        </member>
        <member name="M:DragonUtility.DataProvider.SqlHelper.AttachParameters(System.Data.SqlClient.SqlCommand,System.Data.SqlClient.SqlParameter[])">
            <summary>
            This method is used to attach array of SqlParameters to a SqlCommand.
            
            This method will assign a value of DbNull to any parameter with a direction of
            InputOutput and a value of null.  
            
            This behavior will prevent default values from being used, but
            this will be the less common case than an intended pure output parameter (derived as InputOutput)
            where the user provided no input value.
            </summary>
            <param name="command">The command to which the parameters will be added</param>
            <param name="commandParameters">An array of SqlParameters to be added to command</param>
        </member>
        <member name="M:DragonUtility.DataProvider.SqlHelper.AssignParameterValues(System.Data.SqlClient.SqlParameter[],System.Data.DataRow)">
            <summary>
            This method assigns dataRow column values to an array of SqlParameters
            </summary>
            <param name="commandParameters">Array of SqlParameters to be assigned values</param>
            <param name="dataRow">The dataRow used to hold the stored procedure's parameter values</param>
        </member>
        <member name="M:DragonUtility.DataProvider.SqlHelper.AssignParameterValues(System.Data.SqlClient.SqlParameter[],System.Object[])">
            <summary>
            This method assigns an array of values to an array of SqlParameters
            </summary>
            <param name="commandParameters">Array of SqlParameters to be assigned values</param>
            <param name="parameterValues">Array of objects holding the values to be assigned</param>
        </member>
        <member name="M:DragonUtility.DataProvider.SqlHelper.PrepareCommand(System.Data.SqlClient.SqlCommand,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[],System.Boolean@)">
            <summary>
            This method opens (if necessary) and assigns a connection, transaction, command type and parameters 
            to the provided command
            </summary>
            <param name="command">The SqlCommand to be prepared</param>
            <param name="connection">A valid SqlConnection, on which to execute this command</param>
            <param name="transaction">A valid SqlTransaction, or 'null'</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandParameters">An array of SqlParameters to be associated with the command or 'null' if no parameters are required</param>
            <param name="mustCloseConnection"><c>true</c> if the connection was opened by the method, otherwose is false.</param>
        </member>
        <member name="M:DragonUtility.DataProvider.SqlHelper.ExecuteNonQuery(System.String,System.Data.CommandType,System.String)">
            <summary>
            Execute a SqlCommand (that returns no resultset and takes no parameters) against the database specified in 
            the connection string
            </summary>
            <remarks>
            e.g.:  
             int result = ExecuteNonQuery(connString, CommandType.StoredProcedure, "PublishOrders");
            </remarks>
            <param name="connectionString">A valid connection string for a SqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <returns>An int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:DragonUtility.DataProvider.SqlHelper.ExecuteNonQuery(System.String,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Execute a SqlCommand (that returns no resultset) against the database specified in the connection string 
            using the provided parameters
            </summary>
            <remarks>
            e.g.:  
             int result = ExecuteNonQuery(connString, CommandType.StoredProcedure, "PublishOrders", new SqlParameter("@prodid", 24));
            </remarks>
            <param name="connectionString">A valid connection string for a SqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandParameters">An array of SqlParamters used to execute the command</param>
            <returns>An int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:DragonUtility.DataProvider.SqlHelper.ExecuteNonQuery(System.String,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns no resultset) against the database specified in 
            the connection string using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             int result = ExecuteNonQuery(connString, "PublishOrders", 24, 36);
            </remarks>
            <param name="connectionString">A valid connection string for a SqlConnection</param>
            <param name="spName">The name of the stored prcedure</param>
            <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
            <returns>An int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:DragonUtility.DataProvider.SqlHelper.ExecuteNonQuery(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String)">
            <summary>
            Execute a SqlCommand (that returns no resultset and takes no parameters) against the provided SqlConnection. 
            </summary>
            <remarks>
            e.g.:  
             int result = ExecuteNonQuery(conn, CommandType.StoredProcedure, "PublishOrders");
            </remarks>
            <param name="connection">A valid SqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <returns>An int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:DragonUtility.DataProvider.SqlHelper.ExecuteNonQuery(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Execute a SqlCommand (that returns no resultset) against the specified SqlConnection 
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             int result = ExecuteNonQuery(conn, CommandType.StoredProcedure, "PublishOrders", new SqlParameter("@prodid", 24));
            </remarks>
            <param name="connection">A valid SqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandParameters">An array of SqlParamters used to execute the command</param>
            <returns>An int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:DragonUtility.DataProvider.SqlHelper.ExecuteNonQuery(System.Data.SqlClient.SqlConnection,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns no resultset) against the specified SqlConnection 
            using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             int result = ExecuteNonQuery(conn, "PublishOrders", 24, 36);
            </remarks>
            <param name="connection">A valid SqlConnection</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
            <returns>An int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:DragonUtility.DataProvider.SqlHelper.ExecuteNonQuery(System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String)">
            <summary>
            Execute a SqlCommand (that returns no resultset and takes no parameters) against the provided SqlTransaction. 
            </summary>
            <remarks>
            e.g.:  
             int result = ExecuteNonQuery(trans, CommandType.StoredProcedure, "PublishOrders");
            </remarks>
            <param name="transaction">A valid SqlTransaction</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <returns>An int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:DragonUtility.DataProvider.SqlHelper.ExecuteNonQuery(System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Execute a SqlCommand (that returns no resultset) against the specified SqlTransaction
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             int result = ExecuteNonQuery(trans, CommandType.StoredProcedure, "GetOrders", new SqlParameter("@prodid", 24));
            </remarks>
            <param name="transaction">A valid SqlTransaction</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandParameters">An array of SqlParamters used to execute the command</param>
            <returns>An int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:DragonUtility.DataProvider.SqlHelper.ExecuteNonQuery(System.Data.SqlClient.SqlTransaction,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns no resultset) against the specified 
            SqlTransaction using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             int result = ExecuteNonQuery(conn, trans, "PublishOrders", 24, 36);
            </remarks>
            <param name="transaction">A valid SqlTransaction</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
            <returns>An int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:DragonUtility.DataProvider.SqlHelper.ExecuteDataset(System.String,System.Data.CommandType,System.String)">
            <summary>
            Execute a SqlCommand (that returns a resultset and takes no parameters) against the database specified in 
            the connection string. 
            </summary>
            <remarks>
            e.g.:  
             DataSet ds = ExecuteDataset(connString, CommandType.StoredProcedure, "GetOrders");
            </remarks>
            <param name="connectionString">A valid connection string for a SqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <returns>A dataset containing the resultset generated by the command</returns>
        </member>
        <member name="M:DragonUtility.DataProvider.SqlHelper.ExecuteDataset(System.String,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Execute a SqlCommand (that returns a resultset) against the database specified in the connection string 
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             DataSet ds = ExecuteDataset(connString, CommandType.StoredProcedure, "GetOrders", new SqlParameter("@prodid", 24));
            </remarks>
            <param name="connectionString">A valid connection string for a SqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandParameters">An array of SqlParamters used to execute the command</param>
            <returns>A dataset containing the resultset generated by the command</returns>
        </member>
        <member name="M:DragonUtility.DataProvider.SqlHelper.ExecuteDataset(System.String,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a resultset) against the database specified in 
            the connection string using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             DataSet ds = ExecuteDataset(connString, "GetOrders", 24, 36);
            </remarks>
            <param name="connectionString">A valid connection string for a SqlConnection</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
            <returns>A dataset containing the resultset generated by the command</returns>
        </member>
        <member name="M:DragonUtility.DataProvider.SqlHelper.ExecuteDataset(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String)">
            <summary>
            Execute a SqlCommand (that returns a resultset and takes no parameters) against the provided SqlConnection. 
            </summary>
            <remarks>
            e.g.:  
             DataSet ds = ExecuteDataset(conn, CommandType.StoredProcedure, "GetOrders");
            </remarks>
            <param name="connection">A valid SqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <returns>A dataset containing the resultset generated by the command</returns>
        </member>
        <member name="M:DragonUtility.DataProvider.SqlHelper.ExecuteDataset(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Execute a SqlCommand (that returns a resultset) against the specified SqlConnection 
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             DataSet ds = ExecuteDataset(conn, CommandType.StoredProcedure, "GetOrders", new SqlParameter("@prodid", 24));
            </remarks>
            <param name="connection">A valid SqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandParameters">An array of SqlParamters used to execute the command</param>
            <returns>A dataset containing the resultset generated by the command</returns>
        </member>
        <member name="M:DragonUtility.DataProvider.SqlHelper.ExecuteDataset(System.Data.SqlClient.SqlConnection,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a resultset) against the specified SqlConnection 
            using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             DataSet ds = ExecuteDataset(conn, "GetOrders", 24, 36);
            </remarks>
            <param name="connection">A valid SqlConnection</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
            <returns>A dataset containing the resultset generated by the command</returns>
        </member>
        <member name="M:DragonUtility.DataProvider.SqlHelper.ExecuteDataset(System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String)">
            <summary>
            Execute a SqlCommand (that returns a resultset and takes no parameters) against the provided SqlTransaction. 
            </summary>
            <remarks>
            e.g.:  
             DataSet ds = ExecuteDataset(trans, CommandType.StoredProcedure, "GetOrders");
            </remarks>
            <param name="transaction">A valid SqlTransaction</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <returns>A dataset containing the resultset generated by the command</returns>
        </member>
        <member name="M:DragonUtility.DataProvider.SqlHelper.ExecuteDataset(System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Execute a SqlCommand (that returns a resultset) against the specified SqlTransaction
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             DataSet ds = ExecuteDataset(trans, CommandType.StoredProcedure, "GetOrders", new SqlParameter("@prodid", 24));
            </remarks>
            <param name="transaction">A valid SqlTransaction</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandParameters">An array of SqlParamters used to execute the command</param>
            <returns>A dataset containing the resultset generated by the command</returns>
        </member>
        <member name="M:DragonUtility.DataProvider.SqlHelper.ExecuteDataset(System.Data.SqlClient.SqlTransaction,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a resultset) against the specified 
            SqlTransaction using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             DataSet ds = ExecuteDataset(trans, "GetOrders", 24, 36);
            </remarks>
            <param name="transaction">A valid SqlTransaction</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
            <returns>A dataset containing the resultset generated by the command</returns>
        </member>
        <member name="M:DragonUtility.DataProvider.SqlHelper.ExecuteReader(System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[],DragonUtility.DataProvider.SqlHelper.SqlConnectionOwnership)">
            <summary>
            Create and prepare a SqlCommand, and call ExecuteReader with the appropriate CommandBehavior.
            </summary>
            <remarks>
            If we created and opened the connection, we want the connection to be closed when the DataReader is closed.
            
            If the caller provided the connection, we want to leave it to them to manage.
            </remarks>
            <param name="connection">A valid SqlConnection, on which to execute this command</param>
            <param name="transaction">A valid SqlTransaction, or 'null'</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandParameters">An array of SqlParameters to be associated with the command or 'null' if no parameters are required</param>
            <param name="connectionOwnership">Indicates whether the connection parameter was provided by the caller, or created by SqlHelper</param>
            <returns>SqlDataReader containing the results of the command</returns>
        </member>
        <member name="M:DragonUtility.DataProvider.SqlHelper.ExecuteReader(System.String,System.Data.CommandType,System.String)">
            <summary>
            Execute a SqlCommand (that returns a resultset and takes no parameters) against the database specified in 
            the connection string. 
            </summary>
            <remarks>
            e.g.:  
             SqlDataReader dr = ExecuteReader(connString, CommandType.StoredProcedure, "GetOrders");
            </remarks>
            <param name="connectionString">A valid connection string for a SqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <returns>A SqlDataReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:DragonUtility.DataProvider.SqlHelper.ExecuteReader(System.String,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Execute a SqlCommand (that returns a resultset) against the database specified in the connection string 
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             SqlDataReader dr = ExecuteReader(connString, CommandType.StoredProcedure, "GetOrders", new SqlParameter("@prodid", 24));
            </remarks>
            <param name="connectionString">A valid connection string for a SqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandParameters">An array of SqlParamters used to execute the command</param>
            <returns>A SqlDataReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:DragonUtility.DataProvider.SqlHelper.ExecuteReader(System.String,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a resultset) against the database specified in 
            the connection string using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             SqlDataReader dr = ExecuteReader(connString, "GetOrders", 24, 36);
            </remarks>
            <param name="connectionString">A valid connection string for a SqlConnection</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
            <returns>A SqlDataReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:DragonUtility.DataProvider.SqlHelper.ExecuteReader(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String)">
            <summary>
            Execute a SqlCommand (that returns a resultset and takes no parameters) against the provided SqlConnection. 
            </summary>
            <remarks>
            e.g.:  
             SqlDataReader dr = ExecuteReader(conn, CommandType.StoredProcedure, "GetOrders");
            </remarks>
            <param name="connection">A valid SqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <returns>A SqlDataReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:DragonUtility.DataProvider.SqlHelper.ExecuteReader(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Execute a SqlCommand (that returns a resultset) against the specified SqlConnection 
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             SqlDataReader dr = ExecuteReader(conn, CommandType.StoredProcedure, "GetOrders", new SqlParameter("@prodid", 24));
            </remarks>
            <param name="connection">A valid SqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandParameters">An array of SqlParamters used to execute the command</param>
            <returns>A SqlDataReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:DragonUtility.DataProvider.SqlHelper.ExecuteReader(System.Data.SqlClient.SqlConnection,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a resultset) against the specified SqlConnection 
            using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             SqlDataReader dr = ExecuteReader(conn, "GetOrders", 24, 36);
            </remarks>
            <param name="connection">A valid SqlConnection</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
            <returns>A SqlDataReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:DragonUtility.DataProvider.SqlHelper.ExecuteReader(System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String)">
            <summary>
            Execute a SqlCommand (that returns a resultset and takes no parameters) against the provided SqlTransaction. 
            </summary>
            <remarks>
            e.g.:  
             SqlDataReader dr = ExecuteReader(trans, CommandType.StoredProcedure, "GetOrders");
            </remarks>
            <param name="transaction">A valid SqlTransaction</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <returns>A SqlDataReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:DragonUtility.DataProvider.SqlHelper.ExecuteReader(System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Execute a SqlCommand (that returns a resultset) against the specified SqlTransaction
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
              SqlDataReader dr = ExecuteReader(trans, CommandType.StoredProcedure, "GetOrders", new SqlParameter("@prodid", 24));
            </remarks>
            <param name="transaction">A valid SqlTransaction</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandParameters">An array of SqlParamters used to execute the command</param>
            <returns>A SqlDataReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:DragonUtility.DataProvider.SqlHelper.ExecuteReader(System.Data.SqlClient.SqlTransaction,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a resultset) against the specified
            SqlTransaction using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             SqlDataReader dr = ExecuteReader(trans, "GetOrders", 24, 36);
            </remarks>
            <param name="transaction">A valid SqlTransaction</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
            <returns>A SqlDataReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:DragonUtility.DataProvider.SqlHelper.ExecuteScalar(System.String,System.Data.CommandType,System.String)">
            <summary>
            Execute a SqlCommand (that returns a 1x1 resultset and takes no parameters) against the database specified in 
            the connection string. 
            </summary>
            <remarks>
            e.g.:  
             int orderCount = (int)ExecuteScalar(connString, CommandType.StoredProcedure, "GetOrderCount");
            </remarks>
            <param name="connectionString">A valid connection string for a SqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <returns>An object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="M:DragonUtility.DataProvider.SqlHelper.ExecuteScalar(System.String,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Execute a SqlCommand (that returns a 1x1 resultset) against the database specified in the connection string 
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             int orderCount = (int)ExecuteScalar(connString, CommandType.StoredProcedure, "GetOrderCount", new SqlParameter("@prodid", 24));
            </remarks>
            <param name="connectionString">A valid connection string for a SqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandParameters">An array of SqlParamters used to execute the command</param>
            <returns>An object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="M:DragonUtility.DataProvider.SqlHelper.ExecuteScalar(System.String,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a 1x1 resultset) against the database specified in 
            the connection string using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             int orderCount = (int)ExecuteScalar(connString, "GetOrderCount", 24, 36);
            </remarks>
            <param name="connectionString">A valid connection string for a SqlConnection</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
            <returns>An object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="M:DragonUtility.DataProvider.SqlHelper.ExecuteScalar(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String)">
            <summary>
            Execute a SqlCommand (that returns a 1x1 resultset and takes no parameters) against the provided SqlConnection. 
            </summary>
            <remarks>
            e.g.:  
             int orderCount = (int)ExecuteScalar(conn, CommandType.StoredProcedure, "GetOrderCount");
            </remarks>
            <param name="connection">A valid SqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <returns>An object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="M:DragonUtility.DataProvider.SqlHelper.ExecuteScalar(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Execute a SqlCommand (that returns a 1x1 resultset) against the specified SqlConnection 
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             int orderCount = (int)ExecuteScalar(conn, CommandType.StoredProcedure, "GetOrderCount", new SqlParameter("@prodid", 24));
            </remarks>
            <param name="connection">A valid SqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandParameters">An array of SqlParamters used to execute the command</param>
            <returns>An object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="M:DragonUtility.DataProvider.SqlHelper.ExecuteScalar(System.Data.SqlClient.SqlConnection,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a 1x1 resultset) against the specified SqlConnection 
            using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             int orderCount = (int)ExecuteScalar(conn, "GetOrderCount", 24, 36);
            </remarks>
            <param name="connection">A valid SqlConnection</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
            <returns>An object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="M:DragonUtility.DataProvider.SqlHelper.ExecuteScalar(System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String)">
            <summary>
            Execute a SqlCommand (that returns a 1x1 resultset and takes no parameters) against the provided SqlTransaction. 
            </summary>
            <remarks>
            e.g.:  
             int orderCount = (int)ExecuteScalar(trans, CommandType.StoredProcedure, "GetOrderCount");
            </remarks>
            <param name="transaction">A valid SqlTransaction</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <returns>An object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="M:DragonUtility.DataProvider.SqlHelper.ExecuteScalar(System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Execute a SqlCommand (that returns a 1x1 resultset) against the specified SqlTransaction
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             int orderCount = (int)ExecuteScalar(trans, CommandType.StoredProcedure, "GetOrderCount", new SqlParameter("@prodid", 24));
            </remarks>
            <param name="transaction">A valid SqlTransaction</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandParameters">An array of SqlParamters used to execute the command</param>
            <returns>An object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="M:DragonUtility.DataProvider.SqlHelper.ExecuteScalar(System.Data.SqlClient.SqlTransaction,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a 1x1 resultset) against the specified
            SqlTransaction using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             int orderCount = (int)ExecuteScalar(trans, "GetOrderCount", 24, 36);
            </remarks>
            <param name="transaction">A valid SqlTransaction</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
            <returns>An object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="M:DragonUtility.DataProvider.SqlHelper.ExecuteXmlReader(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String)">
            <summary>
            Execute a SqlCommand (that returns a resultset and takes no parameters) against the provided SqlConnection. 
            </summary>
            <remarks>
            e.g.:  
             XmlReader r = ExecuteXmlReader(conn, CommandType.StoredProcedure, "GetOrders");
            </remarks>
            <param name="connection">A valid SqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command using "FOR XML AUTO"</param>
            <returns>An XmlReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:DragonUtility.DataProvider.SqlHelper.ExecuteXmlReader(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Execute a SqlCommand (that returns a resultset) against the specified SqlConnection 
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             XmlReader r = ExecuteXmlReader(conn, CommandType.StoredProcedure, "GetOrders", new SqlParameter("@prodid", 24));
            </remarks>
            <param name="connection">A valid SqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command using "FOR XML AUTO"</param>
            <param name="commandParameters">An array of SqlParamters used to execute the command</param>
            <returns>An XmlReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:DragonUtility.DataProvider.SqlHelper.ExecuteXmlReader(System.Data.SqlClient.SqlConnection,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a resultset) against the specified SqlConnection 
            using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             XmlReader r = ExecuteXmlReader(conn, "GetOrders", 24, 36);
            </remarks>
            <param name="connection">A valid SqlConnection</param>
            <param name="spName">The name of the stored procedure using "FOR XML AUTO"</param>
            <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
            <returns>An XmlReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:DragonUtility.DataProvider.SqlHelper.ExecuteXmlReader(System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String)">
            <summary>
            Execute a SqlCommand (that returns a resultset and takes no parameters) against the provided SqlTransaction. 
            </summary>
            <remarks>
            e.g.:  
             XmlReader r = ExecuteXmlReader(trans, CommandType.StoredProcedure, "GetOrders");
            </remarks>
            <param name="transaction">A valid SqlTransaction</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command using "FOR XML AUTO"</param>
            <returns>An XmlReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:DragonUtility.DataProvider.SqlHelper.ExecuteXmlReader(System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Execute a SqlCommand (that returns a resultset) against the specified SqlTransaction
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             XmlReader r = ExecuteXmlReader(trans, CommandType.StoredProcedure, "GetOrders", new SqlParameter("@prodid", 24));
            </remarks>
            <param name="transaction">A valid SqlTransaction</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command using "FOR XML AUTO"</param>
            <param name="commandParameters">An array of SqlParamters used to execute the command</param>
            <returns>An XmlReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:DragonUtility.DataProvider.SqlHelper.ExecuteXmlReader(System.Data.SqlClient.SqlTransaction,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a resultset) against the specified 
            SqlTransaction using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             XmlReader r = ExecuteXmlReader(trans, "GetOrders", 24, 36);
            </remarks>
            <param name="transaction">A valid SqlTransaction</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
            <returns>A dataset containing the resultset generated by the command</returns>
        </member>
        <member name="M:DragonUtility.DataProvider.SqlHelper.FillDataset(System.String,System.Data.CommandType,System.String,System.Data.DataSet,System.String[])">
            <summary>
            Execute a SqlCommand (that returns a resultset and takes no parameters) against the database specified in 
            the connection string. 
            </summary>
            <remarks>
            e.g.:  
             FillDataset(connString, CommandType.StoredProcedure, "GetOrders", ds, new string[] {"orders"});
            </remarks>
            <param name="connectionString">A valid connection string for a SqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="dataSet">A dataset wich will contain the resultset generated by the command</param>
            <param name="tableNames">This array will be used to create table mappings allowing the DataTables to be referenced
            by a user defined name (probably the actual table name)</param>
        </member>
        <member name="M:DragonUtility.DataProvider.SqlHelper.FillDataset(System.String,System.Data.CommandType,System.String,System.Data.DataSet,System.String[],System.Data.SqlClient.SqlParameter[])">
            <summary>
            Execute a SqlCommand (that returns a resultset) against the database specified in the connection string 
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             FillDataset(connString, CommandType.StoredProcedure, "GetOrders", ds, new string[] {"orders"}, new SqlParameter("@prodid", 24));
            </remarks>
            <param name="connectionString">A valid connection string for a SqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandParameters">An array of SqlParamters used to execute the command</param>
            <param name="dataSet">A dataset wich will contain the resultset generated by the command</param>
            <param name="tableNames">This array will be used to create table mappings allowing the DataTables to be referenced
            by a user defined name (probably the actual table name)
            </param>
        </member>
        <member name="M:DragonUtility.DataProvider.SqlHelper.FillDataset(System.String,System.String,System.Data.DataSet,System.String[],System.Object[])">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a resultset) against the database specified in 
            the connection string using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             FillDataset(connString, CommandType.StoredProcedure, "GetOrders", ds, new string[] {"orders"}, 24);
            </remarks>
            <param name="connectionString">A valid connection string for a SqlConnection</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="dataSet">A dataset wich will contain the resultset generated by the command</param>
            <param name="tableNames">This array will be used to create table mappings allowing the DataTables to be referenced
            by a user defined name (probably the actual table name)
            </param>    
            <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
        </member>
        <member name="M:DragonUtility.DataProvider.SqlHelper.FillDataset(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String,System.Data.DataSet,System.String[])">
            <summary>
            Execute a SqlCommand (that returns a resultset and takes no parameters) against the provided SqlConnection. 
            </summary>
            <remarks>
            e.g.:  
             FillDataset(conn, CommandType.StoredProcedure, "GetOrders", ds, new string[] {"orders"});
            </remarks>
            <param name="connection">A valid SqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="dataSet">A dataset wich will contain the resultset generated by the command</param>
            <param name="tableNames">This array will be used to create table mappings allowing the DataTables to be referenced
            by a user defined name (probably the actual table name)
            </param>    
        </member>
        <member name="M:DragonUtility.DataProvider.SqlHelper.FillDataset(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String,System.Data.DataSet,System.String[],System.Data.SqlClient.SqlParameter[])">
            <summary>
            Execute a SqlCommand (that returns a resultset) against the specified SqlConnection 
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             FillDataset(conn, CommandType.StoredProcedure, "GetOrders", ds, new string[] {"orders"}, new SqlParameter("@prodid", 24));
            </remarks>
            <param name="connection">A valid SqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="dataSet">A dataset wich will contain the resultset generated by the command</param>
            <param name="tableNames">This array will be used to create table mappings allowing the DataTables to be referenced
            by a user defined name (probably the actual table name)
            </param>
            <param name="commandParameters">An array of SqlParamters used to execute the command</param>
        </member>
        <member name="M:DragonUtility.DataProvider.SqlHelper.FillDataset(System.Data.SqlClient.SqlConnection,System.String,System.Data.DataSet,System.String[],System.Object[])">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a resultset) against the specified SqlConnection 
            using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             FillDataset(conn, "GetOrders", ds, new string[] {"orders"}, 24, 36);
            </remarks>
            <param name="connection">A valid SqlConnection</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="dataSet">A dataset wich will contain the resultset generated by the command</param>
            <param name="tableNames">This array will be used to create table mappings allowing the DataTables to be referenced
            by a user defined name (probably the actual table name)
            </param>
            <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
        </member>
        <member name="M:DragonUtility.DataProvider.SqlHelper.FillDataset(System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String,System.Data.DataSet,System.String[])">
            <summary>
            Execute a SqlCommand (that returns a resultset and takes no parameters) against the provided SqlTransaction. 
            </summary>
            <remarks>
            e.g.:  
             FillDataset(trans, CommandType.StoredProcedure, "GetOrders", ds, new string[] {"orders"});
            </remarks>
            <param name="transaction">A valid SqlTransaction</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="dataSet">A dataset wich will contain the resultset generated by the command</param>
            <param name="tableNames">This array will be used to create table mappings allowing the DataTables to be referenced
            by a user defined name (probably the actual table name)
            </param>
        </member>
        <member name="M:DragonUtility.DataProvider.SqlHelper.FillDataset(System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String,System.Data.DataSet,System.String[],System.Data.SqlClient.SqlParameter[])">
            <summary>
            Execute a SqlCommand (that returns a resultset) against the specified SqlTransaction
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             FillDataset(trans, CommandType.StoredProcedure, "GetOrders", ds, new string[] {"orders"}, new SqlParameter("@prodid", 24));
            </remarks>
            <param name="transaction">A valid SqlTransaction</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="dataSet">A dataset wich will contain the resultset generated by the command</param>
            <param name="tableNames">This array will be used to create table mappings allowing the DataTables to be referenced
            by a user defined name (probably the actual table name)
            </param>
            <param name="commandParameters">An array of SqlParamters used to execute the command</param>
        </member>
        <member name="M:DragonUtility.DataProvider.SqlHelper.FillDataset(System.Data.SqlClient.SqlTransaction,System.String,System.Data.DataSet,System.String[],System.Object[])">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a resultset) against the specified 
            SqlTransaction using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             FillDataset(trans, "GetOrders", ds, new string[]{"orders"}, 24, 36);
            </remarks>
            <param name="transaction">A valid SqlTransaction</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="dataSet">A dataset wich will contain the resultset generated by the command</param>
            <param name="tableNames">This array will be used to create table mappings allowing the DataTables to be referenced
            by a user defined name (probably the actual table name)
            </param>
            <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
        </member>
        <member name="M:DragonUtility.DataProvider.SqlHelper.FillDataset(System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String,System.Data.DataSet,System.String[],System.Data.SqlClient.SqlParameter[])">
            <summary>
            Private helper method that execute a SqlCommand (that returns a resultset) against the specified SqlTransaction and SqlConnection
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             FillDataset(conn, trans, CommandType.StoredProcedure, "GetOrders", ds, new string[] {"orders"}, new SqlParameter("@prodid", 24));
            </remarks>
            <param name="connection">A valid SqlConnection</param>
            <param name="transaction">A valid SqlTransaction</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="dataSet">A dataset wich will contain the resultset generated by the command</param>
            <param name="tableNames">This array will be used to create table mappings allowing the DataTables to be referenced
            by a user defined name (probably the actual table name)
            </param>
            <param name="commandParameters">An array of SqlParamters used to execute the command</param>
        </member>
        <member name="M:DragonUtility.DataProvider.SqlHelper.UpdateDataset(System.Data.SqlClient.SqlCommand,System.Data.SqlClient.SqlCommand,System.Data.SqlClient.SqlCommand,System.Data.DataSet,System.String)">
            <summary>
            Executes the respective command for each inserted, updated, or deleted row in the DataSet.
            </summary>
            <remarks>
            e.g.:  
             UpdateDataset(conn, insertCommand, deleteCommand, updateCommand, dataSet, "Order");
            </remarks>
            <param name="insertCommand">A valid transact-SQL statement or stored procedure to insert new records into the data source</param>
            <param name="deleteCommand">A valid transact-SQL statement or stored procedure to delete records from the data source</param>
            <param name="updateCommand">A valid transact-SQL statement or stored procedure used to update records in the data source</param>
            <param name="dataSet">The DataSet used to update the data source</param>
            <param name="tableName">The DataTable used to update the data source.</param>
        </member>
        <member name="M:DragonUtility.DataProvider.SqlHelper.CreateCommand(System.Data.SqlClient.SqlConnection,System.String,System.String[])">
            <summary>
            Simplify the creation of a Sql command object by allowing
            a stored procedure and optional parameters to be provided
            </summary>
            <remarks>
            e.g.:  
             SqlCommand command = CreateCommand(conn, "AddCustomer", "CustomerID", "CustomerName");
            </remarks>
            <param name="connection">A valid SqlConnection object</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="sourceColumns">An array of string to be assigned as the source columns of the stored procedure parameters</param>
            <returns>A valid SqlCommand object</returns>
        </member>
        <member name="M:DragonUtility.DataProvider.SqlHelper.CreateConnection(System.String)">
            <summary>
            CreateConnection
            </summary>
            <param name="connectionString"></param>
            <returns></returns>
        </member>
        <member name="M:DragonUtility.DataProvider.SqlHelper.ExecuteNonQueryTypedParams(System.String,System.String,System.Data.DataRow)">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns no resultset) against the database specified in 
            the connection string using the dataRow column values as the stored procedure's parameters values.
            This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on row values.
            </summary>
            <param name="connectionString">A valid connection string for a SqlConnection</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="dataRow">The dataRow used to hold the stored procedure's parameter values.</param>
            <returns>An int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:DragonUtility.DataProvider.SqlHelper.ExecuteNonQueryTypedParams(System.Data.SqlClient.SqlConnection,System.String,System.Data.DataRow)">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns no resultset) against the specified SqlConnection 
            using the dataRow column values as the stored procedure's parameters values.  
            This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on row values.
            </summary>
            <param name="connection">A valid SqlConnection object</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="dataRow">The dataRow used to hold the stored procedure's parameter values.</param>
            <returns>An int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:DragonUtility.DataProvider.SqlHelper.ExecuteNonQueryTypedParams(System.Data.SqlClient.SqlTransaction,System.String,System.Data.DataRow)">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns no resultset) against the specified
            SqlTransaction using the dataRow column values as the stored procedure's parameters values.
            This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on row values.
            </summary>
            <param name="transaction">A valid SqlTransaction object</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="dataRow">The dataRow used to hold the stored procedure's parameter values.</param>
            <returns>An int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:DragonUtility.DataProvider.SqlHelper.ExecuteDatasetTypedParams(System.String,System.String,System.Data.DataRow)">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a resultset) against the database specified in 
            the connection string using the dataRow column values as the stored procedure's parameters values.
            This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on row values.
            </summary>
            <param name="connectionString">A valid connection string for a SqlConnection</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="dataRow">The dataRow used to hold the stored procedure's parameter values.</param>
            <returns>A dataset containing the resultset generated by the command</returns>
        </member>
        <member name="M:DragonUtility.DataProvider.SqlHelper.ExecuteDatasetTypedParams(System.Data.SqlClient.SqlConnection,System.String,System.Data.DataRow)">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a resultset) against the specified SqlConnection 
            using the dataRow column values as the store procedure's parameters values.
            This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on row values.
            </summary>
            <param name="connection">A valid SqlConnection object</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="dataRow">The dataRow used to hold the stored procedure's parameter values.</param>
            <returns>A dataset containing the resultset generated by the command</returns>
        </member>
        <member name="M:DragonUtility.DataProvider.SqlHelper.ExecuteDatasetTypedParams(System.Data.SqlClient.SqlTransaction,System.String,System.Data.DataRow)">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a resultset) against the specified SqlTransaction 
            using the dataRow column values as the stored procedure's parameters values.
            This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on row values.
            </summary>
            <param name="transaction">A valid SqlTransaction object</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="dataRow">The dataRow used to hold the stored procedure's parameter values.</param>
            <returns>A dataset containing the resultset generated by the command</returns>
        </member>
        <member name="M:DragonUtility.DataProvider.SqlHelper.ExecuteReaderTypedParams(System.String,System.String,System.Data.DataRow)">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a resultset) against the database specified in 
            the connection string using the dataRow column values as the stored procedure's parameters values.
            This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <param name="connectionString">A valid connection string for a SqlConnection</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="dataRow">The dataRow used to hold the stored procedure's parameter values.</param>
            <returns>A SqlDataReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:DragonUtility.DataProvider.SqlHelper.ExecuteReaderTypedParams(System.Data.SqlClient.SqlConnection,System.String,System.Data.DataRow)">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a resultset) against the specified SqlConnection 
            using the dataRow column values as the stored procedure's parameters values.
            This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <param name="connection">A valid SqlConnection object</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="dataRow">The dataRow used to hold the stored procedure's parameter values.</param>
            <returns>A SqlDataReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:DragonUtility.DataProvider.SqlHelper.ExecuteReaderTypedParams(System.Data.SqlClient.SqlTransaction,System.String,System.Data.DataRow)">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a resultset) against the specified SqlTransaction 
            using the dataRow column values as the stored procedure's parameters values.
            This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <param name="transaction">A valid SqlTransaction object</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="dataRow">The dataRow used to hold the stored procedure's parameter values.</param>
            <returns>A SqlDataReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:DragonUtility.DataProvider.SqlHelper.ExecuteScalarTypedParams(System.String,System.String,System.Data.DataRow)">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a 1x1 resultset) against the database specified in 
            the connection string using the dataRow column values as the stored procedure's parameters values.
            This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <param name="connectionString">A valid connection string for a SqlConnection</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="dataRow">The dataRow used to hold the stored procedure's parameter values.</param>
            <returns>An object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="M:DragonUtility.DataProvider.SqlHelper.ExecuteScalarTypedParams(System.Data.SqlClient.SqlConnection,System.String,System.Data.DataRow)">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a 1x1 resultset) against the specified SqlConnection 
            using the dataRow column values as the stored procedure's parameters values.
            This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <param name="connection">A valid SqlConnection object</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="dataRow">The dataRow used to hold the stored procedure's parameter values.</param>
            <returns>An object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="M:DragonUtility.DataProvider.SqlHelper.ExecuteScalarTypedParams(System.Data.SqlClient.SqlTransaction,System.String,System.Data.DataRow)">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a 1x1 resultset) against the specified SqlTransaction
            using the dataRow column values as the stored procedure's parameters values.
            This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <param name="transaction">A valid SqlTransaction object</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="dataRow">The dataRow used to hold the stored procedure's parameter values.</param>
            <returns>An object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="M:DragonUtility.DataProvider.SqlHelper.ExecuteXmlReaderTypedParams(System.Data.SqlClient.SqlConnection,System.String,System.Data.DataRow)">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a resultset) against the specified SqlConnection 
            using the dataRow column values as the stored procedure's parameters values.
            This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <param name="connection">A valid SqlConnection object</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="dataRow">The dataRow used to hold the stored procedure's parameter values.</param>
            <returns>An XmlReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:DragonUtility.DataProvider.SqlHelper.ExecuteXmlReaderTypedParams(System.Data.SqlClient.SqlTransaction,System.String,System.Data.DataRow)">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a resultset) against the specified SqlTransaction 
            using the dataRow column values as the stored procedure's parameters values.
            This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <param name="transaction">A valid SqlTransaction object</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="dataRow">The dataRow used to hold the stored procedure's parameter values.</param>
            <returns>An XmlReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:DragonUtility.DataProvider.SqlHelper.CacheParameters(System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            add parameter array to the cache
            </summary>
            <param name="cacheKey">Key to the parameter cache</param>
            <param name="cmdParms">an array of SqlParamters to be cached</param>
        </member>
        <member name="M:DragonUtility.DataProvider.SqlHelper.GetCachedParameters(System.String)">
            <summary>
            Retrieve cached parameters
            </summary>
            <param name="cacheKey">key used to lookup parameters</param>
            <returns>Cached SqlParamters array</returns>
        </member>
        <member name="M:DragonUtility.DataProvider.SqlHelper.Fill(System.Data.IDataReader,System.Data.DataSet,System.String,System.Int32,System.Int32)">
            <summary>
            Fills a typed DataSet using the DataReader's current result. This method 
            allows paginated access to the database.
            </summary>
            <param name="dataReader">The DataReader used to fetch the values.</param>
            <param name="dataSet">The DataSet used to store the values.</param>
            <param name="tableName">The name of the DataSet table used to add the 
            DataReader records.</param>
            <param name="from">The quantity of records skipped before placing
            values on the DataReader on the DataSet.</param>
            <param name="count">The maximum quantity of records alloed to fill on the
            DataSet.</param>
        </member>
        <member name="T:DragonUtility.DataProvider.SqlHelper.SqlConnectionOwnership">
            <summary>
            This enum is used to indicate whether the connection was provided by the caller, or created by SqlHelper, so that
            we can set the appropriate CommandBehavior when calling ExecuteReader()
            </summary>
        </member>
        <member name="F:DragonUtility.DataProvider.SqlHelper.SqlConnectionOwnership.Internal">
            <summary>Connection is owned and managed by SqlHelper</summary>
        </member>
        <member name="F:DragonUtility.DataProvider.SqlHelper.SqlConnectionOwnership.External">
            <summary>Connection is owned and managed by the caller</summary>
        </member>
        <member name="T:DragonUtility.DataProvider.SqlHelperParameterCache">
            <summary>
            SqlHelperParameterCache provides functions to leverage a static cache of procedure parameters, and the
            ability to discover parameters for stored procedures at run-time.
            </summary>
        </member>
        <member name="M:DragonUtility.DataProvider.SqlHelperParameterCache.DiscoverSpParameterSet(System.Data.SqlClient.SqlConnection,System.String,System.Boolean)">
            <summary>
            Resolve at run time the appropriate set of SqlParameters for a stored procedure
            </summary>
            <param name="connection">A valid SqlConnection object</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="includeReturnValueParameter">Whether or not to include their return value parameter</param>
            <returns>The parameter array discovered.</returns>
        </member>
        <member name="M:DragonUtility.DataProvider.SqlHelperParameterCache.CloneParameters(System.Data.SqlClient.SqlParameter[])">
            <summary>
            Deep copy of cached SqlParameter array
            </summary>
            <param name="originalParameters"></param>
            <returns></returns>
        </member>
        <member name="M:DragonUtility.DataProvider.SqlHelperParameterCache.CacheParameterSet(System.String,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Add parameter array to the cache
            </summary>
            <param name="connectionString">A valid connection string for a SqlConnection</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandParameters">An array of SqlParamters to be cached</param>
        </member>
        <member name="M:DragonUtility.DataProvider.SqlHelperParameterCache.GetCachedParameterSet(System.String,System.String)">
            <summary>
            Retrieve a parameter array from the cache
            </summary>
            <param name="connectionString">A valid connection string for a SqlConnection</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <returns>An array of SqlParamters</returns>
        </member>
        <member name="M:DragonUtility.DataProvider.SqlHelperParameterCache.GetSpParameterSet(System.String,System.String)">
            <summary>
            Retrieves the set of SqlParameters appropriate for the stored procedure
            </summary>
            <remarks>
            This method will query the database for this information, and then store it in a cache for future requests.
            </remarks>
            <param name="connectionString">A valid connection string for a SqlConnection</param>
            <param name="spName">The name of the stored procedure</param>
            <returns>An array of SqlParameters</returns>
        </member>
        <member name="M:DragonUtility.DataProvider.SqlHelperParameterCache.GetSpParameterSet(System.String,System.String,System.Boolean)">
            <summary>
            Retrieves the set of SqlParameters appropriate for the stored procedure
            </summary>
            <remarks>
            This method will query the database for this information, and then store it in a cache for future requests.
            </remarks>
            <param name="connectionString">A valid connection string for a SqlConnection</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="includeReturnValueParameter">A bool value indicating whether the return value parameter should be included in the results</param>
            <returns>An array of SqlParameters</returns>
        </member>
        <member name="M:DragonUtility.DataProvider.SqlHelperParameterCache.GetSpParameterSet(System.Data.SqlClient.SqlConnection,System.String)">
            <summary>
            Retrieves the set of SqlParameters appropriate for the stored procedure
            </summary>
            <remarks>
            This method will query the database for this information, and then store it in a cache for future requests.
            </remarks>
            <param name="connection">A valid SqlConnection object</param>
            <param name="spName">The name of the stored procedure</param>
            <returns>An array of SqlParameters</returns>
        </member>
        <member name="M:DragonUtility.DataProvider.SqlHelperParameterCache.GetSpParameterSet(System.Data.SqlClient.SqlConnection,System.String,System.Boolean)">
            <summary>
            Retrieves the set of SqlParameters appropriate for the stored procedure
            </summary>
            <remarks>
            This method will query the database for this information, and then store it in a cache for future requests.
            </remarks>
            <param name="connection">A valid SqlConnection object</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="includeReturnValueParameter">A bool value indicating whether the return value parameter should be included in the results</param>
            <returns>An array of SqlParameters</returns>
        </member>
        <member name="M:DragonUtility.DataProvider.SqlHelperParameterCache.GetSpParameterSetInternal(System.Data.SqlClient.SqlConnection,System.String,System.Boolean)">
            <summary>
            Retrieves the set of SqlParameters appropriate for the stored procedure
            </summary>
            <param name="connection">A valid SqlConnection object</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="includeReturnValueParameter">A bool value indicating whether the return value parameter should be included in the results</param>
            <returns>An array of SqlParameters</returns>
        </member>
        <member name="T:DragonSource.Utils.FileHelper">
            <summary>
            对目录、文件进行处理的类
            </summary>
        </member>
        <member name="M:DragonSource.Utils.FileHelper.GetFileName(System.String)">
            <summary>
            得到文件名的方法
            </summary>
            <param name="str">完整文件名</param>
            <returns>文件名名称，包含扩展名</returns>
        </member>
        <member name="M:DragonSource.Utils.FileHelper.GetSuffix(System.String)">
            <summary>
            取扩展名的方法
            </summary>
            <param name="srcName">原来的文件名称</param>
            <returns>扩展名</returns>
        </member>
        <member name="M:DragonSource.Utils.FileHelper.CreateDirectory(System.String)">
            <summary>
            创建目录的方法
            </summary>
            <param name="path">要创建目录的路径，支持含'/'的路径地址，会自动将‘/‘转化为‘\‘来处理</param>
        </member>
        <member name="M:DragonSource.Utils.FileHelper.CopyDirectory(System.String,System.String)">
            <summary>
            拷贝源文件夹中的文件及子目录到一个目标文件夹中
            </summary>
            <param name="source">源文件夹</param>
            <param name="dest">目标文件夹</param>
        </member>
        <member name="M:DragonSource.Utils.FileHelper.BuildFileNameByTime(System.String)">
            <summary>
            根据时间合成文件名的方法
            </summary>        
            <param name="_extensionName">扩展名</param>
            <returns>根据时间生成的文件名</returns>
        </member>
        <member name="M:DragonSource.Utils.FileHelper.BuildFileNameByTime(System.String,System.String)">
            <summary>
            根据时间合成文件名的方法
            </summary>
            <param name="_srcName">扩展名</param>
            <param name="_tgtName">目标文件名。如果该参数为空，则文件名取当前时间</param>
            <returns>文件名</returns>
        </member>
        <member name="M:DragonSource.Utils.FileHelper.RemoveFile(System.String)">
            <summary>
            删除文件的方法
            </summary>
            <param name="_src">文件物理路径</param>
        </member>
        <member name="M:DragonSource.Utils.FileHelper.ReNameFile(System.String,System.String)">
            <summary>
            重命名文件的方法
            </summary>
            <param name="_src">源文件路径(物理路径)</param>
            <param name="_newName">目标文件名（不改变后缀）</param>
        </member>
        <member name="M:DragonSource.Utils.FileHelper.AppendFile(System.String,System.String)">
            <summary>
            往文件里追加内容的方法(采用系统默认的编码)
            </summary>
            <param name="_content">内容</param>
            <param name="path">文件路径（物理路径）</param>
        </member>
        <member name="M:DragonSource.Utils.FileHelper.AppendFile(System.String,System.String,System.Text.Encoding)">
            <summary>
            往文件里追加内容的方法(编码采用参数指定的)
            </summary>
            <param name="_content">内容</param>
            <param name="path">文件路径（物理路径）</param>
            <param name="encoding">编码格式</param>
        </member>
        <member name="M:DragonSource.Utils.FileHelper.UpdateFile(System.String,System.String)">
            <summary>
            将内容写入文件中。如果目录和文件不存在则自动创建。如果原来文件已经存在，将自动覆盖(采用系统默认的编码)。
            </summary>
            <param name="_content">文件内容</param>
            <param name="path">文件路径（物理路径）</param>
        </member>
        <member name="M:DragonSource.Utils.FileHelper.UpdateFile(System.String,System.String,System.Text.Encoding)">
            <summary>
            将内容写入文件中。如果目录和文件不存在则自动创建。如果原来文件已经存在，将自动覆盖(采用参数中指定的编码)。
            </summary>
            <param name="_content">文件内容</param>
            <param name="path">文件路径（物理路径）</param>
            <param name="encoding">编码</param>
        </member>
        <member name="M:DragonSource.Utils.FileHelper.ReadFile(System.String)">
            <summary>
            读出模板数据的方法(采用系统默认的编码)
            </summary>
            <param name="__ModelPath">模板文件路径（物理路径）</param>
            <returns>读取的内容</returns>
        </member>
        <member name="M:DragonSource.Utils.FileHelper.ReadFile(System.String,System.Text.Encoding)">
            <summary>
            读出模板数据的方法(采用参数中指定的编码)
            </summary>
            <param name="__ModelPath">模板文件路径（物理路径）</param>
            <param name="encoding">编码</param>
            <returns>读取的内容</returns>
        </member>
        <member name="M:DragonSource.Utils.FileHelper.Download(System.String,System.String)">
            <summary>
            文件下载的方法(默认使用UTF-8编码),普通下载
            </summary>
            <param name="FullFileName">完整文件名</param>
            <param name="FileName">下载文件名（提供给客户端下载时使用的名称）</param>
        </member>
        <member name="M:DragonSource.Utils.FileHelper.Download(System.String,System.String,System.Text.Encoding)">
            <summary>
            文件下载的方法(使用参数中指定的编码)，普通下载
            </summary>
            <param name="FullFileName">完整文件名</param>
            <param name="FileName">下载文件名（提供给客户端下载时使用的名称）</param>
            <param name="encoding">编码</param>
        </member>
        <member name="M:DragonSource.Utils.FileHelper.DownLoad(System.String)">
            <summary>
            文件下载的方法,特点：分块下载
            </summary>
            <param name="FileName">文件物理路径</param>
        </member>
        <!-- 对于成员“M:DragonSource.Utils.FileHelper.DownLoad(System.Web.HttpRequest,System.Web.HttpResponse,System.String,System.String,System.Int64)”忽略有格式错误的 XML 注释 -->
        <member name="T:DragonUtility.IO.Logging.Interfaces.ILog">
            <summary>
            Log interface
            </summary>
        </member>
        <member name="M:DragonUtility.IO.Logging.Interfaces.ILog.LogMessage(System.String,DragonUtility.IO.Logging.Enums.MessageType,System.Object[])">
            <summary>
            Logs a message
            </summary>
            <param name="Message">Message text</param>
            <param name="Type">Message type</param>
            <param name="args">Any additional arguments that will be used in formatting the message</param>
        </member>
        <member name="T:DragonUtility.DataTypes.Comparison.GenericEqualityComparer`1">
            <summary>
            Generic equality comparer
            </summary>
            <typeparam name="T">Data type</typeparam>
        </member>
        <member name="T:DragonUtility.DataTypes.Comparison.GenericComparer`1">
            <summary>
            泛型参数排序 实现类
            </summary>
            <typeparam name="T">引用类类型</typeparam>
        </member>
        <member name="M:DragonUtility.DataTypes.Comparison.GenericComparer`1.Compare(`0,`0)">
            <summary>
            接口方法实现
            </summary>
            <param name="x">参数 x</param>
            <param name="y">参数 y</param>
            <returns>当返回一个大于0的int时，即(x>y).返回一个小于0的int时即(x小于y).当返回0时即表示(x==y)</returns>
        </member>
        <member name="T:DragonUtility.Constrant.ServerHost">
            <summary>
            公共域名
            </summary>
        </member>
        <member name="P:DragonUtility.Constrant.ServerHost.BookHost">
            <summary>
            图书服务器
            </summary>
        </member>
        <member name="P:DragonUtility.Constrant.ServerHost.XmlHost">
            <summary>
            Xml服务器
            </summary>
        </member>
        <member name="P:DragonUtility.Constrant.ServerHost.ImageHost">
            <summary>
            图片服务器
            </summary>
        </member>
        <member name="P:DragonUtility.Constrant.ServerHost.OriginalHost">
            <summary>
            原貌服务器
            </summary>
        </member>
        <member name="P:DragonUtility.Constrant.ServerHost.TTSHost">
            <summary>
            TTs服务器
            </summary>
        </member>
        <member name="P:DragonUtility.Constrant.ServerHost.PeopleVoiceHost">
            <summary>
            人生语音服务器
            </summary>
        </member>
        <member name="P:DragonUtility.Constrant.ServerHost.VideoHost">
            <summary>
            视频服务器
            </summary>
        </member>
        <member name="P:DragonUtility.Constrant.ServerHost.BlogHost">
            <summary>
            博客服务器
            </summary>
        </member>
        <member name="P:DragonUtility.Constrant.ServerHost.UpLoadHost">
            <summary>
            上传服务器
            </summary>
        </member>
        <member name="P:DragonUtility.Constrant.ServerHost.Big5Gate">
            <summary>
            Big5网关
            </summary>
        </member>
        <member name="P:DragonUtility.Constrant.ServerHost.UDNGate">
            <summary>
            UDN网关
            </summary>
        </member>
        <member name="P:DragonUtility.Constrant.ServerHost.DownLoadHost">
            <summary>
            下载服务器
            </summary>
        </member>
        <member name="T:DragonUtility.Constrant.GlobalCons">
            <summary>
            公共变量
            </summary>
        </member>
        <member name="F:DragonUtility.Constrant.GlobalCons.DefaultDateTime">
            <summary>
            全局日期类型默认值
            </summary>
        </member>
        <member name="F:DragonUtility.Constrant.GlobalCons.LogDir">
            <summary>
            全局日志记录路径,如果不配置的话,日志系统默认在当前程序根目录下建立Log文件夹
            </summary>
        </member>
        <member name="T:DragonSource.Utils.WindowsFuncWrapper.ShareSessionManager">
            <summary>
            调用Windows底层函数建立或删除共享Session
            本类的功能类似命令：Net Use的功能
            </summary>
        </member>
        <member name="F:DragonSource.Utils.WindowsFuncWrapper.ShareSessionManager.RESOURCETYPE_ANY">
            <summary>
            表示资源类型的常量
            </summary>
        </member>
        <member name="F:DragonSource.Utils.WindowsFuncWrapper.ShareSessionManager.CONNECT_INTERACTIVE">
            <summary>
            交互式链接
            </summary>
        </member>
        <member name="F:DragonSource.Utils.WindowsFuncWrapper.ShareSessionManager.CONNECT_PROMPT">
            <summary>
            链接提示
            </summary>
        </member>
        <member name="M:DragonSource.Utils.WindowsFuncWrapper.ShareSessionManager.AddUse(System.String,System.String,System.String)">
            <summary>
            用指定的帐户登录局域网内计算机，建立文件共享Session
            </summary>
            <param name="resource">局域网内计算上的共享资源，如："\\192.168.0.111\ymd", 注意后面不要跟"\"符号，否则会报“找不到网络路径”错误</param>
            <param name="userName">能访问上述资源的用户名</param>
            <param name="password">密码</param>
            <remarks> 如果是在服务中调用本方法，服务的登录标识不能是系统内置的Local System或Network Service账户，
            而必须指定为能够登录服务所在计算机的Windows帐户
            </remarks>
        </member>
        <member name="M:DragonSource.Utils.WindowsFuncWrapper.ShareSessionManager.DeleteUse(System.String,System.Boolean)">
            <summary>
            删除已经存在的访问共享文件的Session
            </summary>
            <param name="resource">局域网内计算上的共享资源，如："\\192.168.0.111\ymd",注意后面不要跟"\"符号，否则会报“找不到网络路径”错误</param>
            <param name="isForce">是否强制删除还处于活动状态的共享Session</param>
        </member>
        <member name="M:DragonSource.Utils.WindowsFuncWrapper.ShareSessionManager.WNetAddConnection2(DragonSource.Utils.WindowsFuncWrapper.NETRESOURCE@,System.String,System.String,System.Int32)">
            <summary>
            帐户登录局域网内计算机，建立文件共享Session
            </summary>
            <param name="lpNetResource">资源位置</param>
            <param name="lpPassword">密码</param>
            <param name="lpUsername">用户名</param>
            <param name="dwFlags">标志</param>
            <returns>0——代表成功</returns>
        </member>
        <member name="M:DragonSource.Utils.WindowsFuncWrapper.ShareSessionManager.WNetCancelConnection2(System.String,System.Int32,System.Boolean)">
            <summary>
            删除已经存在的访问共享文件的Session
            </summary>
            <param name="lpName">资源位置</param>
            <param name="dwFlags">标志</param>
            <param name="fForce">当资源正被使用时是否强制删除</param>
            <returns>0——代表成功</returns>
        </member>
        <member name="T:DragonSource.Utils.WindowsFuncWrapper.NETRESOURCE">
            <summary>
            Win32 API要求的参数的结构类型
            </summary>
        </member>
        <member name="F:DragonSource.Utils.WindowsFuncWrapper.NETRESOURCE.dwScope">
            <summary>
            范围
            </summary>
        </member>
        <member name="F:DragonSource.Utils.WindowsFuncWrapper.NETRESOURCE.dwType">
            <summary>
            类型
            </summary>
        </member>
        <member name="F:DragonSource.Utils.WindowsFuncWrapper.NETRESOURCE.dwDisplayType">
            <summary>
            显示类型
            </summary>
        </member>
        <member name="F:DragonSource.Utils.WindowsFuncWrapper.NETRESOURCE.dwUsage">
            <summary>
            用法
            </summary>
        </member>
        <member name="F:DragonSource.Utils.WindowsFuncWrapper.NETRESOURCE.lpLocalName">
            <summary>
            本机的映射名
            </summary>
        </member>
        <member name="F:DragonSource.Utils.WindowsFuncWrapper.NETRESOURCE.lpRemoteName">
            <summary>
            远程资源名
            </summary>
        </member>
        <member name="F:DragonSource.Utils.WindowsFuncWrapper.NETRESOURCE.lpComment">
            <summary>
            注释
            </summary>
        </member>
        <member name="F:DragonSource.Utils.WindowsFuncWrapper.NETRESOURCE.lpProvider">
            <summary>
            提供者
            </summary>
        </member>
        <member name="T:DragonSource.Utils.XmlHelper">
            <summary>
             XMLHelper XML文档操作管理器
             </summary>
        </member>
        <member name="M:DragonSource.Utils.XmlHelper.GetXmlNodeByXpath(System.String,System.String)">
            <summary>
            选择匹配XPath表达式的第一个节点XmlNode.
            </summary>
            <param name="xmlFileName">XML文档完全文件名(包含物理路径)</param>
            <param name="xpath">要匹配的XPath表达式(例如:"//节点名//子节点名")</param>
            <returns>返回XmlNode</returns>
        </member>
        <member name="M:DragonSource.Utils.XmlHelper.GetXmlNodeListByXpath(System.String,System.String)">
            <summary>
            选择匹配XPath表达式的节点列表XmlNodeList.
            </summary>
            <param name="xmlFileName">XML文档完全文件名(包含物理路径)</param>
            <param name="xpath">要匹配的XPath表达式(例如:"//节点名//子节点名")</param>
            <returns>返回XmlNodeList</returns>
        </member>
        <member name="M:DragonSource.Utils.XmlHelper.GetXmlAttribute(System.String,System.String,System.String)">
            <summary>
            选择匹配XPath表达式的第一个节点的匹配xmlAttributeName的属性XmlAttribute.
            </summary>
            <param name="xmlFileName">XML文档完全文件名(包含物理路径)</param>
            <param name="xpath">要匹配的XPath表达式(例如:"//节点名//子节点名</param>
            <param name="xmlAttributeName">要匹配xmlAttributeName的属性名称</param>
            <returns>返回xmlAttributeName</returns>
        </member>
        <member name="M:DragonSource.Utils.XmlHelper.CreateXmlDocument(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            创建一个XML文档
            </summary>
            <param name="xmlFileName">XML文档完全文件名(包含物理路径)</param>
            <param name="rootNodeName">XML文档根节点名称(须指定一个根节点名称)</param>
            <param name="version">XML文档版本号(必须为:"1.0")</param>
            <param name="encoding">XML文档编码方式</param>
            <param name="standalone">该值必须是"yes"或"no",如果为null,Save方法不在XML声明上写出独立属性</param>
            <returns>成功返回true,失败返回false</returns>
        </member>
        <member name="M:DragonSource.Utils.XmlHelper.CreateXmlNodeByXPath(System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            依据匹配XPath表达式的第一个节点来创建它的子节点(如果此节点已存在则追加一个新的同名节点
            </summary>
            <param name="xmlFileName">XML文档完全文件名(包含物理路径)</param>
            <param name="xpath">要匹配的XPath表达式(例如:"//节点名//子节点名</param>
            <param name="xmlNodeName">要匹配xmlNodeName的节点名称</param>
            <param name="innerText">节点文本值</param>
            <param name="xmlAttributeName">要匹配xmlAttributeName的属性名称</param>
            <param name="value">属性值</param>
            <returns>成功返回true,失败返回false</returns>
        </member>
        <member name="M:DragonSource.Utils.XmlHelper.CreateOrUpdateXmlNodeByXPath(System.String,System.String,System.String,System.String)">
            <summary>
            依据匹配XPath表达式的第一个节点来创建或更新它的子节点(如果节点存在则更新,不存在则创建)
            </summary>
            <param name="xmlFileName">XML文档完全文件名(包含物理路径)</param>
            <param name="xpath">要匹配的XPath表达式(例如:"//节点名//子节点名</param>
            <param name="xmlNodeName">要匹配xmlNodeName的节点名称</param>
            <param name="innerText">节点文本值</param>
            <returns>成功返回true,失败返回false</returns>
        </member>
        <member name="M:DragonSource.Utils.XmlHelper.CreateOrUpdateXmlAttributeByXPath(System.String,System.String,System.String,System.String)">
            <summary>
            依据匹配XPath表达式的第一个节点来创建或更新它的属性(如果属性存在则更新,不存在则创建)
            </summary>
            <param name="xmlFileName">XML文档完全文件名(包含物理路径)</param>
            <param name="xpath">要匹配的XPath表达式(例如:"//节点名//子节点名</param>
            <param name="xmlAttributeName">要匹配xmlAttributeName的属性名称</param>
            <param name="value">属性值</param>
            <returns>成功返回true,失败返回false</returns>
        </member>
        <member name="M:DragonSource.Utils.XmlHelper.DeleteXmlNodeByXPath(System.String,System.String)">
            <summary>
            删除匹配XPath表达式的第一个节点(节点中的子元素同时会被删除)
            </summary>
            <param name="xmlFileName">XML文档完全文件名(包含物理路径)</param>
            <param name="xpath">要匹配的XPath表达式(例如:"//节点名//子节点名</param>
            <returns>成功返回true,失败返回false</returns>
        </member>
        <member name="M:DragonSource.Utils.XmlHelper.DeleteXmlAttributeByXPath(System.String,System.String,System.String)">
            <summary>
            删除匹配XPath表达式的第一个节点中的匹配参数xmlAttributeName的属性
            </summary>
            <param name="xmlFileName">XML文档完全文件名(包含物理路径)</param>
            <param name="xpath">要匹配的XPath表达式(例如:"//节点名//子节点名</param>
            <param name="xmlAttributeName">要删除的xmlAttributeName的属性名称</param>
            <returns>成功返回true,失败返回false</returns>
        </member>
        <member name="M:DragonSource.Utils.XmlHelper.DeleteAllXmlAttributeByXPath(System.String,System.String)">
            <summary>
            删除匹配XPath表达式的第一个节点中的所有属性
            </summary>
            <param name="xmlFileName">XML文档完全文件名(包含物理路径)</param>
            <param name="xpath">要匹配的XPath表达式(例如:"//节点名//子节点名</param>
            <returns>成功返回true,失败返回false</returns>
        </member>
        <member name="T:DragonSource.Utils.WebUtil">
            <summary>
            主要提供了一些asp.net对象如 HttpContext,HttpRequest,Uri等内置对象相关的一些扩展与帮助方法
            </summary>
        </member>
        <member name="M:DragonSource.Utils.WebUtil.AbsoluteRoot(System.Web.HttpContext)">
            <summary>
            Returns the absolute root
            </summary>
        </member>
        <member name="M:DragonSource.Utils.WebUtil.RelativeRoot(System.Web.HttpContext)">
            <summary>
            Gets the relative root of the web site
            </summary>
            <param name="Context">Current context</param>
            <returns>The relative root of the web site</returns>
        </member>
        <member name="M:DragonSource.Utils.WebUtil.SetEncoding(System.Web.HttpContext,System.String)">
            <summary>
            向Http上下文对象添加编码
            </summary>
            <param name="Context">上下文</param>
            <param name="Encoding">编码</param>
        </member>
        <member name="M:DragonSource.Utils.WebUtil.HTTPCompress(System.Web.HttpContext)">
            <summary>    
            Adds HTTP compression to the current context
            </summary>
            <param name="Context">Current context</param>
        </member>
        <member name="M:DragonSource.Utils.WebUtil.IsEncodingAccepted(System.Web.HttpContext,System.String)">
            <summary>
            Checks the request headers to see if the specified
            encoding is accepted by the client.
            </summary>
        </member>
        <member name="M:DragonSource.Utils.WebUtil.GetParam``1(System.Web.HttpRequest,System.String)">
            <summary>
            获取URL参数值
            </summary>
            <typeparam name="T">泛型参数T</typeparam>
            <param name="request">HttpRequest对象</param>
            <param name="paramName">指定参数名称</param>
            <returns>T</returns>
        </member>
        <member name="M:DragonSource.Utils.WebUtil.Read(System.Uri,System.DateTime@,System.String,System.String)">
            <summary>
            Reads the text content of a URL
            </summary>
            <param name="URL">Uri to read the content of</param>
            <param name="UpdateDate">最后更新时间</param>
            <param name="UserName">User name used in network credentials</param>
            <param name="Password">Password used in network credentials</param>
            <returns>String representation of the content of the URL</returns>
        </member>
        <member name="M:DragonSource.Utils.WebUtil.Read(System.Uri,System.String,System.String)">
            <summary>
            Reads the text content of a URL
            </summary>
            <param name="URL">Uri to read the content of</param>
            <param name="UserName">User name used in network credentials</param>
            <param name="Password">Password used in network credentials</param>
            <returns>String representation of the content of the URL</returns>
        </member>
        <member name="M:DragonSource.Utils.WebUtil.Read(System.Uri,System.Net.WebClient,System.String,System.String)">
            <summary>
            Reads the text content of a URL
            </summary>
            <param name="URL">The Uri to read the content of</param>
            <param name="Client">WebClient used to load the data</param>
            <param name="UserName">User name used in network credentials</param>
            <param name="Password">Password used in network credentials</param>
            <returns>Stream containing the content of the URL</returns>
        </member>
        <member name="M:DragonSource.Utils.WebUtil.ReadBinary(System.Uri,System.String,System.String)">
            <summary>
            Reads the content of a URL
            </summary>
            <param name="URL">Uri to read the content of</param>
            <param name="UserName">User name used in network credentials</param>
            <param name="Password">Password used in network credentials</param>
            <returns>Byte array representation of the content of the URL</returns>
        </member>
        <member name="T:DragonSource.Utils.IEnumerableExtensions">
            <summary>
            IEnumerable extensions
            </summary>
        </member>
        <member name="M:DragonSource.Utils.IEnumerableExtensions.Exists``1(System.Collections.Generic.IEnumerable{``0},System.Predicate{``0})">
            <summary>
            Used to determine if an item in the IEnumerable matches a predicate
            </summary>
            <typeparam name="T">Object type</typeparam>
            <param name="List">List to search</param>
            <param name="Match">The predicate used to check if something exists</param>
            <returns>True if at least one item matches the predicate, false otherwise</returns>
        </member>
        <member name="M:DragonSource.Utils.IEnumerableExtensions.For``1(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Int32,System.Action{``0})">
            <summary>
            Does an action for each item in the IEnumerable between the start and end indexes
            </summary>
            <typeparam name="T">Object type</typeparam>
            <param name="List">IEnumerable to iterate over</param>
            <param name="Start">Item to start with</param>
            <param name="End">Item to end with</param>
            <param name="Action">Action to do</param>
            <returns>The original list</returns>
        </member>
        <member name="M:DragonSource.Utils.IEnumerableExtensions.For``2(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Int32,System.Func{``0,``1})">
            <summary>
            Does a function for each item in the IEnumerable between the start and end indexes and returns an IEnumerable of the results
            </summary>
            <typeparam name="T">Object type</typeparam>
            <typeparam name="R">Return type</typeparam>
            <param name="List">IEnumerable to iterate over</param>
            <param name="Start">Item to start with</param>
            <param name="End">Item to end with</param>
            <param name="Function">Function to do</param>
            <returns>The resulting list</returns>
        </member>
        <member name="M:DragonSource.Utils.IEnumerableExtensions.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})">
            <summary>
            Does an action for each item in the IEnumerable
            </summary>
            <typeparam name="T">Object type</typeparam>
            <param name="List">IEnumerable to iterate over</param>
            <param name="Action">Action to do</param>
            <returns>The original list</returns>
        </member>
        <member name="M:DragonSource.Utils.IEnumerableExtensions.ForEach``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
            <summary>
            Does a function for each item in the IEnumerable, returning a list of the results
            </summary>
            <typeparam name="T">Object type</typeparam>
            <typeparam name="R">Return type</typeparam>
            <param name="List">IEnumerable to iterate over</param>
            <param name="Function">Function to do</param>
            <returns>The resulting list</returns>
        </member>
        <member name="M:DragonSource.Utils.IEnumerableExtensions.IsNullOrEmpty``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Determines if a list is null or empty
            </summary>
            <typeparam name="T">Data type</typeparam>
            <param name="Value">List to check</param>
            <returns>True if it is null or empty, false otherwise</returns>
        </member>
        <member name="M:DragonSource.Utils.IEnumerableExtensions.RemoveDefaults``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Removes default values from a list
            </summary>
            <typeparam name="T">Value type</typeparam>
            <param name="Value">List to cull items from</param>
            <param name="EqualityComparer">Equality comparer used (defaults to GenericEqualityComparer)</param>
            <returns>An IEnumerable with the default values removed</returns>
        </member>
        <member name="M:DragonSource.Utils.IEnumerableExtensions.ToArray``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
            <summary>
            Converts a list to an array
            </summary>
            <typeparam name="Source">Source type</typeparam>
            <typeparam name="Target">Target type</typeparam>
            <param name="List">List to convert</param>
            <param name="ConvertingFunction">Function used to convert each item</param>
            <returns>The array containing the items from the list</returns>
        </member>
        <member name="M:DragonSource.Utils.IEnumerableExtensions.ToString``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.String},System.String)">
            <summary>
            Converts the list to a string where each item is seperated by the Seperator
            </summary>
            <typeparam name="T">Item type</typeparam>
            <param name="List">List to convert</param>
            <param name="ItemOutput">Used to convert the item to a string (defaults to calling ToString)</param>
            <param name="Seperator">Seperator to use between items (defaults to ,)</param>
            <returns>The string version of the list</returns>
        </member>
        <member name="M:DragonSource.Utils.IEnumerableExtensions.TrueForAll``1(System.Collections.Generic.IEnumerable{``0},System.Predicate{``0})">
            <summary>
            Determines if a predicate is true for each item in a list
            </summary>
            <typeparam name="T">The type of the items in the list</typeparam>
            <param name="List">IEnumerable to look through</param>
            <param name="Predicate">Predicate to use to check the IEnumerable</param>
            <returns>True if they all pass the predicate, false otherwise</returns>
        </member>
        <member name="M:DragonSource.Utils.IEnumerableExtensions.TryAll``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0},System.Action{``0})">
            <summary>
            Tries to do the action on each item in the list. If an exception is thrown,
            it does the catch action on the item (if it is not null).
            </summary>
            <typeparam name="T">The type of the items in the list</typeparam>
            <param name="List">IEnumerable to look through</param>
            <param name="Action">Action to run on each item</param>
            <param name="CatchAction">Catch action (defaults to null)</param>
            <returns>The list after the action is run on everything</returns>
        </member>
        <member name="T:DragonSource.Utils.Config.Mail.MailConfig">
            <summary>
            
            </summary>
        </member>
        <member name="P:DragonSource.Utils.Config.Mail.MailConfig.MailHost">
            <summary>
            
            </summary>
        </member>
        <member name="P:DragonSource.Utils.Config.Mail.MailConfig.User">
            <summary>
            
            </summary>
        </member>
        <member name="P:DragonSource.Utils.Config.Mail.MailConfig.Password">
            <summary>
            
            </summary>
        </member>
        <member name="T:DragonUtility.Web.ExtensionMethods.PageExtensions">
            <summary>
            对Page的扩展
            </summary>
        </member>
        <member name="M:DragonUtility.Web.ExtensionMethods.PageExtensions.LogOperate(System.Web.UI.Page,System.String,System.String,System.Exception)">
            <summary>
            添加操作日志,条用该方法前请确认配置文件中connectionStrings节点包含有OperateLog的配置项
            </summary>
            <param name="page"></param>
            <param name="User"></param>
            <param name="message"></param>
            <param name="exception"></param>
        </member>
        <member name="M:DragonUtility.Web.ExtensionMethods.PageExtensions.UploadFileScripts(System.Web.UI.Page,System.String,System.String)">
            <summary>
            注册文件上传脚本,需要添加配置文件UpLoadHost  
            </summary>
            <param name="page"></param>
            <param name="folder">文件夹名称</param>
            <param name="newname">新名称</param>
        </member>
        <member name="T:DragonUtility.Operate.Logic.OperateDetail">
            <summary>
            模块数据项逻辑类
            </summary>
        </member>
        <member name="M:DragonUtility.Operate.Logic.OperateDetail.AddOperateDetail(DragonUtility.Operate.Model.OperateDetail)">
            <summary>
            添加一条数据项
            </summary>
            <param name="operateDetail">被添加实体</param>
            <returns></returns>
        </member>
        <member name="M:DragonUtility.Operate.Logic.OperateDetail.UpdateOperateDetail(DragonUtility.Operate.Model.OperateDetail)">
            <summary>
            更新一条数据项
            </summary>
            <param name="operateDetail">被更新实体</param>
            <returns></returns>
        </member>
        <member name="M:DragonUtility.Operate.Logic.OperateDetail.RemoveOperateDetail(System.Int32)">
            <summary>
            删除一条数据项
            </summary>
            <param name="id">数据项编号</param>
            <returns></returns>
        </member>
        <member name="M:DragonUtility.Operate.Logic.OperateDetail.GetOperateDetail(System.Int32)">
            <summary>
            获取一条数据项
            </summary>
            <param name="id">数据项编号</param>
            <returns></returns>
        </member>
        <member name="M:DragonUtility.Operate.Logic.OperateDetail.GetOperateDetailList">
            <summary>
            获取全部数据项集合
            </summary>
            <returns></returns>
        </member>
        <member name="M:DragonUtility.Operate.Logic.OperateDetail.GetOperateDetailList(System.Int32)">
            <summary>
            获取数据项集合
            </summary>
            <param name="operateID">模块编号</param>
            <returns></returns>
        </member>
        <member name="M:DragonUtility.Operate.Logic.OperateDetail.GetOperateDetailList(System.String[])">
            <summary>
            返回包含指定字段的数据项集合
            </summary>
            <param name="fields">字段名称</param>
            <returns></returns>
        </member>
        <member name="M:DragonUtility.Operate.Logic.OperateDetail.GetOperateDetailList(System.Int32,System.Int32)">
            <summary>
            返回分页数据项集合
            </summary>
            <param name="pageIndex">当前分页</param>
            <param name="pageSize">分页大小</param>
            <returns></returns>
        </member>
        <member name="M:DragonUtility.Operate.Logic.OperateDetail.GetOperateDetailList(System.Int32,System.Int32,System.String[])">
            <summary>
            返回包含指定字段的分页数据项集合
            </summary>
            <param name="pageIndex">当前分页</param>
            <param name="pageSize">分页大小</param>
            <param name="fields">字段名称</param>
            <returns></returns>
        </member>
        <member name="M:DragonUtility.Operate.Logic.OperateDetail.GetOperateDetailList(System.Int32,System.Int32,System.Int32)">
            <summary>
            返回指定模块编号下的数据项集合
            </summary>
            <param name="pageIndex">当前分页</param>
            <param name="pageSize">分页大小</param>
            <param name="operateID">模块编号</param>
            <returns></returns>
        </member>
        <member name="M:DragonUtility.Operate.Logic.OperateDetail.GetOperateDetailList(System.Int32,System.Int32,System.Int32,System.String[])">
            <summary>
            返回指定模块编号下的指定字段的数据项集合
            </summary>
            <param name="pageIndex">当前分页</param>
            <param name="pageSize">分页大小</param>
            <param name="operateID">模块编号</param>
            <param name="fields">字段名称</param>
            <returns></returns>
        </member>
        <member name="M:DragonUtility.Operate.Logic.OperateDetail.GetOperateDetailListByModel(System.Int32,System.Int32,DragonUtility.Operate.Model.SearchOperateDetailModel,System.Int32)">
            <summary>
            返回指定条件下的指定字段的数据项集合
            </summary>
            <param name="pageIndex">当前分页</param>
            <param name="pageSize">分页大小</param>
            <param name="model">搜索数据项模版实例</param>
            <param name="orderType">排序类型 1(默认排序方式：创建日期倒序，排序值正序) 2(发布开始日期倒序，排序值正序)</param>
            <returns></returns>
        </member>
        <member name="M:DragonUtility.Operate.Logic.OperateDetail.GetOperateDetailListByModel(System.Int32,System.Int32,DragonUtility.Operate.Model.SearchOperateDetailModel,System.String[],System.Int32)">
            <summary>
            返回指定条件下的指定字段的数据项集合
            </summary>
            <param name="pageIndex">当前分页</param>
            <param name="pageSize">分页大小</param>
            <param name="model">搜索数据项模版实例</param>
            <param name="fields">字段名称</param>
            <param name="orderType">排序类型 1(默认排序方式：创建日期倒序，排序值正序) 2(发布开始日期倒序，排序值正序)</param>
            <returns></returns>
        </member>
        <member name="T:DragonUtility.DragonNavigation.NavigationModel">
            <summary>
            导航菜单模型
            </summary>
        </member>
        <member name="P:DragonUtility.DragonNavigation.NavigationModel.Code">
            <summary>
            菜单编号
            </summary>
        </member>
        <member name="P:DragonUtility.DragonNavigation.NavigationModel.Name">
            <summary>
            菜单名
            </summary>
        </member>
        <member name="P:DragonUtility.DragonNavigation.NavigationModel.Kind">
            <summary>
            菜单种类（建议定义自己的导航种类枚举）
            </summary>
        </member>
        <member name="P:DragonUtility.DragonNavigation.NavigationModel.ImageUrl">
            <summary>
            菜单图片地址
            </summary>
        </member>
        <member name="P:DragonUtility.DragonNavigation.NavigationModel.ImageDisplayMode">
            <summary>
            图片显示模式
            </summary>
        </member>
        <member name="P:DragonUtility.DragonNavigation.NavigationModel.Level">
            <summary>
            菜单等级
            </summary>
        </member>
        <member name="P:DragonUtility.DragonNavigation.NavigationModel.OrderNumber">
            <summary>
            默认升序
            </summary>
        </member>
        <member name="P:DragonUtility.DragonNavigation.NavigationModel.State">
            <summary>
            菜单状态
            </summary>
        </member>
        <member name="P:DragonUtility.DragonNavigation.NavigationModel.Link">
            <summary>
            菜单连接
            </summary>
        </member>
        <member name="P:DragonUtility.DragonNavigation.NavigationModel.OpenMode">
            <summary>
            菜单打开模式
            </summary>
        </member>
        <member name="P:DragonUtility.DragonNavigation.NavigationModel.Description">
            <summary>
            菜单描述，用在前端页面显示
            </summary>
        </member>
        <member name="P:DragonUtility.DragonNavigation.NavigationModel.Note">
            <summary>
            备注，用在管理平台管理员查看
            </summary>
        </member>
        <member name="P:DragonUtility.DragonNavigation.NavigationModel.UpdateDate">
            <summary>
            修改时间
            </summary>
        </member>
        <member name="P:DragonUtility.DragonNavigation.NavigationModel.CreateDate">
            <summary>
            创建时间
            </summary>
        </member>
        <member name="P:DragonUtility.DragonNavigation.NavigationModel.Parent">
            <summary>
            父菜单模型
            </summary>
        </member>
        <member name="P:DragonUtility.DragonNavigation.NavigationModel.Childs">
            <summary>
            子菜单模型集合
            </summary>
        </member>
        <member name="T:DragonUtility.DragonNavigation.DataAccessBase">
            <summary>
            数据访问服务基类
            </summary>
        </member>
        <member name="M:DragonUtility.DragonNavigation.DataAccessBase.#ctor(System.String)">
            <summary>
            抽象类构造函数
            </summary>
            <param name="dbConnAppSettingKey">值为数据库连接name的appSettings键</param>
        </member>
        <member name="P:DragonUtility.DragonNavigation.DataAccessBase.ConnectionString">
            <summary>
            数据库连接字符串
            </summary>
        </member>
        <member name="T:DragonUtility.DataTypes.ExtensionMethods.IDictionaryExtensions">
            <summary>
            IDictionary extensions
            </summary>
        </member>
        <member name="M:DragonUtility.DataTypes.ExtensionMethods.IDictionaryExtensions.Sort``2(System.Collections.Generic.IDictionary{``0,``1},System.Collections.Generic.IComparer{``0})">
            <summary>
            Sorts a dictionary
            </summary>
            <typeparam name="T1">Key type</typeparam>
            <typeparam name="T2">Value type</typeparam>
            <param name="Dictionary">Dictionary to sort</param>
            <param name="Comparer">Comparer used to sort (defaults to GenericComparer)</param>
            <returns>The sorted dictionary</returns>
        </member>
        <member name="M:DragonUtility.DataTypes.ExtensionMethods.IDictionaryExtensions.SortByValue``2(System.Collections.Generic.IDictionary{``0,``1},System.Collections.Generic.IComparer{``0})">
            <summary>
            Sorts a dictionary by value
            </summary>
            <typeparam name="T1">Key type</typeparam>
            <typeparam name="T2">Value type</typeparam>
            <param name="Dictionary">Dictionary to sort</param>
            <param name="Comparer">Comparer used to sort (defaults to GenericComparer)</param>
            <returns>The sorted dictionary</returns>
        </member>
        <member name="T:DragonSource.Utils.MailHelper">
            <summary>
            邮件帮助类
            </summary>
        </member>
        <member name="F:DragonSource.Utils.MailHelper.MailHost">
            发送服务器主机
        </member>
        <member name="F:DragonSource.Utils.MailHelper.User">
            账号
        </member>
        <member name="F:DragonSource.Utils.MailHelper.PassWord">
            密码
        </member>
        <member name="M:DragonSource.Utils.MailHelper.MailSenderBasic(System.String,System.String[],System.String[],System.String,System.String,System.Boolean)">
            <summary>
            发送邮件
            </summary>
            <param name="mFrom">发件人地址</param>
            <param name="mTo">收件人地址</param>
            <param name="mCc">抄送</param>
            <param name="mBody">正文</param>
            <param name="mSubiect">标题</param>
            <param name="isHtml">是否HTML结构</param>
            <returns></returns>
        </member>
        <member name="M:DragonSource.Utils.MailHelper.SendTxtMail(System.String,System.String,System.String,System.String)">
            <summary>
            发送普通文本邮件
            </summary>
            <param name="mTo">接收地址</param>
            <param name="mBody">内容</param>
            <param name="mSubiect">标题</param>
            <param name="MailFrom">发送人</param>
            <returns></returns>
        </member>
        <member name="M:DragonSource.Utils.MailHelper.SendHtmlMail(System.String,System.String,System.String,System.String)">
            <summary>
            发送超文本邮件
            </summary>
            <param name="mTo">接收地址</param>
            <param name="mBody">内容</param>
            <param name="mSubiect">主题</param>
            <param name="MailFrom">发送人</param>
            <returns></returns>
        </member>
        <member name="M:DragonSource.Utils.MailHelper.SendMail(System.String,System.String,System.String,System.String@)">
            <summary>
            发送邮件
            </summary>
            <param name="mTo">收件人地址</param>
            <param name="mBody">正文</param>
            <param name="mSubiect">标题</param>
            <returns></returns>
        </member>
        <!-- 对于成员“T:DragonSource.Utils.CryptographyHelper”忽略有格式错误的 XML 注释 -->
        <member name="M:DragonSource.Utils.CryptographyHelper.CreateDESProvider(System.String)">
            <summary>
            获取DES加密算法的提供程序
            </summary>
            <param name="encryptKey">密钥，长度为8位。如果字符超长则截断，不足8位自动用字符@补充。</param>
            <returns>DES加密算法的提供程序</returns>
        </member>
        <member name="M:DragonSource.Utils.CryptographyHelper.Encrypt(System.String)">
            <summary>
            DES使用默认密钥加密字符串
            </summary>
            <param name="strText">字符串数据</param>
            <returns>加密后的字符串</returns>
        </member>
        <member name="M:DragonSource.Utils.CryptographyHelper.Encrypt(System.String,System.String)">
            <summary>
            DES加密字符串
            </summary>
            <param name="strText">字符串数据</param>
            <param name="encryptKey">密钥，长度为8位。如果字符超长则截断，不足8位自动用字符@补充。</param>
            <returns>加密后的字符串</returns>
        </member>
        <member name="M:DragonSource.Utils.CryptographyHelper.Decrypt(System.String)">
            <summary>
            DES使用默认密钥解密字符串
            </summary>
            <param name="encryptedText">加了密的字符串</param>
            <returns>解密后的字符串</returns>
        </member>
        <member name="M:DragonSource.Utils.CryptographyHelper.Decrypt(System.String,System.String)">
            <summary>
            DES解密字符串,如果解密内容（encryptedText）为空，则直接返回空
            </summary>
            <param name="encryptedText">加了密的字符串</param>
            <param name="decryptKey">密钥，长度为8位。如果字符超长则截断，不足8位自动用字符@补充。</param>
            <returns>解密后的字符串</returns>
        </member>
        <member name="M:DragonSource.Utils.CryptographyHelper.EncryptFile(System.String,System.String)">
            <summary>
            DES使用默认密钥加密文件
            </summary>
            <param name="inputFilePath">源文件路径</param>
            <param name="outFilePath">输出文件路径</param>
        </member>
        <member name="M:DragonSource.Utils.CryptographyHelper.EncryptFile(System.String,System.String,System.String)">
            <summary>
            DES使用指定密钥加密文件
            </summary>
            <param name="inputFilePath">源文件路径</param>
            <param name="outFilePath">输出文件路径</param>
            <param name="encryptKey">密钥，长度为8位。如果字符超长则截断，不足8位自动用字符@补充。</param>
        </member>
        <member name="M:DragonSource.Utils.CryptographyHelper.DecryptFile(System.String,System.String)">
            <summary>
            DES使用默认密钥解密文件
            </summary>
            <param name="inputFilePath">加密了的文件路径</param>
            <param name="outFilePath">输出文件路径</param>
        </member>
        <member name="M:DragonSource.Utils.CryptographyHelper.DecryptFile(System.String,System.String,System.String)">
            <summary>
            DES使用指定密钥解密文件
            </summary>
            <param name="inputFilePath">加密了的文件路径</param>
            <param name="outFilePath">输出文件路径</param>
            <param name="decryptKey">密钥，长度为8位。如果字符超长则截断，不足8位自动用字符@补充。</param>
        </member>
        <member name="M:DragonSource.Utils.CryptographyHelper.MD5Hash(System.String)">
            <summary>
            使用默认编码进行标准MD5加密
            </summary>
            <param name="strText">text</param>
            <returns>md5 Encrypt string</returns>
        </member>
        <member name="M:DragonSource.Utils.CryptographyHelper.MD5Hash(System.String,System.Text.Encoding)">
            <summary>
            标准MD5加密
            </summary>
            <param name="strText">text</param>
            <param name="encoding">编码方式</param>
            <returns>md5 Encrypt string</returns>
        </member>
        <member name="T:DragonSource.Utils.Config.Validatecode.ValidatecodeConfig">
            <summary>
            验证码详细信息配置元素类
            </summary>
        </member>
        <member name="M:DragonSource.Utils.Config.Validatecode.ValidatecodeConfig.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:DragonSource.Utils.Config.Validatecode.ValidatecodeConfig.#ctor(System.String)">
            <summary>
            节点名称
            </summary>
            <param name="elementName"></param>
        </member>
        <member name="T:DragonUtility.IO.Logging.LoggingManager">
            <summary>
            Logging manager
            </summary>
        </member>
        <member name="F:DragonUtility.IO.Logging.LoggingManager.Logs">
            <summary>
            Logs
            </summary>
        </member>
        <member name="M:DragonUtility.IO.Logging.LoggingManager.GetLog``1(System.String)">
            <summary>
            Gets a specified log
            </summary>
            <param name="Name">The name of the log file</param>
            <typeparam name="LogType">Log type that the log object should be</typeparam>
            <returns>The log file specified</returns>
        </member>
        <member name="M:DragonUtility.IO.Logging.LoggingManager.GetLog(System.String)">
            <summary>
            Gets a specified log
            </summary>
            <param name="Name">The name of the log file</param>
            <returns>The log file specified</returns>
        </member>
        <member name="M:DragonUtility.IO.Logging.LoggingManager.AddLog``1(System.String)">
            <summary>
            Adds a log object or replaces one already in use
            </summary>
            <param name="Name">The name of the log file</param>
            <typeparam name="LogType">Log type to add</typeparam>
        </member>
        <member name="M:DragonUtility.IO.Logging.LoggingManager.AddLog(DragonUtility.IO.Logging.Interfaces.ILog,System.String)">
            <summary>
            Adds a log object or replaces one already in use
            </summary>
            <param name="Log">The log object to add</param>
            <param name="Name">The name of the log file</param>
        </member>
        <member name="M:DragonUtility.IO.Logging.LoggingManager.Destroy">
            <summary>
            
            </summary>
        </member>
        <member name="T:DragonUtility.IO.ExtensionMethods.FileInfoExtensions">
            <summary>
            Extension methods for <see cref="T:System.IO.FileInfo"/>
            </summary>
        </member>
        <member name="M:DragonUtility.IO.ExtensionMethods.FileInfoExtensions.Append(System.IO.FileInfo,System.String,System.Text.Encoding)">
            <summary>
            Appends a string to a file
            </summary>
            <param name="File">File to append to</param>
            <param name="Content">Content to save to the file</param>
            <param name="EncodingUsing">The type of encoding the string is using (defaults to ASCII)</param>
            <returns>The FileInfo object</returns>
        </member>
        <member name="M:DragonUtility.IO.ExtensionMethods.FileInfoExtensions.Append(System.IO.FileInfo,System.Byte[])">
            <summary>
            Appends a byte array to a file
            </summary>
            <param name="File">File to append to</param>
            <param name="Content">Content to append to the file</param>
            <returns>The FileInfo object</returns>
        </member>
        <member name="M:DragonUtility.IO.ExtensionMethods.FileInfoExtensions.CompareTo(System.IO.FileInfo,System.IO.FileInfo)">
            <summary>
            Compares two files against one another
            </summary>
            <param name="File1">First file</param>
            <param name="File2">Second file</param>
            <returns>True if the content is the same, false otherwise</returns>
        </member>
        <member name="M:DragonUtility.IO.ExtensionMethods.FileInfoExtensions.Read(System.IO.FileInfo)">
            <summary>
            Reads a file to the end as a string
            </summary>
            <param name="File">File to read</param>
            <returns>A string containing the contents of the file</returns>
        </member>
        <member name="M:DragonUtility.IO.ExtensionMethods.FileInfoExtensions.ReadBinary(System.IO.FileInfo)">
            <summary>
            Reads a file to the end and returns a binary array
            </summary>
            <param name="File">File to open</param>
            <returns>A binary array containing the contents of the file</returns>
        </member>
        <member name="M:DragonUtility.IO.ExtensionMethods.FileInfoExtensions.Save(System.IO.FileInfo,System.String,System.Text.Encoding)">
            <summary>
            Saves a string to a file
            </summary>
            <param name="File">File to save to</param>
            <param name="Content">Content to save to the file</param>
            <param name="EncodingUsing">Encoding that the content is using (defaults to ASCII)</param>
            <returns>The FileInfo object</returns>
        </member>
        <member name="M:DragonUtility.IO.ExtensionMethods.FileInfoExtensions.Save(System.IO.FileInfo,System.Byte[])">
            <summary>
            Saves a byte array to a file
            </summary>
            <param name="File">File to save to</param>
            <param name="Content">Content to save to the file</param>
            <returns>The FileInfo object</returns>
        </member>
        <member name="M:DragonUtility.IO.ExtensionMethods.FileInfoExtensions.SaveAsync(System.IO.FileInfo,System.String,System.AsyncCallback,System.Object,System.Text.Encoding)">
            <summary>
            Saves a string to a file (asynchronously)
            </summary>
            <param name="File">File to save to</param>
            <param name="Content">Content to save to the file</param>
            <param name="CallBack">Call back function</param>
            <param name="StateObject">State object</param>
            <param name="EncodingUsing">Encoding that the content is using (defaults to ASCII)</param>
            <returns>The FileInfo object</returns>
        </member>
        <member name="M:DragonUtility.IO.ExtensionMethods.FileInfoExtensions.SaveAsync(System.IO.FileInfo,System.Byte[],System.AsyncCallback,System.Object)">
            <summary>
            Saves a byte array to a file (asynchronously)
            </summary>
            <param name="File">File to save to</param>
            <param name="Content">Content to save to the file</param>
            <param name="CallBack">Call back function</param>
            <param name="StateObject">State object</param>
            <returns>The FileInfo object</returns>
        </member>
        <member name="M:DragonUtility.IO.ExtensionMethods.FileInfoExtensions.SetAttributes(System.IO.FileInfo,System.IO.FileAttributes)">
            <summary>
            Sets the attributes of a file
            </summary>
            <param name="File">File</param>
            <param name="Attributes">Attributes to set</param>
            <returns>The file info</returns>
        </member>
        <member name="T:DragonUtility.Operate.Model.OperateModel">
            <summary>
            实体基类
            </summary>
        </member>
        <member name="T:DragonSource.Utils.QRCodeHelper">
            <summary>
            二维码生成
            </summary>
        </member>
        <member name="F:DragonSource.Utils.QRCodeHelper.Ecl">
            <summary>
            容错比
            </summary>
        </member>
        <member name="F:DragonSource.Utils.QRCodeHelper.QuietZones">
            <summary>
            边缘
            </summary>
        </member>
        <member name="F:DragonSource.Utils.QRCodeHelper.ModuleSize">
            <summary>
            大小
            </summary>
        </member>
        <member name="F:DragonSource.Utils.QRCodeHelper.ServiceUrl">
            <summary>
            服务地址
            </summary>
        </member>
        <member name="M:DragonSource.Utils.QRCodeHelper.GenerateUrl(System.String,DragonSource.Utils.ErrorCorrectionLevel,System.String,DragonSource.Utils.QuietZoneModules,System.Int32)">
            <summary>
            生成二维码图片链接地址，供img的src属性调用
            </summary>
            <param name="server">服务地址</param>
            <param name="errorCorrection">容错比</param>
            <param name="content">内容</param>
            <param name="quietZone">边缘</param>
            <param name="moduleSize">大小,为一个不能小于0的整数，</param>
            <returns></returns>
        </member>
        <member name="M:DragonSource.Utils.QRCodeHelper.GenerateUrl(System.String)">
            <summary>
            生成链接
            </summary>
            <param name="content">内容</param>
            <returns></returns>
        </member>
        <member name="T:DragonSource.Utils.ErrorCorrectionLevel">
            <summary>
            容错比，值越低，生成的二维码图片质量越高，但也会带来图片过小，不容易扫描的问题，所以使用的时候按项目需要灵活调用
            </summary>
        </member>
        <member name="F:DragonSource.Utils.ErrorCorrectionLevel.L">
            <summary>
            7%
            </summary>
        </member>
        <member name="F:DragonSource.Utils.ErrorCorrectionLevel.M">
            <summary>
            15%
            </summary>
        </member>
        <member name="F:DragonSource.Utils.ErrorCorrectionLevel.Q">
            <summary>
            25%
            </summary>
        </member>
        <member name="F:DragonSource.Utils.ErrorCorrectionLevel.H">
            <summary>
            30%
            </summary>
        </member>
        <member name="T:DragonSource.Utils.QuietZoneModules">
            <summary>
            边缘
            </summary>
        </member>
        <member name="F:DragonSource.Utils.QuietZoneModules.Zero">
            <summary>
            0
            </summary>
        </member>
        <member name="F:DragonSource.Utils.QuietZoneModules.Two">
            <summary>
            2
            </summary>
        </member>
        <member name="F:DragonSource.Utils.QuietZoneModules.Four">
            <summary>
            4
            </summary>
        </member>
        <member name="T:DragonUtility.IO.Logging.BaseClasses.LogBase`1">
            <summary>
            Base class for logs
            </summary>
            <typeparam name="LogType">Log type</typeparam>
        </member>
        <member name="M:DragonUtility.IO.Logging.BaseClasses.LogBase`1.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:DragonUtility.IO.Logging.BaseClasses.LogBase`1.Init(System.String)">
            <summary>
            需要做的初始化工作
            </summary>
            <param name="currentname">当前日志的名称</param>
        </member>
        <member name="F:DragonUtility.IO.Logging.BaseClasses.LogBase`1.Log">
            <summary>
            Called to log the current message
            </summary>
        </member>
        <member name="M:DragonUtility.IO.Logging.BaseClasses.LogBase`1.Dispose">
            <summary>
            结束
            </summary>
        </member>
        <member name="M:DragonUtility.IO.Logging.BaseClasses.LogBase`1.LogMessage(System.String,DragonUtility.IO.Logging.Enums.MessageType,System.Object[])">
            <summary>
            实现接口
            </summary>
            <param name="Message"></param>
            <param name="Type"></param>
            <param name="args"></param>
        </member>
        <member name="P:DragonUtility.IO.Logging.BaseClasses.LogBase`1.Start">
            <summary>
            Called when the log is "opened"
            </summary>
        </member>
        <member name="P:DragonUtility.IO.Logging.BaseClasses.LogBase`1.End">
            <summary>
            Called when the log is "closed"
            </summary>
        </member>
        <member name="P:DragonUtility.IO.Logging.BaseClasses.LogBase`1.FormatMessage">
            <summary>
            格式化消息
            </summary>
        </member>
        <member name="T:DragonUtility.IO.Logging.BaseClasses.LogBase`1.Format">
            <summary>
            
            </summary>
            <param name="Message"></param>
            <param name="Type"></param>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="T:DragonUtility.DragonNavigation.INavigationCacheService">
            <summary>
            导航菜单缓存管理服务接口
            </summary>
            <remarks>
            <pre>
            该接口应用于应用系统与管理平台分布在多个IIS站点或虚拟目录下的场景。
            
            在管理平台完成对导航菜单的“添加”、“编辑”、“移动”、“删除”操作后将操作结果同步到应用系统的缓存。
            
            通常会在应用系统开设 WebService 供管理平台调用。
            </pre>
            </remarks>
        </member>
        <member name="M:DragonUtility.DragonNavigation.INavigationCacheService.UpdateCacheForAdd(System.String)">
            <summary>
            执行添加操作后的缓存更新
            </summary>
            <param name="code">分类编号</param>
        </member>
        <member name="M:DragonUtility.DragonNavigation.INavigationCacheService.UpdateCacheForEditor(System.String)">
            <summary>
            执行编辑操作后的缓存更新
            </summary>
            <param name="code">分类编号</param>
        </member>
        <member name="M:DragonUtility.DragonNavigation.INavigationCacheService.UpdateCacheForMove(System.String,DragonUtility.DragonNavigation.Enums.MoveDirection)">
            <summary>
            执行移动操作后的应用系统缓存更新
            </summary>
            <param name="code">要移动的导航菜单编号</param>
            <param name="direction">移动方向</param>
        </member>
        <member name="M:DragonUtility.DragonNavigation.INavigationCacheService.UpdateCacheForDelete(System.String)">
            <summary>
            执行删除操作后的缓存更新
            </summary>
            <param name="code">要删除的导航菜单编号</param>
        </member>
        <member name="M:DragonUtility.DragonCompilation.Log.WriteLog(System.String)">
            <summary>
            写文本日志
            读取配置节点[DragonCompilationTxtPath] 例如："/Log/" 
            当读取不到配置节点时，默认输出到当前项目的"/Log/Compilation/"目录下
            </summary>
            <param name="message">内容</param>
        </member>
        <member name="T:DragonSource.Utils.RegexHelper">
            <summary>
            操作正则表达式的公共类
            </summary>    
        </member>
        <member name="M:DragonSource.Utils.RegexHelper.IsMatch(System.String,System.String)">
            <summary>
            验证输入字符串是否与模式字符串匹配，匹配返回true
            </summary>
            <param name="input">输入字符串</param>
            <param name="pattern">模式字符串</param>        
        </member>
        <member name="M:DragonSource.Utils.RegexHelper.IsMatch(System.String,System.String,System.Text.RegularExpressions.RegexOptions)">
            <summary>
            验证输入字符串是否与模式字符串匹配，匹配返回true
            </summary>
            <param name="input">输入的字符串</param>
            <param name="pattern">模式字符串</param>
            <param name="options">筛选条件</param>
        </member>
        <member name="T:DragonSource.Utils.Express">
            <summary>
            包含一些常用的正则验证表达式,相应的实现方法全在ValidateHelper中
            <para>其实也可以做为在写javascript验证代码的时候做为参考哦..</para>
            </summary>
        </member>
        <member name="F:DragonSource.Utils.Express.IDCARD">
            <summary>
            身份证验证
            </summary>
        </member>
        <member name="F:DragonSource.Utils.Express.HANDSET">
            <summary>
            手机验证(不包含小录通)
            </summary>
        </member>
        <member name="F:DragonSource.Utils.Express.IP">
            <summary>
            IP验证
            </summary>
        </member>
        <member name="F:DragonSource.Utils.Express.NUMBER">
            <summary>
            是否为数字
            </summary>
        </member>
        <member name="F:DragonSource.Utils.Express.ENGLISH">
            <summary>
            是否为英文
            </summary>
        </member>
        <member name="F:DragonSource.Utils.Express.LOWERALPHABETS">
            <summary>
            是否为英文小写
            </summary>
        </member>
        <member name="F:DragonSource.Utils.Express.UPPERALPHABETS">
            <summary>
            是否为英文大写
            </summary>
        </member>
        <member name="F:DragonSource.Utils.Express.CHINESE">
            <summary>
            是否为中文
            </summary>
        </member>
        <member name="F:DragonSource.Utils.Express.ALPHABETNUMBERS">
            <summary>
            是否为英文字母或数字
            </summary>
        </member>
        <member name="F:DragonSource.Utils.Express.EMAIL">
            <summary>
            是否为正确的电子邮件格式
            </summary>
        </member>
        <member name="F:DragonSource.Utils.Express.FY_IN">
            <summary>
            防止sql注入
            </summary>
        </member>
        <member name="T:DragonSource.Utils.ValidateHelper">
            <summary>
            常用验证帮助类,所有验证规则可见Express类中公用常量
            </summary>
        </member>
        <member name="M:DragonSource.Utils.ValidateHelper.IsNullOrEmpty``1(``0)">
            <summary>
            判断对象是否为空，为空返回true
            </summary>
            <typeparam name="T">要验证的对象的类型</typeparam>
            <param name="data">要验证的对象</param>        
        </member>
        <member name="M:DragonSource.Utils.ValidateHelper.IsNullOrEmpty(System.Object)">
            <summary>
            判断对象是否为空，为空返回true
            </summary>
            <param name="data">要验证的对象</param>
        </member>
        <member name="M:DragonSource.Utils.ValidateHelper.IsMobile(System.String)">
            <summary>
            是否为手机号码
            </summary>
            <param name="input">验证内容</param>
            <returns>true:是，false:否</returns>
        </member>
        <member name="M:DragonSource.Utils.ValidateHelper.IsNumber(System.String)">
            <summary>
            是否为数字
            </summary>
            <param name="input">验证内容</param>
            <returns>true:是，false:否</returns>
        </member>
        <member name="M:DragonSource.Utils.ValidateHelper.IsEnglish(System.String)">
            <summary>
            是否为纯英文,即是否只包含英文字母(含大写、小写)
            </summary>
            <param name="input">验证内容</param>
            <returns>true:是，false:否</returns>
        </member>
        <member name="M:DragonSource.Utils.ValidateHelper.IsLowerAlphabets(System.String)">
            <summary>
            是否为全小写英文字母
            </summary>
            <param name="input">验证内容</param>
            <returns>true:是，false:否</returns>
        </member>
        <member name="M:DragonSource.Utils.ValidateHelper.IsUpperrAlphabets(System.String)">
            <summary>
            是否为全大写英文字母
            </summary>
            <param name="input">验证内容</param>
            <returns>true:是，false:否</returns>
        </member>
        <member name="M:DragonSource.Utils.ValidateHelper.IsAlphabetNumbers(System.String)">
            <summary>
            是否为英文字母或数字
            </summary>
            <param name="input">验证内容</param>
            <returns>true:是，false:否</returns>
        </member>
        <member name="M:DragonSource.Utils.ValidateHelper.IsChinese(System.String)">
            <summary>
            是否为全中文内容
            </summary>
            <param name="input">验证内容</param>
            <returns>true:是，false:否</returns>
        </member>
        <member name="M:DragonSource.Utils.ValidateHelper.IsEmail(System.String)">
            <summary>
            是否为正确的邮箱地址
            </summary>
            <param name="input">验证内容</param>
            <returns>true:是，false:否</returns>
        </member>
        <member name="M:DragonSource.Utils.ValidateHelper.IsIP(System.String)">
            <summary>
            是否为正确的IP地址
            </summary>
            <param name="ip">要验证的IP地址</param>        
        </member>
        <member name="M:DragonSource.Utils.ValidateHelper.IsIDCard(System.String)">
            <summary>
            是否为身份证
            </summary>
            <param name="input">验证内容</param>
            <returns>true:是，false:否</returns>
        </member>
        <member name="T:DragonSource.Utils.RandomHelper">
            <summary>
            使用Random类生成伪随机数
            </summary>
        </member>
        <member name="M:DragonSource.Utils.RandomHelper.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:DragonSource.Utils.RandomHelper.GetRandomInt(System.Int32,System.Int32)">
            <summary>
            生成一个指定范围的随机整数，该随机数范围包括最小值，但不包括最大值
            </summary>
            <param name="minNum">最小值</param>
            <param name="maxNum">最大值</param>
        </member>
        <member name="M:DragonSource.Utils.RandomHelper.GetRandomDouble">
            <summary>
            生成一个0.0到1.0的随机小数
            </summary>
        </member>
        <member name="M:DragonSource.Utils.RandomHelper.GetRandomArray``1(``0[])">
            <summary>
            对一个数组进行随机排序
            </summary>
            <typeparam name="T">数组的类型</typeparam>
            <param name="arr">需要随机排序的数组</param>
        </member>
        <member name="M:DragonSource.Utils.RandomHelper.GenerateCheckCodeNum(System.Int32)">
            <summary>
            随机生成不重复数字字符串
            </summary>
            <param name="codeCount">指定生成个数</param>
            <returns></returns>
        </member>
        <member name="M:DragonSource.Utils.RandomHelper.GenerateCheckCode(System.Int32)">
            <summary>
            随机生成字符串（数字和字母混和）
            </summary>
            <param name="codeCount">指定生成个数</param>
            <returns></returns>
        </member>
        <member name="M:DragonSource.Utils.RandomHelper.GetRandomCode(System.String,System.Int32)">
            <summary>
            从字符串里随机得到，规定个数的字符串.
            </summary>
            <param name="allChar">以逗号分隔由字符组成的字符串，如：1,2,3,4,5,6,7,8,9,A,B,C,D,E,F,G,H,i,J,K,L,M,N,O,P,Q,R,S,T,U,V,W,X,Y,Z</param>
            <param name="CodeCount">指定生成个数</param>
            <returns></returns>
        </member>
        <member name="T:DragonSource.Utils.GenericEqualityComparer`1">
            <summary>
            Generic equality comparer
            </summary>
            <typeparam name="T">Data type</typeparam>
        </member>
        <member name="M:DragonSource.Utils.GenericEqualityComparer`1.Equals(`0,`0)">
            <summary>
            
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="T:DragonUtility.IO.ExtensionMethods.SerializationExtensions">
            <summary>
            Serialization extensions
            </summary>
        </member>
        <member name="M:DragonUtility.IO.ExtensionMethods.SerializationExtensions.ToBinary(System.Object,System.String)">
            <summary>
            Converts an object to Binary
            </summary>
            <param name="Object">Object to convert</param>
            <param name="FileToSaveTo">File to save the XML to (optional)</param>
            <returns>The object converted to a JSON string</returns>
        </member>
        <member name="M:DragonUtility.IO.ExtensionMethods.SerializationExtensions.ToJSON(System.Object,System.String,System.Text.Encoding)">
            <summary>
            Converts an object to JSON
            </summary>
            <param name="Object">Object to convert</param>
            <param name="FileToSaveTo">File to save the XML to (optional)</param>
            <param name="EncodingUsing">Encoding that the XML should be saved/returned as (defaults to ASCII)</param>
            <returns>The object converted to a JSON string</returns>
        </member>
        <member name="M:DragonUtility.IO.ExtensionMethods.SerializationExtensions.ToXML(System.Object,System.String,System.Text.Encoding)">
            <summary>
            Converts an object to XML
            </summary>
            <param name="Object">Object to convert</param>
            <param name="FileToSaveTo">File to save the XML to (optional)</param>
            <param name="EncodingUsing">Encoding that the XML should be saved/returned as (defaults to ASCII)</param>
            <returns>string representation of the object in XML format</returns>
        </member>
        <member name="M:DragonUtility.IO.ExtensionMethods.SerializationExtensions.ToCDataXml(System.Object,System.String,System.Text.Encoding)">
            <summary>
            使用CDATA包裹节点内容的XML
            </summary>
            <param name="Object"></param>
            <param name="FileToSaveTo"></param>
            <param name="EncodingUsing"></param>
            <returns></returns>
        </member>
        <member name="M:DragonUtility.IO.ExtensionMethods.SerializationExtensions.ToObject``1(System.Byte[])">
            <summary>
            Converts the serialized byte array into an object
            </summary>
            <param name="Content">The byte array to convert</param>
            <typeparam name="T">Object type to return</typeparam>
            <returns>The byte array converted to the specified object type</returns>
        </member>
        <member name="M:DragonUtility.IO.ExtensionMethods.SerializationExtensions.ToObject(System.Byte[],System.Type)">
            <summary>
            Converts the serialized byte array into an object
            </summary>
            <param name="Content">The byte array to convert</param>
            <param name="ObjectType">Object type to return</param>
            <returns>The byte array converted to the specified object type</returns>
        </member>
        <member name="M:DragonUtility.IO.ExtensionMethods.SerializationExtensions.ToObject``1(System.Xml.XmlDocument,System.Text.Encoding)">
            <summary>
            Converts the serialized XML document into an object
            </summary>
            <param name="Content">The XML document to convert</param>
            <param name="EncodingUsing">Encoding to use (defaults to ASCII)</param>
            <typeparam name="T">Object type to return</typeparam>
            <returns>The XML document converted to the specified object type</returns>
        </member>
        <member name="M:DragonUtility.IO.ExtensionMethods.SerializationExtensions.ToObject(System.Xml.XmlDocument,System.Type,System.Text.Encoding)">
            <summary>
            Converts the serialized XML document into an object
            </summary>
            <param name="Content">The XML document to convert</param>
            <param name="EncodingUsing">Encoding to use (defaults to ASCII)</param>
            <param name="ObjectType">Object type to return</param>
            <returns>The XML document converted to the specified object type</returns>
        </member>
        <member name="M:DragonUtility.IO.ExtensionMethods.SerializationExtensions.JSONToObject``1(System.String,System.Text.Encoding)">
            <summary>
            Converts a JSON string to an object of the specified type
            </summary>
            <typeparam name="T">Object type to return</typeparam>
            <param name="Content">The string to convert</param>
            <param name="EncodingUsing">Encoding to use (defaults to ASCII)</param>
            <returns>The string converted to the specified object type</returns>
        </member>
        <member name="M:DragonUtility.IO.ExtensionMethods.SerializationExtensions.JSONToObject``1(System.IO.FileInfo,System.Text.Encoding)">
            <summary>
            Converts a JSON file to an object of the specified type
            </summary>
            <typeparam name="T">Object type to return</typeparam>
            <param name="Content">The file to convert</param>
            <param name="EncodingUsing">Encoding to use (defaults to ASCII)</param>
            <returns>The file converted to the specified object type</returns>
        </member>
        <member name="M:DragonUtility.IO.ExtensionMethods.SerializationExtensions.JSONToObject(System.String,System.Type,System.Text.Encoding)">
            <summary>
            Converts a JSON string to an object of the specified type
            </summary>
            <param name="ObjectType">Object type to return</param>
            <param name="Content">The string to convert</param>
            <param name="EncodingUsing">Encoding to use (defaults to ASCII)</param>
            <returns>The string converted to the specified object type</returns>
        </member>
        <member name="M:DragonUtility.IO.ExtensionMethods.SerializationExtensions.JSONToObject(System.IO.FileInfo,System.Type,System.Text.Encoding)">
            <summary>
            Converts a JSON file to an object of the specified type
            </summary>
            <param name="ObjectType">Object type to return</param>
            <param name="Content">The file to convert</param>
            <param name="EncodingUsing">Encoding to use (defaults to ASCII)</param>
            <returns>The file converted to the specified object type</returns>
        </member>
        <member name="M:DragonUtility.IO.ExtensionMethods.SerializationExtensions.XMLToObject``1(System.String,System.Text.Encoding)">
            <summary>
            Converts a string to an object of the specified type
            </summary>
            <typeparam name="T">Object type to return</typeparam>
            <param name="Content">The string to convert</param>
            <param name="EncodingUsing">Encoding to use (defaults to ASCII)</param>
            <returns>The string converted to the specified object type</returns>
        </member>
        <member name="M:DragonUtility.IO.ExtensionMethods.SerializationExtensions.XMLToObject``1(System.IO.FileInfo,System.Text.Encoding)">
            <summary>
            Converts a FileInfo object to an object of the specified type
            </summary>
            <typeparam name="T">Object type to return</typeparam>
            <param name="Content">The file to convert</param>
            <param name="EncodingUsing">Encoding to use (defaults to ASCII)</param>
            <returns>The file converted to the specified object type</returns>
        </member>
        <member name="M:DragonUtility.IO.ExtensionMethods.SerializationExtensions.XMLToObject(System.String,System.Type,System.Text.Encoding)">
            <summary>
            Converts a string to an object of the specified type
            </summary>
            <param name="ObjectType">Object type to return</param>
            <param name="Content">The string to convert</param>
            <param name="EncodingUsing">Encoding to use (defaults to ASCII)</param>
            <returns>The string converted to the specified object type</returns>
        </member>
        <member name="M:DragonUtility.IO.ExtensionMethods.SerializationExtensions.XMLToObject(System.IO.FileInfo,System.Type,System.Text.Encoding)">
            <summary>
            Converts a FileInfo object to an object of the specified type
            </summary>
            <param name="ObjectType">Object type to return</param>
            <param name="Content">The file to convert</param>
            <param name="EncodingUsing">Encoding to use (defaults to ASCII)</param>
            <returns>The file converted to the specified object type</returns>
        </member>
        <member name="M:DragonUtility.IO.ExtensionMethods.MyXMLWriter.ReplaceLowOrderASCIICharacters(System.String)">
            <summary>
            处理低位字符
            </summary>
            <param name="tmp"></param>
            <returns></returns>
        </member>
        <member name="T:DragonUtility.IO.ExtensionMethods.DirectoryCopy">
            <summary>
            文件夹拷贝
            </summary>
        </member>
        <member name="M:DragonUtility.IO.ExtensionMethods.DirectoryCopy.CopyDirectory(System.String,System.String)">
            <summary>
            拷贝源文件夹中的文件及子目录到一个目标文件夹中
            </summary>
            <param name="source">源文件夹</param>
            <param name="dest">目标文件夹</param>
        </member>
        <member name="T:DragonUtility.DataTypes.ExtensionMethods.DateTimeExtensions">
            <summary>
            系统数据类型 “时间”扩展方法类
            </summary>
        </member>
        <member name="M:DragonUtility.DataTypes.ExtensionMethods.DateTimeExtensions.DaysInMonth(System.DateTime)">
            <summary>
            获取日期时间所在月份总共有多少天
            </summary>
            <param name="Date">日期时间</param>
            <returns><c>int</c></returns>
        </member>
        <member name="M:DragonUtility.DataTypes.ExtensionMethods.DateTimeExtensions.DaysLeftInMonth(System.DateTime)">
            <summary>
            获取日期时间所在月份还剩余多少天
            </summary>
            <param name="Date">The date to check against</param>
            <returns>The number of days left in a month</returns>
        </member>
        <member name="M:DragonUtility.DataTypes.ExtensionMethods.DateTimeExtensions.GetDaysOfYear(System.DateTime)">
            <summary>获取一个日期所在年份共有多少天</summary>
            <param name="Date">要查看的日期</param>
            <returns>日期时间所在年份拥有的天数</returns>
        </member>
        <member name="M:DragonUtility.DataTypes.ExtensionMethods.DateTimeExtensions.DaysLeftInYear(System.DateTime)">
            <summary> 
            获取日期时间所在年份还剩余多少天
            </summary>
            <param name="Date">传入时间</param>
            <returns>时间所在年份剩余的天数</returns>
        </member>
        <member name="M:DragonUtility.DataTypes.ExtensionMethods.DateTimeExtensions.DaysLeftInWeek(System.DateTime)">
            <summary>
            获取日期时间所在周份还剩余的天数
            </summary>
            <param name="Date">传入时间</param>
            <returns>时间所在周份还剩余的天数</returns>
        </member>
        <member name="M:DragonUtility.DataTypes.ExtensionMethods.DateTimeExtensions.FirstDayOfMonth(System.DateTime)">
            <summary>
            根据日期时间获取获取其所在月份的第一天
            </summary>
            <param name="Date">传入时间</param>
            <returns>第1天的时间<c>DateTime</c></returns>
        </member>
        <member name="M:DragonUtility.DataTypes.ExtensionMethods.DateTimeExtensions.FirstDayOfWeek(System.DateTime,System.Globalization.CultureInfo)">
            <summary>
            获取一周中的第一天的具体日期时间
            </summary>
            <param name="Date">传入参数</param>
            <param name="CultureInfo">本地化信息</param>
            <returns>第一天的具体日期时间</returns>
        </member>
        <member name="M:DragonUtility.DataTypes.ExtensionMethods.DateTimeExtensions.LastDayOfMonth(System.DateTime)">
            <summary>
            获取一个时间所在月份的最后一天
            </summary>
            <param name="Date">要获取其所在月份最后一天的时间</param>
            <returns>最后一天的日期时间</returns>
        </member>
        <member name="M:DragonUtility.DataTypes.ExtensionMethods.DateTimeExtensions.LastDayOfWeek(System.DateTime,System.Globalization.CultureInfo)">
            <summary>
            获取一个时间所在周份的最后一天
            </summary>
            <param name="Date">要获取其所在周份最后一天的时间</param>
            <param name="CultureInfo">本地化信息</param>
            <returns>最后一天的日期时间</returns>
        </member>
        <member name="M:DragonUtility.DataTypes.ExtensionMethods.DateTimeExtensions.FromUnixTime(System.Int32)">
            <summary>
            转化Unix时间为.net中的时间类型
            </summary>
            <param name="Date">Unix时间</param>
            <returns><c>DataTime</c>格式的时间表示类型</returns>
        </member>
        <member name="M:DragonUtility.DataTypes.ExtensionMethods.DateTimeExtensions.FromUnixTime(System.Int64)">
            <summary>
            转化Unix时间为.net中的时间类型
            </summary>
            <param name="Date">要转化Unix时间</param>
            <returns><c>DataTime</c>格式的时间表示类型</returns>
        </member>
        <member name="M:DragonUtility.DataTypes.ExtensionMethods.DateTimeExtensions.ToUnix(System.DateTime)">
            <summary>
            将.net中的日期时间转化为Unix时间格式
            </summary>
            <param name="Date">要转化的.net日期时间</param>
            <returns>为Unix时间<c>int</c></returns>
        </member>
        <member name="M:DragonUtility.DataTypes.ExtensionMethods.DateTimeExtensions.IsInFuture(System.DateTime)">
            <summary>
            检查一个时间是否为将来时间
            </summary>
            <param name="Date">要检查的时间</param>
            <returns>True if it is, false otherwise</returns>
        </member>
        <member name="M:DragonUtility.DataTypes.ExtensionMethods.DateTimeExtensions.IsInPast(System.DateTime)">
            <summary>
            检查一个时间是否为过去时间
            </summary>
            <param name="Date">要检查的时间</param>
            <returns>True if it is, false otherwise</returns>
        </member>
        <member name="M:DragonUtility.DataTypes.ExtensionMethods.DateTimeExtensions.IsWeekDay(System.DateTime)">
            <summary>
            检查一个时间是否为工作时(即周一至周五)
            </summary>
            <param name="Date">要检查的时间</param>
            <returns>是则返回true,否则返回false</returns>
        </member>
        <member name="M:DragonUtility.DataTypes.ExtensionMethods.DateTimeExtensions.IsWeekEnd(System.DateTime)">
            <summary>
            检查一个时间是否为双休日
            </summary>
            <param name="Date">要检查的时间</param>
            <returns>是则返回true,否则返回false</returns>
        </member>
        <member name="M:DragonUtility.DataTypes.ExtensionMethods.DateTimeExtensions.GetWeekNameOfDay(System.DateTime)">
            <summary>获取日期时间是星期几</summary>
            <param name="idt">日期</param>
            <returns>星期名称</returns>
            <remarks>
            返回如：星期一，星期二，星期三..星期日的表示形式
            </remarks>
        </member>
        <member name="M:DragonUtility.DataTypes.ExtensionMethods.DateTimeExtensions.GetWeekNumberOfDay(System.DateTime)">
            <summary>返回日期时间的星期编号</summary>
            <param name="idt">日期</param>
            <returns>星期数字编号</returns>
            <remarks>
            返回 1，2，3，4，5，6，7的表示形式
            </remarks>
        </member>
        <member name="M:DragonUtility.DataTypes.ExtensionMethods.DateTimeExtensions.GetFormatDate(System.DateTime,System.Char)">
            <summary>
            将时间格式化成 年月日 的形式,如果时间为null，返回当前系统时间
            </summary>
            <param name="dt">要格式化的日期</param>
            <param name="Separator">年月日分隔符,如：“-”，“/"，“：”等等..</param>
            <returns>格式化后的日期字符串</returns>
        </member>
        <member name="M:DragonUtility.DataTypes.ExtensionMethods.DateTimeExtensions.GetFormatTime(System.DateTime,System.Char)">
            <summary>
            将时间格式化成 时分秒 的形式,如果时间为null，返回当前系统时间
            </summary>
            <param name="dt">要格式化的日期时间</param>
            <param name="Separator">年月日分隔符,如：“：”等等..</param>
            <returns>格式化的时间格式</returns>
            <example>
            
             </example>
        </member>
        <member name="M:DragonUtility.DataTypes.ExtensionMethods.DateTimeExtensions.SecondToMinute(System.Int32)">
            <summary>
            把秒转换成分钟
            </summary>
            <returns>转换后的分钟数</returns>
        </member>
        <member name="M:DragonUtility.DataTypes.ExtensionMethods.DateTimeExtensions.GetMonthLastDate(System.Int32,System.Int32)">
            <summary>
            返回某年某月最后一天
            </summary>
            <param name="year">年份</param>
            <param name="month">月份</param>
            <returns>日</returns>
        </member>
        <member name="M:DragonUtility.DataTypes.ExtensionMethods.DateTimeExtensions.DateDiff(System.DateTime,System.DateTime)">
            <summary>
            返回时间差中的字符串表示形式
            <remarks>
            原理：<para>如果时间差大于等于1天则返回形如:“5月19日”即 M月D日的形式</para>
            <para>如果时间差大于1小时，则返回形如：“12小时前“的形式</para>
            <para>否则返回“｛分钟数｝分钟前”的形式，如：5分钟前</para>
            </remarks>
            </summary>
            <param name="DateTime1"></param>
            <param name="DateTime2"></param>
            <returns></returns>
        </member>
        <member name="M:DragonUtility.DataTypes.ExtensionMethods.DateTimeExtensions.DateDiff2(System.DateTime,System.DateTime)">
            <summary>
            获得两个日期的间隔
            </summary>
            <param name="DateTime1">日期一。</param>
            <param name="DateTime2">日期二。</param>
            <returns>日期间隔TimeSpan。</returns>
        </member>
        <member name="M:DragonUtility.DataTypes.ExtensionMethods.DateTimeExtensions.FormatDate(System.DateTime,System.String)">
            <summary>
            格式化日期时间
            </summary>
            <param name="dateTime1">日期时间</param>
            <param name="dateMode">显示模式</param>
            <returns>0-9种模式的日期</returns>
            <remarks>
            0: "yyyy-MM-dd"
            1:"yyyy-MM-dd HH:mm:ss"
            2:"yyyy/MM/dd"
            3:"yyyy年MM月dd日"
            4:"MM-dd"
            5:"MM/dd"
            6:"MM月dd日"
            7:"yyyy-MM"
            8:"yyyy/MM"
            9:"yyyy年MM月"
            </remarks>
        </member>
        <member name="M:DragonUtility.DataTypes.ExtensionMethods.DateTimeExtensions.GetRandomTime(System.DateTime,System.DateTime)">
            <summary>
            得到随机日期
            </summary>
            <param name="time1">起始日期</param>
            <param name="time2">结束日期</param>
            <returns>间隔日期之间的 随机日期</returns>
        </member>
        <member name="M:DragonUtility.DataTypes.ExtensionMethods.DateTimeExtensions.IsRuYear(System.Int32)">
            <summary>判断当前年份是否是闰年，私有函数</summary>
            <param name="iYear">年份</param>
            <returns>是闰年：True ，不是闰年：False</returns>
        </member>
        <member name="T:DragonUtility.DataProvider.EntityBase">
            <summary>
            需要使用SqlHelper的实体需要继承此类
            </summary>
        </member>
        <member name="T:DragonSource.Utils.SqlHelper">
            <summary>
            访问SQL Server数据库常用操作封装类，所有方法均为Static类型
            </summary>
        </member>
        <member name="F:DragonSource.Utils.SqlHelper.CONN_DragonResource">
            <summary>
            统一资源链接字符串
            </summary>
        </member>
        <member name="F:DragonSource.Utils.SqlHelper.CONN_DragonUser">
            <summary>
            统一用户链接字符串
            </summary>
        </member>
        <member name="F:DragonSource.Utils.SqlHelper.CONN_DragonLog">
            <summary>
            统一日志链接字符串
            </summary>
        </member>
        <member name="F:DragonSource.Utils.SqlHelper.CONN_OperateLog">
            <summary>
            统一操作链接字符串
            </summary>
        </member>
        <member name="F:DragonSource.Utils.SqlHelper.CONN_DragonSearch">
            <summary>
            统一检索链接字符串
            </summary>
        </member>
        <member name="F:DragonSource.Utils.SqlHelper.CONN_DragonOperate">
            <summary>
            统一运营模块链接字符串
            </summary>
        </member>
        <member name="F:DragonSource.Utils.SqlHelper.CONN_DragonCompilation">
            <summary>
            统一汇编系统链接字符串
            </summary>
        </member>
        <member name="F:DragonSource.Utils.SqlHelper.CONN_DragonNavigation">
            <summary>
            统一导航模块链接字符串
            </summary>
        </member>
        <member name="M:DragonSource.Utils.SqlHelper.AttachParameters(System.Data.SqlClient.SqlCommand,System.Data.SqlClient.SqlParameter[])">
            <summary>
            This method is used to attach array of SqlParameters to a SqlCommand.
            
            This method will assign a value of DbNull to any parameter with a direction of
            InputOutput and a value of null.  
            
            This behavior will prevent default values from being used, but
            this will be the less common case than an intended pure output parameter (derived as InputOutput)
            where the user provided no input value.
            </summary>
            <param name="command">The command to which the parameters will be added</param>
            <param name="commandParameters">An array of SqlParameters to be added to command</param>
        </member>
        <member name="M:DragonSource.Utils.SqlHelper.AssignParameterValues(System.Data.SqlClient.SqlParameter[],System.Data.DataRow)">
            <summary>
            This method assigns dataRow column values to an array of SqlParameters
            </summary>
            <param name="commandParameters">Array of SqlParameters to be assigned values</param>
            <param name="dataRow">The dataRow used to hold the stored procedure's parameter values</param>
        </member>
        <member name="M:DragonSource.Utils.SqlHelper.AssignParameterValues(System.Data.SqlClient.SqlParameter[],System.Object[])">
            <summary>
            This method assigns an array of values to an array of SqlParameters
            </summary>
            <param name="commandParameters">Array of SqlParameters to be assigned values</param>
            <param name="parameterValues">Array of objects holding the values to be assigned</param>
        </member>
        <member name="M:DragonSource.Utils.SqlHelper.PrepareCommand(System.Data.SqlClient.SqlCommand,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[],System.Boolean@)">
            <summary>
            This method opens (if necessary) and assigns a connection, transaction, command type and parameters 
            to the provided command
            </summary>
            <param name="command">The SqlCommand to be prepared</param>
            <param name="connection">A valid SqlConnection, on which to execute this command</param>
            <param name="transaction">A valid SqlTransaction, or 'null'</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandParameters">An array of SqlParameters to be associated with the command or 'null' if no parameters are required</param>
            <param name="mustCloseConnection"><c>true</c> if the connection was opened by the method, otherwose is false.</param>
        </member>
        <member name="M:DragonSource.Utils.SqlHelper.ExecuteNonQuery(System.String,System.Data.CommandType,System.String)">
            <summary>
            Execute a SqlCommand (that returns no resultset and takes no parameters) against the database specified in 
            the connection string
            </summary>
            <remarks>
            e.g.:  
             int result = ExecuteNonQuery(connString, CommandType.StoredProcedure, "PublishOrders");
            </remarks>
            <param name="connectionString">A valid connection string for a SqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <returns>An int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:DragonSource.Utils.SqlHelper.ExecuteNonQuery(System.String,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Execute a SqlCommand (that returns no resultset) against the database specified in the connection string 
            using the provided parameters
            </summary>
            <remarks>
            e.g.:  
             int result = ExecuteNonQuery(connString, CommandType.StoredProcedure, "PublishOrders", new SqlParameter("@prodid", 24));
            </remarks>
            <param name="connectionString">A valid connection string for a SqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandParameters">An array of SqlParamters used to execute the command</param>
            <returns>An int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:DragonSource.Utils.SqlHelper.ExecuteNonQuery(System.String,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns no resultset) against the database specified in 
            the connection string using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             int result = ExecuteNonQuery(connString, "PublishOrders", 24, 36);
            </remarks>
            <param name="connectionString">A valid connection string for a SqlConnection</param>
            <param name="spName">The name of the stored prcedure</param>
            <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
            <returns>An int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:DragonSource.Utils.SqlHelper.ExecuteNonQuery(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String)">
            <summary>
            Execute a SqlCommand (that returns no resultset and takes no parameters) against the provided SqlConnection. 
            </summary>
            <remarks>
            e.g.:  
             int result = ExecuteNonQuery(conn, CommandType.StoredProcedure, "PublishOrders");
            </remarks>
            <param name="connection">A valid SqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <returns>An int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:DragonSource.Utils.SqlHelper.ExecuteNonQuery(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Execute a SqlCommand (that returns no resultset) against the specified SqlConnection 
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             int result = ExecuteNonQuery(conn, CommandType.StoredProcedure, "PublishOrders", new SqlParameter("@prodid", 24));
            </remarks>
            <param name="connection">A valid SqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandParameters">An array of SqlParamters used to execute the command</param>
            <returns>An int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:DragonSource.Utils.SqlHelper.ExecuteNonQuery(System.Data.SqlClient.SqlConnection,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns no resultset) against the specified SqlConnection 
            using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             int result = ExecuteNonQuery(conn, "PublishOrders", 24, 36);
            </remarks>
            <param name="connection">A valid SqlConnection</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
            <returns>An int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:DragonSource.Utils.SqlHelper.ExecuteNonQuery(System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String)">
            <summary>
            Execute a SqlCommand (that returns no resultset and takes no parameters) against the provided SqlTransaction. 
            </summary>
            <remarks>
            e.g.:  
             int result = ExecuteNonQuery(trans, CommandType.StoredProcedure, "PublishOrders");
            </remarks>
            <param name="transaction">A valid SqlTransaction</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <returns>An int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:DragonSource.Utils.SqlHelper.ExecuteNonQuery(System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Execute a SqlCommand (that returns no resultset) against the specified SqlTransaction
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             int result = ExecuteNonQuery(trans, CommandType.StoredProcedure, "GetOrders", new SqlParameter("@prodid", 24));
            </remarks>
            <param name="transaction">A valid SqlTransaction</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandParameters">An array of SqlParamters used to execute the command</param>
            <returns>An int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:DragonSource.Utils.SqlHelper.ExecuteNonQuery(System.Data.SqlClient.SqlTransaction,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns no resultset) against the specified 
            SqlTransaction using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             int result = ExecuteNonQuery(conn, trans, "PublishOrders", 24, 36);
            </remarks>
            <param name="transaction">A valid SqlTransaction</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
            <returns>An int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:DragonSource.Utils.SqlHelper.ExecuteDataset(System.String,System.Data.CommandType,System.String)">
            <summary>
            Execute a SqlCommand (that returns a resultset and takes no parameters) against the database specified in 
            the connection string. 
            </summary>
            <remarks>
            e.g.:  
             DataSet ds = ExecuteDataset(connString, CommandType.StoredProcedure, "GetOrders");
            </remarks>
            <param name="connectionString">A valid connection string for a SqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <returns>A dataset containing the resultset generated by the command</returns>
        </member>
        <member name="M:DragonSource.Utils.SqlHelper.ExecuteDataset(System.String,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Execute a SqlCommand (that returns a resultset) against the database specified in the connection string 
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             DataSet ds = ExecuteDataset(connString, CommandType.StoredProcedure, "GetOrders", new SqlParameter("@prodid", 24));
            </remarks>
            <param name="connectionString">A valid connection string for a SqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandParameters">An array of SqlParamters used to execute the command</param>
            <returns>A dataset containing the resultset generated by the command</returns>
        </member>
        <member name="M:DragonSource.Utils.SqlHelper.ExecuteDataset(System.String,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a resultset) against the database specified in 
            the connection string using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             DataSet ds = ExecuteDataset(connString, "GetOrders", 24, 36);
            </remarks>
            <param name="connectionString">A valid connection string for a SqlConnection</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
            <returns>A dataset containing the resultset generated by the command</returns>
        </member>
        <member name="M:DragonSource.Utils.SqlHelper.ExecuteDataset(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String)">
            <summary>
            Execute a SqlCommand (that returns a resultset and takes no parameters) against the provided SqlConnection. 
            </summary>
            <remarks>
            e.g.:  
             DataSet ds = ExecuteDataset(conn, CommandType.StoredProcedure, "GetOrders");
            </remarks>
            <param name="connection">A valid SqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <returns>A dataset containing the resultset generated by the command</returns>
        </member>
        <member name="M:DragonSource.Utils.SqlHelper.ExecuteDataset(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Execute a SqlCommand (that returns a resultset) against the specified SqlConnection 
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             DataSet ds = ExecuteDataset(conn, CommandType.StoredProcedure, "GetOrders", new SqlParameter("@prodid", 24));
            </remarks>
            <param name="connection">A valid SqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandParameters">An array of SqlParamters used to execute the command</param>
            <returns>A dataset containing the resultset generated by the command</returns>
        </member>
        <member name="M:DragonSource.Utils.SqlHelper.ExecuteDataset(System.Data.SqlClient.SqlConnection,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a resultset) against the specified SqlConnection 
            using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             DataSet ds = ExecuteDataset(conn, "GetOrders", 24, 36);
            </remarks>
            <param name="connection">A valid SqlConnection</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
            <returns>A dataset containing the resultset generated by the command</returns>
        </member>
        <member name="M:DragonSource.Utils.SqlHelper.ExecuteDataset(System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String)">
            <summary>
            Execute a SqlCommand (that returns a resultset and takes no parameters) against the provided SqlTransaction. 
            </summary>
            <remarks>
            e.g.:  
             DataSet ds = ExecuteDataset(trans, CommandType.StoredProcedure, "GetOrders");
            </remarks>
            <param name="transaction">A valid SqlTransaction</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <returns>A dataset containing the resultset generated by the command</returns>
        </member>
        <member name="M:DragonSource.Utils.SqlHelper.ExecuteDataset(System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Execute a SqlCommand (that returns a resultset) against the specified SqlTransaction
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             DataSet ds = ExecuteDataset(trans, CommandType.StoredProcedure, "GetOrders", new SqlParameter("@prodid", 24));
            </remarks>
            <param name="transaction">A valid SqlTransaction</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandParameters">An array of SqlParamters used to execute the command</param>
            <returns>A dataset containing the resultset generated by the command</returns>
        </member>
        <member name="M:DragonSource.Utils.SqlHelper.ExecuteDataset(System.Data.SqlClient.SqlTransaction,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a resultset) against the specified 
            SqlTransaction using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             DataSet ds = ExecuteDataset(trans, "GetOrders", 24, 36);
            </remarks>
            <param name="transaction">A valid SqlTransaction</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
            <returns>A dataset containing the resultset generated by the command</returns>
        </member>
        <member name="M:DragonSource.Utils.SqlHelper.ExecuteReader(System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[],DragonSource.Utils.SqlHelper.SqlConnectionOwnership)">
            <summary>
            Create and prepare a SqlCommand, and call ExecuteReader with the appropriate CommandBehavior.
            </summary>
            <remarks>
            If we created and opened the connection, we want the connection to be closed when the DataReader is closed.
            
            If the caller provided the connection, we want to leave it to them to manage.
            </remarks>
            <param name="connection">A valid SqlConnection, on which to execute this command</param>
            <param name="transaction">A valid SqlTransaction, or 'null'</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandParameters">An array of SqlParameters to be associated with the command or 'null' if no parameters are required</param>
            <param name="connectionOwnership">Indicates whether the connection parameter was provided by the caller, or created by SqlHelper</param>
            <returns>SqlDataReader containing the results of the command</returns>
        </member>
        <member name="M:DragonSource.Utils.SqlHelper.ExecuteReader(System.String,System.Data.CommandType,System.String)">
            <summary>
            Execute a SqlCommand (that returns a resultset and takes no parameters) against the database specified in 
            the connection string. 
            </summary>
            <remarks>
            e.g.:  
             SqlDataReader dr = ExecuteReader(connString, CommandType.StoredProcedure, "GetOrders");
            </remarks>
            <param name="connectionString">A valid connection string for a SqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <returns>A SqlDataReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:DragonSource.Utils.SqlHelper.ExecuteReader(System.String,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Execute a SqlCommand (that returns a resultset) against the database specified in the connection string 
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             SqlDataReader dr = ExecuteReader(connString, CommandType.StoredProcedure, "GetOrders", new SqlParameter("@prodid", 24));
            </remarks>
            <param name="connectionString">A valid connection string for a SqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandParameters">An array of SqlParamters used to execute the command</param>
            <returns>A SqlDataReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:DragonSource.Utils.SqlHelper.ExecuteReader(System.String,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a resultset) against the database specified in 
            the connection string using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             SqlDataReader dr = ExecuteReader(connString, "GetOrders", 24, 36);
            </remarks>
            <param name="connectionString">A valid connection string for a SqlConnection</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
            <returns>A SqlDataReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:DragonSource.Utils.SqlHelper.ExecuteReader(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String)">
            <summary>
            Execute a SqlCommand (that returns a resultset and takes no parameters) against the provided SqlConnection. 
            </summary>
            <remarks>
            e.g.:  
             SqlDataReader dr = ExecuteReader(conn, CommandType.StoredProcedure, "GetOrders");
            </remarks>
            <param name="connection">A valid SqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <returns>A SqlDataReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:DragonSource.Utils.SqlHelper.ExecuteReader(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Execute a SqlCommand (that returns a resultset) against the specified SqlConnection 
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             SqlDataReader dr = ExecuteReader(conn, CommandType.StoredProcedure, "GetOrders", new SqlParameter("@prodid", 24));
            </remarks>
            <param name="connection">A valid SqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandParameters">An array of SqlParamters used to execute the command</param>
            <returns>A SqlDataReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:DragonSource.Utils.SqlHelper.ExecuteReader(System.Data.SqlClient.SqlConnection,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a resultset) against the specified SqlConnection 
            using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             SqlDataReader dr = ExecuteReader(conn, "GetOrders", 24, 36);
            </remarks>
            <param name="connection">A valid SqlConnection</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
            <returns>A SqlDataReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:DragonSource.Utils.SqlHelper.ExecuteReader(System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String)">
            <summary>
            Execute a SqlCommand (that returns a resultset and takes no parameters) against the provided SqlTransaction. 
            </summary>
            <remarks>
            e.g.:  
             SqlDataReader dr = ExecuteReader(trans, CommandType.StoredProcedure, "GetOrders");
            </remarks>
            <param name="transaction">A valid SqlTransaction</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <returns>A SqlDataReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:DragonSource.Utils.SqlHelper.ExecuteReader(System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Execute a SqlCommand (that returns a resultset) against the specified SqlTransaction
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
              SqlDataReader dr = ExecuteReader(trans, CommandType.StoredProcedure, "GetOrders", new SqlParameter("@prodid", 24));
            </remarks>
            <param name="transaction">A valid SqlTransaction</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandParameters">An array of SqlParamters used to execute the command</param>
            <returns>A SqlDataReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:DragonSource.Utils.SqlHelper.ExecuteReader(System.Data.SqlClient.SqlTransaction,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a resultset) against the specified
            SqlTransaction using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             SqlDataReader dr = ExecuteReader(trans, "GetOrders", 24, 36);
            </remarks>
            <param name="transaction">A valid SqlTransaction</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
            <returns>A SqlDataReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:DragonSource.Utils.SqlHelper.ExecuteScalar(System.String,System.Data.CommandType,System.String)">
            <summary>
            Execute a SqlCommand (that returns a 1x1 resultset and takes no parameters) against the database specified in 
            the connection string. 
            </summary>
            <remarks>
            e.g.:  
             int orderCount = (int)ExecuteScalar(connString, CommandType.StoredProcedure, "GetOrderCount");
            </remarks>
            <param name="connectionString">A valid connection string for a SqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <returns>An object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="M:DragonSource.Utils.SqlHelper.ExecuteScalar(System.String,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Execute a SqlCommand (that returns a 1x1 resultset) against the database specified in the connection string 
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             int orderCount = (int)ExecuteScalar(connString, CommandType.StoredProcedure, "GetOrderCount", new SqlParameter("@prodid", 24));
            </remarks>
            <param name="connectionString">A valid connection string for a SqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandParameters">An array of SqlParamters used to execute the command</param>
            <returns>An object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="M:DragonSource.Utils.SqlHelper.ExecuteScalar(System.String,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a 1x1 resultset) against the database specified in 
            the connection string using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             int orderCount = (int)ExecuteScalar(connString, "GetOrderCount", 24, 36);
            </remarks>
            <param name="connectionString">A valid connection string for a SqlConnection</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
            <returns>An object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="M:DragonSource.Utils.SqlHelper.ExecuteScalar(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String)">
            <summary>
            Execute a SqlCommand (that returns a 1x1 resultset and takes no parameters) against the provided SqlConnection. 
            </summary>
            <remarks>
            e.g.:  
             int orderCount = (int)ExecuteScalar(conn, CommandType.StoredProcedure, "GetOrderCount");
            </remarks>
            <param name="connection">A valid SqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <returns>An object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="M:DragonSource.Utils.SqlHelper.ExecuteScalar(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Execute a SqlCommand (that returns a 1x1 resultset) against the specified SqlConnection 
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             int orderCount = (int)ExecuteScalar(conn, CommandType.StoredProcedure, "GetOrderCount", new SqlParameter("@prodid", 24));
            </remarks>
            <param name="connection">A valid SqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandParameters">An array of SqlParamters used to execute the command</param>
            <returns>An object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="M:DragonSource.Utils.SqlHelper.ExecuteScalar(System.Data.SqlClient.SqlConnection,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a 1x1 resultset) against the specified SqlConnection 
            using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             int orderCount = (int)ExecuteScalar(conn, "GetOrderCount", 24, 36);
            </remarks>
            <param name="connection">A valid SqlConnection</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
            <returns>An object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="M:DragonSource.Utils.SqlHelper.ExecuteScalar(System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String)">
            <summary>
            Execute a SqlCommand (that returns a 1x1 resultset and takes no parameters) against the provided SqlTransaction. 
            </summary>
            <remarks>
            e.g.:  
             int orderCount = (int)ExecuteScalar(trans, CommandType.StoredProcedure, "GetOrderCount");
            </remarks>
            <param name="transaction">A valid SqlTransaction</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <returns>An object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="M:DragonSource.Utils.SqlHelper.ExecuteScalar(System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Execute a SqlCommand (that returns a 1x1 resultset) against the specified SqlTransaction
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             int orderCount = (int)ExecuteScalar(trans, CommandType.StoredProcedure, "GetOrderCount", new SqlParameter("@prodid", 24));
            </remarks>
            <param name="transaction">A valid SqlTransaction</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandParameters">An array of SqlParamters used to execute the command</param>
            <returns>An object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="M:DragonSource.Utils.SqlHelper.ExecuteScalar(System.Data.SqlClient.SqlTransaction,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a 1x1 resultset) against the specified
            SqlTransaction using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             int orderCount = (int)ExecuteScalar(trans, "GetOrderCount", 24, 36);
            </remarks>
            <param name="transaction">A valid SqlTransaction</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
            <returns>An object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="M:DragonSource.Utils.SqlHelper.ExecuteXmlReader(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String)">
            <summary>
            Execute a SqlCommand (that returns a resultset and takes no parameters) against the provided SqlConnection. 
            </summary>
            <remarks>
            e.g.:  
             XmlReader r = ExecuteXmlReader(conn, CommandType.StoredProcedure, "GetOrders");
            </remarks>
            <param name="connection">A valid SqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command using "FOR XML AUTO"</param>
            <returns>An XmlReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:DragonSource.Utils.SqlHelper.ExecuteXmlReader(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Execute a SqlCommand (that returns a resultset) against the specified SqlConnection 
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             XmlReader r = ExecuteXmlReader(conn, CommandType.StoredProcedure, "GetOrders", new SqlParameter("@prodid", 24));
            </remarks>
            <param name="connection">A valid SqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command using "FOR XML AUTO"</param>
            <param name="commandParameters">An array of SqlParamters used to execute the command</param>
            <returns>An XmlReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:DragonSource.Utils.SqlHelper.ExecuteXmlReader(System.Data.SqlClient.SqlConnection,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a resultset) against the specified SqlConnection 
            using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             XmlReader r = ExecuteXmlReader(conn, "GetOrders", 24, 36);
            </remarks>
            <param name="connection">A valid SqlConnection</param>
            <param name="spName">The name of the stored procedure using "FOR XML AUTO"</param>
            <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
            <returns>An XmlReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:DragonSource.Utils.SqlHelper.ExecuteXmlReader(System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String)">
            <summary>
            Execute a SqlCommand (that returns a resultset and takes no parameters) against the provided SqlTransaction. 
            </summary>
            <remarks>
            e.g.:  
             XmlReader r = ExecuteXmlReader(trans, CommandType.StoredProcedure, "GetOrders");
            </remarks>
            <param name="transaction">A valid SqlTransaction</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command using "FOR XML AUTO"</param>
            <returns>An XmlReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:DragonSource.Utils.SqlHelper.ExecuteXmlReader(System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Execute a SqlCommand (that returns a resultset) against the specified SqlTransaction
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             XmlReader r = ExecuteXmlReader(trans, CommandType.StoredProcedure, "GetOrders", new SqlParameter("@prodid", 24));
            </remarks>
            <param name="transaction">A valid SqlTransaction</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command using "FOR XML AUTO"</param>
            <param name="commandParameters">An array of SqlParamters used to execute the command</param>
            <returns>An XmlReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:DragonSource.Utils.SqlHelper.ExecuteXmlReader(System.Data.SqlClient.SqlTransaction,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a resultset) against the specified 
            SqlTransaction using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             XmlReader r = ExecuteXmlReader(trans, "GetOrders", 24, 36);
            </remarks>
            <param name="transaction">A valid SqlTransaction</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
            <returns>A dataset containing the resultset generated by the command</returns>
        </member>
        <member name="M:DragonSource.Utils.SqlHelper.FillDataset(System.String,System.Data.CommandType,System.String,System.Data.DataSet,System.String[])">
            <summary>
            Execute a SqlCommand (that returns a resultset and takes no parameters) against the database specified in 
            the connection string. 
            </summary>
            <remarks>
            e.g.:  
             FillDataset(connString, CommandType.StoredProcedure, "GetOrders", ds, new string[] {"orders"});
            </remarks>
            <param name="connectionString">A valid connection string for a SqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="dataSet">A dataset wich will contain the resultset generated by the command</param>
            <param name="tableNames">This array will be used to create table mappings allowing the DataTables to be referenced
            by a user defined name (probably the actual table name)</param>
        </member>
        <member name="M:DragonSource.Utils.SqlHelper.FillDataset(System.String,System.Data.CommandType,System.String,System.Data.DataSet,System.String[],System.Data.SqlClient.SqlParameter[])">
            <summary>
            Execute a SqlCommand (that returns a resultset) against the database specified in the connection string 
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             FillDataset(connString, CommandType.StoredProcedure, "GetOrders", ds, new string[] {"orders"}, new SqlParameter("@prodid", 24));
            </remarks>
            <param name="connectionString">A valid connection string for a SqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandParameters">An array of SqlParamters used to execute the command</param>
            <param name="dataSet">A dataset wich will contain the resultset generated by the command</param>
            <param name="tableNames">This array will be used to create table mappings allowing the DataTables to be referenced
            by a user defined name (probably the actual table name)
            </param>
        </member>
        <member name="M:DragonSource.Utils.SqlHelper.FillDataset(System.String,System.String,System.Data.DataSet,System.String[],System.Object[])">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a resultset) against the database specified in 
            the connection string using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             FillDataset(connString, CommandType.StoredProcedure, "GetOrders", ds, new string[] {"orders"}, 24);
            </remarks>
            <param name="connectionString">A valid connection string for a SqlConnection</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="dataSet">A dataset wich will contain the resultset generated by the command</param>
            <param name="tableNames">This array will be used to create table mappings allowing the DataTables to be referenced
            by a user defined name (probably the actual table name)
            </param>    
            <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
        </member>
        <member name="M:DragonSource.Utils.SqlHelper.FillDataset(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String,System.Data.DataSet,System.String[])">
            <summary>
            Execute a SqlCommand (that returns a resultset and takes no parameters) against the provided SqlConnection. 
            </summary>
            <remarks>
            e.g.:  
             FillDataset(conn, CommandType.StoredProcedure, "GetOrders", ds, new string[] {"orders"});
            </remarks>
            <param name="connection">A valid SqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="dataSet">A dataset wich will contain the resultset generated by the command</param>
            <param name="tableNames">This array will be used to create table mappings allowing the DataTables to be referenced
            by a user defined name (probably the actual table name)
            </param>    
        </member>
        <member name="M:DragonSource.Utils.SqlHelper.FillDataset(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String,System.Data.DataSet,System.String[],System.Data.SqlClient.SqlParameter[])">
            <summary>
            Execute a SqlCommand (that returns a resultset) against the specified SqlConnection 
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             FillDataset(conn, CommandType.StoredProcedure, "GetOrders", ds, new string[] {"orders"}, new SqlParameter("@prodid", 24));
            </remarks>
            <param name="connection">A valid SqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="dataSet">A dataset wich will contain the resultset generated by the command</param>
            <param name="tableNames">This array will be used to create table mappings allowing the DataTables to be referenced
            by a user defined name (probably the actual table name)
            </param>
            <param name="commandParameters">An array of SqlParamters used to execute the command</param>
        </member>
        <member name="M:DragonSource.Utils.SqlHelper.FillDataset(System.Data.SqlClient.SqlConnection,System.String,System.Data.DataSet,System.String[],System.Object[])">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a resultset) against the specified SqlConnection 
            using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             FillDataset(conn, "GetOrders", ds, new string[] {"orders"}, 24, 36);
            </remarks>
            <param name="connection">A valid SqlConnection</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="dataSet">A dataset wich will contain the resultset generated by the command</param>
            <param name="tableNames">This array will be used to create table mappings allowing the DataTables to be referenced
            by a user defined name (probably the actual table name)
            </param>
            <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
        </member>
        <member name="M:DragonSource.Utils.SqlHelper.FillDataset(System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String,System.Data.DataSet,System.String[])">
            <summary>
            Execute a SqlCommand (that returns a resultset and takes no parameters) against the provided SqlTransaction. 
            </summary>
            <remarks>
            e.g.:  
             FillDataset(trans, CommandType.StoredProcedure, "GetOrders", ds, new string[] {"orders"});
            </remarks>
            <param name="transaction">A valid SqlTransaction</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="dataSet">A dataset wich will contain the resultset generated by the command</param>
            <param name="tableNames">This array will be used to create table mappings allowing the DataTables to be referenced
            by a user defined name (probably the actual table name)
            </param>
        </member>
        <member name="M:DragonSource.Utils.SqlHelper.FillDataset(System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String,System.Data.DataSet,System.String[],System.Data.SqlClient.SqlParameter[])">
            <summary>
            Execute a SqlCommand (that returns a resultset) against the specified SqlTransaction
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             FillDataset(trans, CommandType.StoredProcedure, "GetOrders", ds, new string[] {"orders"}, new SqlParameter("@prodid", 24));
            </remarks>
            <param name="transaction">A valid SqlTransaction</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="dataSet">A dataset wich will contain the resultset generated by the command</param>
            <param name="tableNames">This array will be used to create table mappings allowing the DataTables to be referenced
            by a user defined name (probably the actual table name)
            </param>
            <param name="commandParameters">An array of SqlParamters used to execute the command</param>
        </member>
        <member name="M:DragonSource.Utils.SqlHelper.FillDataset(System.Data.SqlClient.SqlTransaction,System.String,System.Data.DataSet,System.String[],System.Object[])">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a resultset) against the specified 
            SqlTransaction using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             FillDataset(trans, "GetOrders", ds, new string[]{"orders"}, 24, 36);
            </remarks>
            <param name="transaction">A valid SqlTransaction</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="dataSet">A dataset wich will contain the resultset generated by the command</param>
            <param name="tableNames">This array will be used to create table mappings allowing the DataTables to be referenced
            by a user defined name (probably the actual table name)
            </param>
            <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
        </member>
        <member name="M:DragonSource.Utils.SqlHelper.FillDataset(System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String,System.Data.DataSet,System.String[],System.Data.SqlClient.SqlParameter[])">
            <summary>
            Private helper method that execute a SqlCommand (that returns a resultset) against the specified SqlTransaction and SqlConnection
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             FillDataset(conn, trans, CommandType.StoredProcedure, "GetOrders", ds, new string[] {"orders"}, new SqlParameter("@prodid", 24));
            </remarks>
            <param name="connection">A valid SqlConnection</param>
            <param name="transaction">A valid SqlTransaction</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="dataSet">A dataset wich will contain the resultset generated by the command</param>
            <param name="tableNames">This array will be used to create table mappings allowing the DataTables to be referenced
            by a user defined name (probably the actual table name)
            </param>
            <param name="commandParameters">An array of SqlParamters used to execute the command</param>
        </member>
        <member name="M:DragonSource.Utils.SqlHelper.UpdateDataset(System.Data.SqlClient.SqlCommand,System.Data.SqlClient.SqlCommand,System.Data.SqlClient.SqlCommand,System.Data.DataSet,System.String)">
            <summary>
            Executes the respective command for each inserted, updated, or deleted row in the DataSet.
            </summary>
            <remarks>
            e.g.:  
             UpdateDataset(conn, insertCommand, deleteCommand, updateCommand, dataSet, "Order");
            </remarks>
            <param name="insertCommand">A valid transact-SQL statement or stored procedure to insert new records into the data source</param>
            <param name="deleteCommand">A valid transact-SQL statement or stored procedure to delete records from the data source</param>
            <param name="updateCommand">A valid transact-SQL statement or stored procedure used to update records in the data source</param>
            <param name="dataSet">The DataSet used to update the data source</param>
            <param name="tableName">The DataTable used to update the data source.</param>
        </member>
        <member name="M:DragonSource.Utils.SqlHelper.CreateCommand(System.Data.SqlClient.SqlConnection,System.String,System.String[])">
            <summary>
            Simplify the creation of a Sql command object by allowing
            a stored procedure and optional parameters to be provided
            </summary>
            <remarks>
            e.g.:  
             SqlCommand command = CreateCommand(conn, "AddCustomer", "CustomerID", "CustomerName");
            </remarks>
            <param name="connection">A valid SqlConnection object</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="sourceColumns">An array of string to be assigned as the source columns of the stored procedure parameters</param>
            <returns>A valid SqlCommand object</returns>
        </member>
        <member name="M:DragonSource.Utils.SqlHelper.CreateConnection(System.String)">
            <summary>
            CreateConnection
            </summary>
            <param name="connectionString"></param>
            <returns></returns>
        </member>
        <member name="M:DragonSource.Utils.SqlHelper.ExecuteNonQueryTypedParams(System.String,System.String,System.Data.DataRow)">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns no resultset) against the database specified in 
            the connection string using the dataRow column values as the stored procedure's parameters values.
            This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on row values.
            </summary>
            <param name="connectionString">A valid connection string for a SqlConnection</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="dataRow">The dataRow used to hold the stored procedure's parameter values.</param>
            <returns>An int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:DragonSource.Utils.SqlHelper.ExecuteNonQueryTypedParams(System.Data.SqlClient.SqlConnection,System.String,System.Data.DataRow)">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns no resultset) against the specified SqlConnection 
            using the dataRow column values as the stored procedure's parameters values.  
            This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on row values.
            </summary>
            <param name="connection">A valid SqlConnection object</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="dataRow">The dataRow used to hold the stored procedure's parameter values.</param>
            <returns>An int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:DragonSource.Utils.SqlHelper.ExecuteNonQueryTypedParams(System.Data.SqlClient.SqlTransaction,System.String,System.Data.DataRow)">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns no resultset) against the specified
            SqlTransaction using the dataRow column values as the stored procedure's parameters values.
            This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on row values.
            </summary>
            <param name="transaction">A valid SqlTransaction object</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="dataRow">The dataRow used to hold the stored procedure's parameter values.</param>
            <returns>An int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:DragonSource.Utils.SqlHelper.ExecuteDatasetTypedParams(System.String,System.String,System.Data.DataRow)">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a resultset) against the database specified in 
            the connection string using the dataRow column values as the stored procedure's parameters values.
            This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on row values.
            </summary>
            <param name="connectionString">A valid connection string for a SqlConnection</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="dataRow">The dataRow used to hold the stored procedure's parameter values.</param>
            <returns>A dataset containing the resultset generated by the command</returns>
        </member>
        <member name="M:DragonSource.Utils.SqlHelper.ExecuteDatasetTypedParams(System.Data.SqlClient.SqlConnection,System.String,System.Data.DataRow)">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a resultset) against the specified SqlConnection 
            using the dataRow column values as the store procedure's parameters values.
            This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on row values.
            </summary>
            <param name="connection">A valid SqlConnection object</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="dataRow">The dataRow used to hold the stored procedure's parameter values.</param>
            <returns>A dataset containing the resultset generated by the command</returns>
        </member>
        <member name="M:DragonSource.Utils.SqlHelper.ExecuteDatasetTypedParams(System.Data.SqlClient.SqlTransaction,System.String,System.Data.DataRow)">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a resultset) against the specified SqlTransaction 
            using the dataRow column values as the stored procedure's parameters values.
            This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on row values.
            </summary>
            <param name="transaction">A valid SqlTransaction object</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="dataRow">The dataRow used to hold the stored procedure's parameter values.</param>
            <returns>A dataset containing the resultset generated by the command</returns>
        </member>
        <member name="M:DragonSource.Utils.SqlHelper.ExecuteReaderTypedParams(System.String,System.String,System.Data.DataRow)">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a resultset) against the database specified in 
            the connection string using the dataRow column values as the stored procedure's parameters values.
            This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <param name="connectionString">A valid connection string for a SqlConnection</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="dataRow">The dataRow used to hold the stored procedure's parameter values.</param>
            <returns>A SqlDataReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:DragonSource.Utils.SqlHelper.ExecuteReaderTypedParams(System.Data.SqlClient.SqlConnection,System.String,System.Data.DataRow)">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a resultset) against the specified SqlConnection 
            using the dataRow column values as the stored procedure's parameters values.
            This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <param name="connection">A valid SqlConnection object</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="dataRow">The dataRow used to hold the stored procedure's parameter values.</param>
            <returns>A SqlDataReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:DragonSource.Utils.SqlHelper.ExecuteReaderTypedParams(System.Data.SqlClient.SqlTransaction,System.String,System.Data.DataRow)">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a resultset) against the specified SqlTransaction 
            using the dataRow column values as the stored procedure's parameters values.
            This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <param name="transaction">A valid SqlTransaction object</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="dataRow">The dataRow used to hold the stored procedure's parameter values.</param>
            <returns>A SqlDataReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:DragonSource.Utils.SqlHelper.ExecuteScalarTypedParams(System.String,System.String,System.Data.DataRow)">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a 1x1 resultset) against the database specified in 
            the connection string using the dataRow column values as the stored procedure's parameters values.
            This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <param name="connectionString">A valid connection string for a SqlConnection</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="dataRow">The dataRow used to hold the stored procedure's parameter values.</param>
            <returns>An object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="M:DragonSource.Utils.SqlHelper.ExecuteScalarTypedParams(System.Data.SqlClient.SqlConnection,System.String,System.Data.DataRow)">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a 1x1 resultset) against the specified SqlConnection 
            using the dataRow column values as the stored procedure's parameters values.
            This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <param name="connection">A valid SqlConnection object</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="dataRow">The dataRow used to hold the stored procedure's parameter values.</param>
            <returns>An object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="M:DragonSource.Utils.SqlHelper.ExecuteScalarTypedParams(System.Data.SqlClient.SqlTransaction,System.String,System.Data.DataRow)">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a 1x1 resultset) against the specified SqlTransaction
            using the dataRow column values as the stored procedure's parameters values.
            This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <param name="transaction">A valid SqlTransaction object</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="dataRow">The dataRow used to hold the stored procedure's parameter values.</param>
            <returns>An object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="M:DragonSource.Utils.SqlHelper.ExecuteXmlReaderTypedParams(System.Data.SqlClient.SqlConnection,System.String,System.Data.DataRow)">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a resultset) against the specified SqlConnection 
            using the dataRow column values as the stored procedure's parameters values.
            This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <param name="connection">A valid SqlConnection object</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="dataRow">The dataRow used to hold the stored procedure's parameter values.</param>
            <returns>An XmlReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:DragonSource.Utils.SqlHelper.ExecuteXmlReaderTypedParams(System.Data.SqlClient.SqlTransaction,System.String,System.Data.DataRow)">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a resultset) against the specified SqlTransaction 
            using the dataRow column values as the stored procedure's parameters values.
            This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <param name="transaction">A valid SqlTransaction object</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="dataRow">The dataRow used to hold the stored procedure's parameter values.</param>
            <returns>An XmlReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:DragonSource.Utils.SqlHelper.CacheParameters(System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            add parameter array to the cache
            </summary>
            <param name="cacheKey">Key to the parameter cache</param>
            <param name="cmdParms">an array of SqlParamters to be cached</param>
        </member>
        <member name="M:DragonSource.Utils.SqlHelper.GetCachedParameters(System.String)">
            <summary>
            Retrieve cached parameters
            </summary>
            <param name="cacheKey">key used to lookup parameters</param>
            <returns>Cached SqlParamters array</returns>
        </member>
        <member name="M:DragonSource.Utils.SqlHelper.Fill(System.Data.IDataReader,System.Data.DataSet,System.String,System.Int32,System.Int32)">
            <summary>
            Fills a typed DataSet using the DataReader's current result. This method 
            allows paginated access to the database.
            </summary>
            <param name="dataReader">The DataReader used to fetch the values.</param>
            <param name="dataSet">The DataSet used to store the values.</param>
            <param name="tableName">The name of the DataSet table used to add the 
            DataReader records.</param>
            <param name="from">The quantity of records skipped before placing
            values on the DataReader on the DataSet.</param>
            <param name="count">The maximum quantity of records alloed to fill on the
            DataSet.</param>
        </member>
        <member name="T:DragonSource.Utils.SqlHelper.SqlConnectionOwnership">
            <summary>
            This enum is used to indicate whether the connection was provided by the caller, or created by SqlHelper, so that
            we can set the appropriate CommandBehavior when calling ExecuteReader()
            </summary>
        </member>
        <member name="F:DragonSource.Utils.SqlHelper.SqlConnectionOwnership.Internal">
            <summary>Connection is owned and managed by SqlHelper</summary>
        </member>
        <member name="F:DragonSource.Utils.SqlHelper.SqlConnectionOwnership.External">
            <summary>Connection is owned and managed by the caller</summary>
        </member>
        <member name="T:DragonSource.Utils.SqlHelperParameterCache">
            <summary>
            SqlHelperParameterCache provides functions to leverage a static cache of procedure parameters, and the
            ability to discover parameters for stored procedures at run-time.
            </summary>
        </member>
        <member name="M:DragonSource.Utils.SqlHelperParameterCache.DiscoverSpParameterSet(System.Data.SqlClient.SqlConnection,System.String,System.Boolean)">
            <summary>
            Resolve at run time the appropriate set of SqlParameters for a stored procedure
            </summary>
            <param name="connection">A valid SqlConnection object</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="includeReturnValueParameter">Whether or not to include their return value parameter</param>
            <returns>The parameter array discovered.</returns>
        </member>
        <member name="M:DragonSource.Utils.SqlHelperParameterCache.CloneParameters(System.Data.SqlClient.SqlParameter[])">
            <summary>
            Deep copy of cached SqlParameter array
            </summary>
            <param name="originalParameters"></param>
            <returns></returns>
        </member>
        <member name="M:DragonSource.Utils.SqlHelperParameterCache.CacheParameterSet(System.String,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Add parameter array to the cache
            </summary>
            <param name="connectionString">A valid connection string for a SqlConnection</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandParameters">An array of SqlParamters to be cached</param>
        </member>
        <member name="M:DragonSource.Utils.SqlHelperParameterCache.GetCachedParameterSet(System.String,System.String)">
            <summary>
            Retrieve a parameter array from the cache
            </summary>
            <param name="connectionString">A valid connection string for a SqlConnection</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <returns>An array of SqlParamters</returns>
        </member>
        <member name="M:DragonSource.Utils.SqlHelperParameterCache.GetSpParameterSet(System.String,System.String)">
            <summary>
            Retrieves the set of SqlParameters appropriate for the stored procedure
            </summary>
            <remarks>
            This method will query the database for this information, and then store it in a cache for future requests.
            </remarks>
            <param name="connectionString">A valid connection string for a SqlConnection</param>
            <param name="spName">The name of the stored procedure</param>
            <returns>An array of SqlParameters</returns>
        </member>
        <member name="M:DragonSource.Utils.SqlHelperParameterCache.GetSpParameterSet(System.String,System.String,System.Boolean)">
            <summary>
            Retrieves the set of SqlParameters appropriate for the stored procedure
            </summary>
            <remarks>
            This method will query the database for this information, and then store it in a cache for future requests.
            </remarks>
            <param name="connectionString">A valid connection string for a SqlConnection</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="includeReturnValueParameter">A bool value indicating whether the return value parameter should be included in the results</param>
            <returns>An array of SqlParameters</returns>
        </member>
        <member name="M:DragonSource.Utils.SqlHelperParameterCache.GetSpParameterSet(System.Data.SqlClient.SqlConnection,System.String)">
            <summary>
            Retrieves the set of SqlParameters appropriate for the stored procedure
            </summary>
            <remarks>
            This method will query the database for this information, and then store it in a cache for future requests.
            </remarks>
            <param name="connection">A valid SqlConnection object</param>
            <param name="spName">The name of the stored procedure</param>
            <returns>An array of SqlParameters</returns>
        </member>
        <member name="M:DragonSource.Utils.SqlHelperParameterCache.GetSpParameterSet(System.Data.SqlClient.SqlConnection,System.String,System.Boolean)">
            <summary>
            Retrieves the set of SqlParameters appropriate for the stored procedure
            </summary>
            <remarks>
            This method will query the database for this information, and then store it in a cache for future requests.
            </remarks>
            <param name="connection">A valid SqlConnection object</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="includeReturnValueParameter">A bool value indicating whether the return value parameter should be included in the results</param>
            <returns>An array of SqlParameters</returns>
        </member>
        <member name="M:DragonSource.Utils.SqlHelperParameterCache.GetSpParameterSetInternal(System.Data.SqlClient.SqlConnection,System.String,System.Boolean)">
            <summary>
            Retrieves the set of SqlParameters appropriate for the stored procedure
            </summary>
            <param name="connection">A valid SqlConnection object</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="includeReturnValueParameter">A bool value indicating whether the return value parameter should be included in the results</param>
            <returns>An array of SqlParameters</returns>
        </member>
        <member name="T:DragonSource.Utils.EntityBase">
            <summary>
            需要使用SqlHelper的实体需要继承此类
            </summary>
        </member>
        <member name="T:DragonUtility.Web.ExtensionMethods.IPAddressExtensions">
            <summary>
            Extensions related to IP addresses
            </summary>
        </member>
        <member name="M:DragonUtility.Web.ExtensionMethods.IPAddressExtensions.GetHostName(System.Net.IPAddress)">
            <summary>
            Gets the host name based off of an IP address
            </summary>
            <param name="IP">IP address</param>
            <returns>the host name associated with the IP</returns>
        </member>
        <member name="M:DragonUtility.Web.ExtensionMethods.IPAddressExtensions.GetHostName(System.String)">
            <summary>
            Gets the host name based off of an IP address
            </summary>
            <param name="IP">IP address</param>
            <returns>the host name associated with the IP</returns>
        </member>
        <member name="T:DragonUtility.QrCode.CodeDescriptor">
            <summary>
            二维码生成
            </summary>
        </member>
        <member name="F:DragonUtility.QrCode.CodeDescriptor.Ecl">
            <summary>
            容错比
            </summary>
        </member>
        <member name="F:DragonUtility.QrCode.CodeDescriptor.QuietZones">
            <summary>
            边缘
            </summary>
        </member>
        <member name="F:DragonUtility.QrCode.CodeDescriptor.ModuleSize">
            <summary>
            大小
            </summary>
        </member>
        <member name="F:DragonUtility.QrCode.CodeDescriptor.ServiceUrl">
            <summary>
            服务地址
            </summary>
        </member>
        <member name="M:DragonUtility.QrCode.CodeDescriptor.GenerateUrl(System.String,DragonUtility.QrCode.ErrorCorrectionLevel,System.String,DragonUtility.QrCode.QuietZoneModules,System.Int32)">
            <summary>
            生成链接
            </summary>
            <param name="server">服务地址</param>
            <param name="errorCorrection">容错比</param>
            <param name="content">内容</param>
            <param name="quietZone">边缘</param>
            <param name="moduleSize">大小</param>
            <returns></returns>
        </member>
        <member name="M:DragonUtility.QrCode.CodeDescriptor.GenerateUrl(System.String)">
            <summary>
            生成链接
            </summary>
            <param name="content">内容</param>
            <returns></returns>
        </member>
        <member name="T:DragonUtility.QrCode.ErrorCorrectionLevel">
            <summary>
            容错比
            </summary>
        </member>
        <member name="F:DragonUtility.QrCode.ErrorCorrectionLevel.L">
            <summary>
            7%
            </summary>
        </member>
        <member name="F:DragonUtility.QrCode.ErrorCorrectionLevel.M">
            <summary>
            15%
            </summary>
        </member>
        <member name="F:DragonUtility.QrCode.ErrorCorrectionLevel.Q">
            <summary>
            25%
            </summary>
        </member>
        <member name="F:DragonUtility.QrCode.ErrorCorrectionLevel.H">
            <summary>
            30%
            </summary>
        </member>
        <member name="T:DragonUtility.QrCode.QuietZoneModules">
            <summary>
            边缘
            </summary>
        </member>
        <member name="F:DragonUtility.QrCode.QuietZoneModules.Zero">
            <summary>
            0
            </summary>
        </member>
        <member name="F:DragonUtility.QrCode.QuietZoneModules.Two">
            <summary>
            2
            </summary>
        </member>
        <member name="F:DragonUtility.QrCode.QuietZoneModules.Four">
            <summary>
            4
            </summary>
        </member>
        <member name="T:DragonUtility.FileFormats.WinRar">
            <summary>
            Rar压缩
            </summary>
        </member>
        <member name="M:DragonUtility.FileFormats.WinRar.RunWinRAR(System.String,System.String)">
            <summary>
            运行WinRAR
            </summary>
            <param name="argCmd">命令</param>
            <param name="rarpath">要压缩或者解压缩的路径</param>
        </member>
        <member name="M:DragonUtility.FileFormats.WinRar.CompressRAR(System.String,System.String,System.String)">
            <summary>
            压缩目录或文件
            </summary>
            <param name="Path">待压缩的目录</param>
            <param name="rarPath">压缩后的Zip包目录</param>
            <param name="rarName">Zip包名称</param>
        </member>
        <member name="M:DragonUtility.FileFormats.WinRar.UnCompressRAR(System.String,System.String,System.String)">
            <summary>
            解压缩到指定文件夹
            </summary>
            <param name="Path">待解压目录</param>
            <param name="rarPath">Zip包目录</param>
            <param name="rarName">Zip包名称</param>
        </member>
        <member name="T:DragonUtility.Enums.E_MagazineType">
            <summary>
            期刊版本类型
            </summary>
        </member>
        <member name="F:DragonUtility.Enums.E_MagazineType.综合版">
            <summary>
            综合版 = 0
            </summary>
        </member>
        <member name="F:DragonUtility.Enums.E_MagazineType.纸刊版">
            <summary>
            纸刊版 = 1
            </summary>
        </member>
        <member name="F:DragonUtility.Enums.E_MagazineType.文本版">
            <summary>
            文本版 = 2
            </summary>
        </member>
        <member name="F:DragonUtility.Enums.E_MagazineType.原文原貌版">
            <summary>
            原文原貌版 = 3
            </summary>
        </member>
        <member name="F:DragonUtility.Enums.E_MagazineType.多媒体版">
            <summary>
            多媒体版 = 4
            </summary>
        </member>
        <member name="F:DragonUtility.Enums.E_MagazineType.TTS语音版">
            <summary>
            TTS语音版 = 5
            </summary>
        </member>
        <member name="F:DragonUtility.Enums.E_MagazineType.WAP">
            <summary>
            WAP = 6
            </summary>
        </member>
        <member name="F:DragonUtility.Enums.E_MagazineType.彩信">
            <summary>
            彩信 = 7
            </summary>
        </member>
        <member name="F:DragonUtility.Enums.E_MagazineType.手机3GV8">
            <summary>
            手机3GV8 = 8
            </summary>
        </member>
        <member name="F:DragonUtility.Enums.E_MagazineType.易博士">
            <summary>
            易博士 = 9
            </summary>
        </member>
        <member name="F:DragonUtility.Enums.E_MagazineType.汉王">
            <summary>
            汉王 = 10
            </summary>
        </member>
        <member name="F:DragonUtility.Enums.E_MagazineType.人声语音版">
            <summary>
            人声语音版 = 11
            </summary>
        </member>
        <member name="F:DragonUtility.Enums.E_MagazineType.清华紫光">
            <summary>
            
            </summary>
        </member>
        <member name="F:DragonUtility.Enums.E_MagazineType.百阅手机版">
            <summary>
            
            </summary>
        </member>
        <member name="F:DragonUtility.Enums.E_MagazineType.刊社IPad">
            <summary>
            
            </summary>
        </member>
        <member name="F:DragonUtility.Enums.E_MagazineType.龙源IPad">
            <summary>
            
            </summary>
        </member>
        <member name="F:DragonUtility.Enums.E_MagazineType.AndroidIPad">
            <summary>
            
            </summary>
        </member>
        <member name="F:DragonUtility.Enums.E_MagazineType.电视原貌版">
            <summary>
            
            </summary>
        </member>
        <member name="F:DragonUtility.Enums.E_MagazineType.龙源AndroidPad">
            <summary>
            
            </summary>
        </member>
        <member name="F:DragonUtility.Enums.E_MagazineType.触摸屏版">
            <summary>
            触摸屏版 = 19
            </summary>
        </member>
        <member name="F:DragonUtility.Enums.E_MagazineType.龙源EPUB版">
            <summary>
            龙源EPUB版 = 20
            </summary>
        </member>
        <member name="T:DragonUtility.Enums.E_MagazinePrice">
            <summary>
            期刊价格类型
            </summary>
        </member>
        <member name="F:DragonUtility.Enums.E_MagazinePrice.纸版价格">
            <summary>
            纸版价格 = 0
            </summary>
        </member>
        <member name="F:DragonUtility.Enums.E_MagazinePrice.龙源价格">
            <summary>
            龙源价格 = 1
            </summary>
        </member>
        <member name="F:DragonUtility.Enums.E_MagazinePrice.月价格">
            <summary>
            月价格 = 2
            </summary>
        </member>
        <member name="F:DragonUtility.Enums.E_MagazinePrice.季度价格">
            <summary>
            季度价格 = 3
            </summary>
        </member>
        <member name="F:DragonUtility.Enums.E_MagazinePrice.半年价格">
            <summary>
            半年价格 = 4
            </summary>
        </member>
        <member name="F:DragonUtility.Enums.E_MagazinePrice.全年价格">
            <summary>
            全年价格 = 5
            </summary>
        </member>
        <member name="F:DragonUtility.Enums.E_MagazinePrice.航出价格">
            <summary>
            航出价格 = 6
            </summary>
        </member>
        <member name="F:DragonUtility.Enums.E_MagazinePrice.邮递价格">
            <summary>
            邮递价格 = 7
            </summary>
        </member>
        <member name="F:DragonUtility.Enums.E_MagazinePrice.配送价格">
            <summary>
             配送价格 = 8
            </summary>
        </member>
        <member name="F:DragonUtility.Enums.E_MagazinePrice.海外价格">
            <summary>
            海外价格 = 9
            </summary>
        </member>
        <member name="F:DragonUtility.Enums.E_MagazinePrice.文章价格">
            <summary>
            文章价格 = 10
            </summary>
        </member>
        <member name="T:DragonUtility.Enums.E_MagazineOriginalCataLogType">
            <summary>
            原貌目录类型
            </summary>
        </member>
        <member name="F:DragonUtility.Enums.E_MagazineOriginalCataLogType.封面">
            <summary>
            
            </summary>
        </member>
        <member name="F:DragonUtility.Enums.E_MagazineOriginalCataLogType.广告">
            <summary>
            
            </summary>
        </member>
        <member name="F:DragonUtility.Enums.E_MagazineOriginalCataLogType.目录">
            <summary>
            
            </summary>
        </member>
        <member name="F:DragonUtility.Enums.E_MagazineOriginalCataLogType.栏目">
            <summary>
            
            </summary>
        </member>
        <member name="F:DragonUtility.Enums.E_MagazineOriginalCataLogType.封底">
            <summary>
            
            </summary>
        </member>
        <member name="T:DragonUtility.Enums.E_MagazineExtension">
            <summary>
            期刊扩展类型
            </summary>
        </member>
        <member name="F:DragonUtility.Enums.E_MagazineExtension.刊社网站">
            <summary>
            刊社网站 = 1
            </summary>
        </member>
        <member name="F:DragonUtility.Enums.E_MagazineExtension.刊社博客URL">
            <summary>
            刊社博客URL = 2
            </summary>
        </member>
        <member name="F:DragonUtility.Enums.E_MagazineExtension.刊社博客名">
            <summary>
            刊社博客名 = 3
            </summary>
        </member>
        <member name="F:DragonUtility.Enums.E_MagazineExtension.刊社论坛URL">
            <summary>
            刊社论坛URL = 4
            </summary>
        </member>
        <member name="F:DragonUtility.Enums.E_MagazineExtension.邮发编号">
            <summary>
            邮发编号 = 5
            </summary>
        </member>
        <member name="F:DragonUtility.Enums.E_MagazineExtension.子域名">
            <summary>
            子域名 = 6
            </summary>
        </member>
        <member name="F:DragonUtility.Enums.E_MagazineExtension.版式开本">
            <summary>
            版式开本 = 7
            </summary>
        </member>
        <member name="F:DragonUtility.Enums.E_MagazineExtension.纸版详细介绍">
            <summary>
            纸版详细介绍 = 8
            </summary>
        </member>
        <member name="F:DragonUtility.Enums.E_MagazineExtension.杂志LOGO">
            <summary>
            杂志LOGO = 9
            </summary>
        </member>
        <member name="F:DragonUtility.Enums.E_MagazineExtension.杂志封面">
            <summary>
            杂志封面 = 10
            </summary>
        </member>
        <member name="F:DragonUtility.Enums.E_MagazineExtension.配送方式">
            <summary>
            配送方式 = 11
            </summary>
        </member>
        <member name="F:DragonUtility.Enums.E_MagazineExtension.是否开通纸版">
            <summary>
            是否开通纸版 = 12
            </summary>
        </member>
        <member name="F:DragonUtility.Enums.E_MagazineExtension.出刊日期">
            <summary>
            出刊日期 = 13
            </summary>
        </member>
        <member name="F:DragonUtility.Enums.E_MagazineExtension.刊社站点登录名">
            <summary>
            刊社站点登录名 = 14
            </summary>
        </member>
        <member name="F:DragonUtility.Enums.E_MagazineExtension.刊社站点密码">
            <summary>
            刊社站点密码 = 15
            </summary>
        </member>
        <member name="F:DragonUtility.Enums.E_MagazineExtension.国际刊号">
            <summary>
            国际刊号 = 16
            </summary>
        </member>
        <member name="F:DragonUtility.Enums.E_MagazineExtension.联合征订编号">
            <summary>
            联合征订编号 = 17
            </summary>
        </member>
        <member name="F:DragonUtility.Enums.E_MagazineExtension.期刊级别">
            <summary>
            期刊级别 = 18
            </summary>
        </member>
        <member name="F:DragonUtility.Enums.E_MagazineExtension.BlogID">
            <summary>
            BlogID = 19
            </summary>
        </member>
        <member name="F:DragonUtility.Enums.E_MagazineExtension.是否接受投稿">
            <summary>
            是否接受投稿 = 20
            </summary>
        </member>
        <member name="F:DragonUtility.Enums.E_MagazineExtension.是否允许拷贝">
            <summary>
            是否允许拷贝 = 21
            </summary>
        </member>
        <member name="F:DragonUtility.Enums.E_MagazineExtension.国内发行编号">
            <summary>
            国内发行编号 = 22
            </summary>
        </member>
        <member name="F:DragonUtility.Enums.E_MagazineExtension.国外发行编号">
            <summary>
            国外发行编号 = 23
            </summary>
        </member>
        <member name="F:DragonUtility.Enums.E_MagazineExtension.增刊刊号">
            <summary>
            增刊刊号 = 24
            </summary>
        </member>
        <member name="F:DragonUtility.Enums.E_MagazineExtension.创刊日期">
            <summary>
            创刊日期 = 25
            </summary>
        </member>
        <member name="F:DragonUtility.Enums.E_MagazineExtension.杂志网站">
            <summary>
            杂志网站 = 26
            </summary>
        </member>
        <member name="F:DragonUtility.Enums.E_MagazineExtension.发行周期">
            <summary>
            发行周期 = 27
            </summary>
        </member>
        <member name="F:DragonUtility.Enums.E_MagazineExtension.是否显示">
            <summary>
            是否显示 = 28
            </summary>
        </member>
        <member name="F:DragonUtility.Enums.E_MagazineExtension.刊社模板">
            <summary>
            刊社模板 = 29
            </summary>
        </member>
        <member name="F:DragonUtility.Enums.E_MagazineExtension.刊社样式">
            <summary>
            刊社样式 = 30
            </summary>
        </member>
        <member name="F:DragonUtility.Enums.E_MagazineExtension.刊社Log">
            <summary>
            刊社Log = 31
            </summary>
        </member>
        <member name="F:DragonUtility.Enums.E_MagazineExtension.刊社Banner">
            <summary>
            刊社Banner = 32
            </summary>
        </member>
        <member name="F:DragonUtility.Enums.E_MagazineExtension.刊社投稿Email">
            <summary>
            刊社投稿Email = 33
            </summary>
        </member>
        <member name="F:DragonUtility.Enums.E_MagazineExtension.大小刊">
            <summary>
            大小刊 = 34
            </summary>
        </member>
        <member name="F:DragonUtility.Enums.E_MagazineExtension.杂志排序">
            <summary>
            杂志排序 = 35
            </summary>
        </member>
        <member name="F:DragonUtility.Enums.E_MagazineExtension.是否允许留言">
            <summary>
            刊社是否允许留言
            </summary>
        </member>
        <member name="F:DragonUtility.Enums.E_MagazineExtension.滞后期数">
            <summary>
            期刊滞后多少期再上
            </summary>
        </member>
        <member name="F:DragonUtility.Enums.E_MagazineExtension.期刊介绍">
            <summary>
            期刊介绍 = 38
            </summary>
        </member>
        <member name="F:DragonUtility.Enums.E_MagazineExtension.分组ID">
            <summary>
            对同一刊社的多本杂志分配同一个groupid
            </summary>
        </member>
        <member name="F:DragonUtility.Enums.E_MagazineExtension.APP4期刊简介">
            <summary>
            APP4期刊简介
            </summary>
        </member>
        <member name="T:DragonUtility.Enums.E_MagazineCycle">
            <summary>
            期刊刊期类型
            </summary>
        </member>
        <member name="F:DragonUtility.Enums.E_MagazineCycle.周刊">
            <summary>
            周刊 = 1
            </summary>
        </member>
        <member name="F:DragonUtility.Enums.E_MagazineCycle.半月刊">
            <summary>
            半月刊 = 2
            </summary>
        </member>
        <member name="F:DragonUtility.Enums.E_MagazineCycle.月刊">
            <summary>
            月刊 = 3
            </summary>
        </member>
        <member name="F:DragonUtility.Enums.E_MagazineCycle.双月刊">
            <summary>
            双月刊 = 4
            </summary>
        </member>
        <member name="F:DragonUtility.Enums.E_MagazineCycle.季刊">
            <summary>
            季刊 = 5
            </summary>
        </member>
        <member name="F:DragonUtility.Enums.E_MagazineCycle.旬刊">
            <summary>
            旬刊 = 6
            </summary>
        </member>
        <member name="F:DragonUtility.Enums.E_MagazineCycle.双周刊">
            <summary>
            双周刊 = 7
            </summary>
        </member>
        <member name="F:DragonUtility.Enums.E_MagazineCycle.半年刊">
            <summary>
            半年刊 = 8
            </summary>
        </member>
        <member name="F:DragonUtility.Enums.E_MagazineCycle.年刊">
            <summary>
            年刊 = 9
            </summary>
        </member>
        <member name="T:DragonUtility.Enums.E_MagazineState">
            <summary>
            期刊状态类型
            </summary>
        </member>
        <member name="F:DragonUtility.Enums.E_MagazineState.签约">
            <summary>
            签约 = 1
            </summary>
        </member>
        <member name="F:DragonUtility.Enums.E_MagazineState.改刊">
            <summary>
            改刊 = 2
            </summary>
        </member>
        <member name="F:DragonUtility.Enums.E_MagazineState.隐藏">
            <summary>
            隐藏 = 3
            </summary>
        </member>
        <member name="F:DragonUtility.Enums.E_MagazineState.休刊">
            <summary>
            休刊 = 4
            </summary>
        </member>
        <member name="F:DragonUtility.Enums.E_MagazineState.停刊">
            <summary>
            停刊 = 5
            </summary>
        </member>
        <member name="F:DragonUtility.Enums.E_MagazineState.续约中">
            <summary>
            续约中 = 6
            </summary>
        </member>
        <member name="F:DragonUtility.Enums.E_MagazineState.停止合作">
            <summary>
            停止合作 = 7
            </summary>
        </member>
        <member name="F:DragonUtility.Enums.E_MagazineState.默认合作">
            <summary>
            默认合作 = 8
            </summary>
        </member>
        <member name="T:DragonUtility.Enums.E_AuthState">
            <summary>
            授权状态
            </summary>
        </member>
        <member name="T:DragonUtility.Enums.E_OtherArticle">
            <summary>
            其他文章类型（投荐稿）
            </summary>
        </member>
        <member name="F:DragonUtility.Enums.E_OtherArticle.投稿">
            <summary>
            投稿 = 1
            </summary>
        </member>
        <member name="F:DragonUtility.Enums.E_OtherArticle.荐稿">
            <summary>
            荐稿 = 2
            </summary>
        </member>
        <member name="T:DragonUtility.Enums.E_OtherArticleState">
            <summary>
            其他文章稿件状态（投荐稿）
            </summary>
        </member>
        <member name="T:DragonUtility.Enums.E_VoiceType">
            <summary>
            语音类型
            </summary>
        </member>
        <member name="F:DragonUtility.Enums.E_VoiceType.TTS语音">
            <summary>
            TTS语音 = 1
            </summary>
        </member>
        <member name="F:DragonUtility.Enums.E_VoiceType.人声语音">
            <summary>
            人声语音 = 2
            </summary>
        </member>
        <member name="T:DragonUtility.Enums.E_CoverImage">
            <summary>
            封面图片的规格
            </summary>
        </member>
        <member name="F:DragonUtility.Enums.E_CoverImage.z">
            <summary>
             z = 1
            </summary>
        </member>
        <member name="F:DragonUtility.Enums.E_CoverImage.l">
            <summary>
            l = 2
            </summary>
        </member>
        <member name="F:DragonUtility.Enums.E_CoverImage.s">
            <summary>
             s = 3
            </summary>
        </member>
        <member name="F:DragonUtility.Enums.E_CoverImage.m">
            <summary>
            m = 4
            </summary>
        </member>
        <member name="T:DragonUtility.Enums.E_SourceType">
            <summary>
            资源分类的资源类型
            </summary>
        </member>
        <member name="F:DragonUtility.Enums.E_SourceType.期刊学科分类">
            <summary>
            期刊学科分类 = 1
            </summary>
        </member>
        <member name="F:DragonUtility.Enums.E_SourceType.图书分类">
            <summary>
            图书分类 = 2
            </summary>
        </member>
        <member name="F:DragonUtility.Enums.E_SourceType.视频分类">
            <summary>
            视频分类 = 3
            </summary>
        </member>
        <member name="F:DragonUtility.Enums.E_SourceType.其它文章分类">
            <summary>
            其它文章分类 = 4
            </summary>
        </member>
        <member name="T:DragonUtility.Enums.E_DataState">
            <summary>
            选刊表数据更新状态
            </summary>
        </member>
        <member name="F:DragonUtility.Enums.E_DataState.未制作">
            <summary>
            未制作 = 1
            </summary>
        </member>
        <member name="F:DragonUtility.Enums.E_DataState.正常更新">
            <summary>
            正常更新 = 2
            </summary>
        </member>
        <member name="F:DragonUtility.Enums.E_DataState.停止更新">
            <summary>
            停止更新 = 3
            </summary>
        </member>
        <member name="T:DragonUtility.Enums.E_VisitType">
            <summary>
            访问类型
            </summary>
        </member>
        <member name="F:DragonUtility.Enums.E_VisitType.阅读">
            <summary>
            阅读 = 1
            </summary>
        </member>
        <member name="F:DragonUtility.Enums.E_VisitType.下载">
            <summary>
            下载 = 2
            </summary>
        </member>
        <member name="F:DragonUtility.Enums.E_VisitType.播放">
            <summary>
            播放 = 3
            </summary>
        </member>
        <member name="T:DragonUtility.Enums.E_ArticelSource">
            <summary>
            文章来源
            </summary>
        </member>
        <member name="F:DragonUtility.Enums.E_ArticelSource.签约">
            <summary>
            签约 = 1
            </summary>
        </member>
        <member name="F:DragonUtility.Enums.E_ArticelSource.投稿">
            <summary>
            投稿 = 2
            </summary>
        </member>
        <member name="F:DragonUtility.Enums.E_ArticelSource.荐稿">
            <summary>
             荐稿 = 3
            </summary>
        </member>
        <member name="F:DragonUtility.Enums.E_ArticelSource.博客">
            <summary>
            博客 = 4
            </summary>
        </member>
        <member name="F:DragonUtility.Enums.E_ArticelSource.CBS">
            <summary>
            CBS = 5
            </summary>
        </member>
        <member name="F:DragonUtility.Enums.E_ArticelSource.心理健康">
            <summary>
            心理健康 = 6
            </summary>
        </member>
        <member name="F:DragonUtility.Enums.E_ArticelSource.抓取">
            <summary>
            抓取 = 7
            </summary>
        </member>
        <member name="F:DragonUtility.Enums.E_ArticelSource.北京精神">
            <summary>
            北京精神
            </summary>
        </member>
        <member name="T:DragonUtility.Enums.E_TimeRoundType">
            <summary>
            
            </summary>
        </member>
        <member name="F:DragonUtility.Enums.E_TimeRoundType.天">
            <summary>
            天 = 1
            </summary>
        </member>
        <member name="F:DragonUtility.Enums.E_TimeRoundType.周">
            <summary>
            周 = 2
            </summary>
        </member>
        <member name="F:DragonUtility.Enums.E_TimeRoundType.月">
            <summary>
            月 = 3
            </summary>
        </member>
        <member name="T:DragonUtility.Enums.E_Unit">
            <summary>
            机构
            </summary>
        </member>
        <member name="F:DragonUtility.Enums.E_Unit.公网">
            <summary>
            公网 = 1
            </summary>
        </member>
        <member name="F:DragonUtility.Enums.E_Unit.机构">
            <summary>
            机构 = 2
            </summary>
        </member>
        <member name="F:DragonUtility.Enums.E_Unit.对外合作">
            <summary>
            对外合作 = 3
            </summary>
        </member>
        <member name="T:DragonUtility.Enums.E_AuthType">
            <summary>
            机构授权方式
            </summary>
        </member>
        <member name="F:DragonUtility.Enums.E_AuthType.非授权">
            <summary>
            非授权 = 1
            </summary>
        </member>
        <member name="F:DragonUtility.Enums.E_AuthType.其它授权">
            <summary>
            其它授权 = 2
            </summary>
        </member>
        <member name="F:DragonUtility.Enums.E_AuthType.IP授权">
            <summary>
            IP授权 = 3
            </summary>
        </member>
        <member name="F:DragonUtility.Enums.E_AuthType.国图">
            <summary>
            国图 = 4
            </summary>
        </member>
        <member name="T:DragonUtility.Enums.E_SiteServiceType">
            <summary>
            客户端类型
            </summary>
        </member>
        <member name="F:DragonUtility.Enums.E_SiteServiceType.Web">
            <summary>
            互联网项目
            </summary>
        </member>
        <member name="F:DragonUtility.Enums.E_SiteServiceType.Wap">
            <summary>
            移动互联网项目
            </summary>
        </member>
        <member name="F:DragonUtility.Enums.E_SiteServiceType.安卓PAD">
            <summary>
            安卓平板电脑
            </summary>
        </member>
        <member name="T:DragonUtility.Enums.E_BlackIPType">
            <summary>
            黑名单类型
            </summary>
        </member>
        <member name="F:DragonUtility.Enums.E_BlackIPType.文章">
            <summary>
            文章 = 1
            </summary>
        </member>
        <member name="F:DragonUtility.Enums.E_BlackIPType.文章本">
            <summary>
            文章本 = 2
            </summary>
        </member>
        <member name="F:DragonUtility.Enums.E_BlackIPType.文章篇">
            <summary>
            文章篇 = 3
            </summary>
        </member>
        <member name="F:DragonUtility.Enums.E_BlackIPType.原貌">
            <summary>
            原貌 = 4
            </summary>
        </member>
        <member name="F:DragonUtility.Enums.E_BlackIPType.原貌本">
            <summary>
            原貌本 = 5
            </summary>
        </member>
        <member name="F:DragonUtility.Enums.E_BlackIPType.个人_文章本">
            <summary>
            个人_文章本 = 6
            </summary>
        </member>
        <member name="T:DragonUtility.Enums.E_BookType">
            <summary>
            电子书版本类型
            </summary>
        </member>
        <member name="F:DragonUtility.Enums.E_BookType.文本版">
            <summary>
            文本版 = 1
            </summary>
        </member>
        <member name="F:DragonUtility.Enums.E_BookType.原文原貌版">
            <summary>
            原文原貌版 = 2
            </summary>
        </member>
        <member name="F:DragonUtility.Enums.E_BookType.Djvu版">
            <summary>
            Djvu版 = 3
            </summary>
        </member>
        <member name="F:DragonUtility.Enums.E_BookType.易博士">
            <summary>
            易博士 = 4
            </summary>
        </member>
        <member name="F:DragonUtility.Enums.E_BookType.EPUB版">
            <summary>
            EPUB版 = 5
            </summary>
        </member>
        <member name="T:DragonUtility.Enums.E_BookLanguage">
            <summary>
            电子书语言类型
            </summary>
        </member>
        <member name="F:DragonUtility.Enums.E_BookLanguage.中文">
            <summary>
            中文 = 1
            </summary>
        </member>
        <member name="F:DragonUtility.Enums.E_BookLanguage.英文">
            <summary>
            英文 = 2
            </summary>
        </member>
        <member name="F:DragonUtility.Enums.E_BookLanguage.法文">
            <summary>
            法文 = 3
            </summary>
        </member>
        <member name="T:DragonUtility.Enums.E_FeatureType">
            <summary>
            专题分类
            </summary>
        </member>
        <member name="T:DragonUtility.Enums.E_FeatureResourceType">
            <summary>
            专题资源分类
            </summary>
        </member>
        <member name="T:DragonUtility.Enums.E_ScoreResourceType">
            <summary>
            评分资源类型
            </summary>
        </member>
        <member name="F:DragonUtility.Enums.E_ScoreResourceType.MagazineCycle">
            <summary>
            刊期
            </summary>
        </member>
        <member name="T:DragonUtility.Enums.E_ScoreUserType">
            <summary>
            资源评分的评论者类型
            </summary>
        </member>
        <member name="F:DragonUtility.Enums.E_ScoreUserType.editor">
            <summary>
            编辑评分
            </summary>
        </member>
        <member name="F:DragonUtility.Enums.E_ScoreUserType.user">
            <summary>
            用户评分
            </summary>
        </member>
        <member name="T:DragonUtility.DataTypes.ExtensionMethods.MatchCollectionExtensions">
            <summary>
            MatchCollection extensions
            </summary>
        </member>
        <member name="M:DragonUtility.DataTypes.ExtensionMethods.MatchCollectionExtensions.Where(System.Text.RegularExpressions.MatchCollection,System.Predicate{System.Text.RegularExpressions.Match})">
            <summary>
            Gets a list of items that satisfy the predicate from the collection
            </summary>
            <param name="Collection">Collection to search through</param>
            <param name="Predicate">Predicate that the items must satisfy</param>
            <returns>The matches that satisfy the predicate</returns>
        </member>
        <member name="T:DragonSource.Utils.Logic.E_MagazineType">
            <summary>
            期刊版本类型
            </summary>
        </member>
        <member name="F:DragonSource.Utils.Logic.E_MagazineType.综合版">
            <summary>
            综合版 = 0
            </summary>
        </member>
        <member name="F:DragonSource.Utils.Logic.E_MagazineType.纸刊版">
            <summary>
            纸刊版 = 1
            </summary>
        </member>
        <member name="F:DragonSource.Utils.Logic.E_MagazineType.文本版">
            <summary>
            文本版 = 2
            </summary>
        </member>
        <member name="F:DragonSource.Utils.Logic.E_MagazineType.原文原貌版">
            <summary>
            原文原貌版 = 3
            </summary>
        </member>
        <member name="F:DragonSource.Utils.Logic.E_MagazineType.多媒体版">
            <summary>
            多媒体版 = 4
            </summary>
        </member>
        <member name="F:DragonSource.Utils.Logic.E_MagazineType.TTS语音版">
            <summary>
            TTS语音版 = 5
            </summary>
        </member>
        <member name="F:DragonSource.Utils.Logic.E_MagazineType.WAP">
            <summary>
            WAP = 6
            </summary>
        </member>
        <member name="F:DragonSource.Utils.Logic.E_MagazineType.彩信">
            <summary>
            彩信 = 7
            </summary>
        </member>
        <member name="F:DragonSource.Utils.Logic.E_MagazineType.手机3GV8">
            <summary>
            手机3GV8 = 8
            </summary>
        </member>
        <member name="F:DragonSource.Utils.Logic.E_MagazineType.易博士">
            <summary>
            易博士 = 9
            </summary>
        </member>
        <member name="F:DragonSource.Utils.Logic.E_MagazineType.汉王">
            <summary>
            汉王 = 10
            </summary>
        </member>
        <member name="F:DragonSource.Utils.Logic.E_MagazineType.人声语音版">
            <summary>
            人声语音版 = 11
            </summary>
        </member>
        <member name="F:DragonSource.Utils.Logic.E_MagazineType.清华紫光">
            <summary>
            
            </summary>
        </member>
        <member name="F:DragonSource.Utils.Logic.E_MagazineType.百阅手机版">
            <summary>
            
            </summary>
        </member>
        <member name="F:DragonSource.Utils.Logic.E_MagazineType.刊社IPad">
            <summary>
            
            </summary>
        </member>
        <member name="F:DragonSource.Utils.Logic.E_MagazineType.龙源IPad">
            <summary>
            
            </summary>
        </member>
        <member name="F:DragonSource.Utils.Logic.E_MagazineType.AndroidIPad">
            <summary>
            
            </summary>
        </member>
        <member name="F:DragonSource.Utils.Logic.E_MagazineType.电视原貌版">
            <summary>
            
            </summary>
        </member>
        <member name="F:DragonSource.Utils.Logic.E_MagazineType.龙源AndroidPad">
            <summary>
            
            </summary>
        </member>
        <member name="F:DragonSource.Utils.Logic.E_MagazineType.触摸屏版">
            <summary>
            触摸屏版 = 19
            </summary>
        </member>
        <member name="T:DragonSource.Utils.Logic.E_MagazinePrice">
            <summary>
            期刊价格类型
            </summary>
        </member>
        <member name="F:DragonSource.Utils.Logic.E_MagazinePrice.纸版价格">
            <summary>
            纸版价格 = 0
            </summary>
        </member>
        <member name="F:DragonSource.Utils.Logic.E_MagazinePrice.龙源价格">
            <summary>
            龙源价格 = 1
            </summary>
        </member>
        <member name="F:DragonSource.Utils.Logic.E_MagazinePrice.月价格">
            <summary>
            月价格 = 2
            </summary>
        </member>
        <member name="F:DragonSource.Utils.Logic.E_MagazinePrice.季度价格">
            <summary>
            季度价格 = 3
            </summary>
        </member>
        <member name="F:DragonSource.Utils.Logic.E_MagazinePrice.半年价格">
            <summary>
            半年价格 = 4
            </summary>
        </member>
        <member name="F:DragonSource.Utils.Logic.E_MagazinePrice.全年价格">
            <summary>
            全年价格 = 5
            </summary>
        </member>
        <member name="F:DragonSource.Utils.Logic.E_MagazinePrice.航出价格">
            <summary>
            航出价格 = 6
            </summary>
        </member>
        <member name="F:DragonSource.Utils.Logic.E_MagazinePrice.邮递价格">
            <summary>
            邮递价格 = 7
            </summary>
        </member>
        <member name="F:DragonSource.Utils.Logic.E_MagazinePrice.配送价格">
            <summary>
             配送价格 = 8
            </summary>
        </member>
        <member name="F:DragonSource.Utils.Logic.E_MagazinePrice.海外价格">
            <summary>
            海外价格 = 9
            </summary>
        </member>
        <member name="F:DragonSource.Utils.Logic.E_MagazinePrice.文章价格">
            <summary>
            文章价格 = 10
            </summary>
        </member>
        <member name="T:DragonSource.Utils.Logic.E_MagazineOriginalCataLogType">
            <summary>
            原貌目录类型
            </summary>
        </member>
        <member name="F:DragonSource.Utils.Logic.E_MagazineOriginalCataLogType.封面">
            <summary>
            
            </summary>
        </member>
        <member name="F:DragonSource.Utils.Logic.E_MagazineOriginalCataLogType.广告">
            <summary>
            
            </summary>
        </member>
        <member name="F:DragonSource.Utils.Logic.E_MagazineOriginalCataLogType.目录">
            <summary>
            
            </summary>
        </member>
        <member name="F:DragonSource.Utils.Logic.E_MagazineOriginalCataLogType.栏目">
            <summary>
            
            </summary>
        </member>
        <member name="F:DragonSource.Utils.Logic.E_MagazineOriginalCataLogType.封底">
            <summary>
            
            </summary>
        </member>
        <member name="T:DragonSource.Utils.Logic.E_MagazineExtension">
            <summary>
            期刊扩展类型
            </summary>
        </member>
        <member name="F:DragonSource.Utils.Logic.E_MagazineExtension.刊社网站">
            <summary>
            刊社网站 = 1
            </summary>
        </member>
        <member name="F:DragonSource.Utils.Logic.E_MagazineExtension.刊社博客URL">
            <summary>
            刊社博客URL = 2
            </summary>
        </member>
        <member name="F:DragonSource.Utils.Logic.E_MagazineExtension.刊社博客名">
            <summary>
            刊社博客名 = 3
            </summary>
        </member>
        <member name="F:DragonSource.Utils.Logic.E_MagazineExtension.刊社论坛URL">
            <summary>
            刊社论坛URL = 4
            </summary>
        </member>
        <member name="F:DragonSource.Utils.Logic.E_MagazineExtension.邮发编号">
            <summary>
            邮发编号 = 5
            </summary>
        </member>
        <member name="F:DragonSource.Utils.Logic.E_MagazineExtension.子域名">
            <summary>
            子域名 = 6
            </summary>
        </member>
        <member name="F:DragonSource.Utils.Logic.E_MagazineExtension.版式开本">
            <summary>
            版式开本 = 7
            </summary>
        </member>
        <member name="F:DragonSource.Utils.Logic.E_MagazineExtension.纸版详细介绍">
            <summary>
            纸版详细介绍 = 8
            </summary>
        </member>
        <member name="F:DragonSource.Utils.Logic.E_MagazineExtension.杂志LOGO">
            <summary>
            杂志LOGO = 9
            </summary>
        </member>
        <member name="F:DragonSource.Utils.Logic.E_MagazineExtension.杂志封面">
            <summary>
            杂志封面 = 10
            </summary>
        </member>
        <member name="F:DragonSource.Utils.Logic.E_MagazineExtension.配送方式">
            <summary>
            配送方式 = 11
            </summary>
        </member>
        <member name="F:DragonSource.Utils.Logic.E_MagazineExtension.是否开通纸版">
            <summary>
            是否开通纸版 = 12
            </summary>
        </member>
        <member name="F:DragonSource.Utils.Logic.E_MagazineExtension.出刊日期">
            <summary>
            出刊日期 = 13
            </summary>
        </member>
        <member name="F:DragonSource.Utils.Logic.E_MagazineExtension.刊社站点登录名">
            <summary>
            刊社站点登录名 = 14
            </summary>
        </member>
        <member name="F:DragonSource.Utils.Logic.E_MagazineExtension.刊社站点密码">
            <summary>
            刊社站点密码 = 15
            </summary>
        </member>
        <member name="F:DragonSource.Utils.Logic.E_MagazineExtension.国际刊号">
            <summary>
            国际刊号 = 16
            </summary>
        </member>
        <member name="F:DragonSource.Utils.Logic.E_MagazineExtension.联合征订编号">
            <summary>
            联合征订编号 = 17
            </summary>
        </member>
        <member name="F:DragonSource.Utils.Logic.E_MagazineExtension.期刊级别">
            <summary>
            期刊级别 = 18
            </summary>
        </member>
        <member name="F:DragonSource.Utils.Logic.E_MagazineExtension.BlogID">
            <summary>
            BlogID = 19
            </summary>
        </member>
        <member name="F:DragonSource.Utils.Logic.E_MagazineExtension.是否接受投稿">
            <summary>
            是否接受投稿 = 20
            </summary>
        </member>
        <member name="F:DragonSource.Utils.Logic.E_MagazineExtension.是否允许拷贝">
            <summary>
            是否允许拷贝 = 21
            </summary>
        </member>
        <member name="F:DragonSource.Utils.Logic.E_MagazineExtension.国内发行编号">
            <summary>
            国内发行编号 = 22
            </summary>
        </member>
        <member name="F:DragonSource.Utils.Logic.E_MagazineExtension.国外发行编号">
            <summary>
            国外发行编号 = 23
            </summary>
        </member>
        <member name="F:DragonSource.Utils.Logic.E_MagazineExtension.增刊刊号">
            <summary>
            增刊刊号 = 24
            </summary>
        </member>
        <member name="F:DragonSource.Utils.Logic.E_MagazineExtension.创刊日期">
            <summary>
            创刊日期 = 25
            </summary>
        </member>
        <member name="F:DragonSource.Utils.Logic.E_MagazineExtension.杂志网站">
            <summary>
            杂志网站 = 26
            </summary>
        </member>
        <member name="F:DragonSource.Utils.Logic.E_MagazineExtension.发行周期">
            <summary>
            发行周期 = 27
            </summary>
        </member>
        <member name="F:DragonSource.Utils.Logic.E_MagazineExtension.是否显示">
            <summary>
            是否显示 = 28
            </summary>
        </member>
        <member name="F:DragonSource.Utils.Logic.E_MagazineExtension.刊社模板">
            <summary>
            刊社模板 = 29
            </summary>
        </member>
        <member name="F:DragonSource.Utils.Logic.E_MagazineExtension.刊社样式">
            <summary>
            刊社样式 = 30
            </summary>
        </member>
        <member name="F:DragonSource.Utils.Logic.E_MagazineExtension.刊社Log">
            <summary>
            刊社Log = 31
            </summary>
        </member>
        <member name="F:DragonSource.Utils.Logic.E_MagazineExtension.刊社Banner">
            <summary>
            刊社Banner = 32
            </summary>
        </member>
        <member name="F:DragonSource.Utils.Logic.E_MagazineExtension.刊社投稿Email">
            <summary>
            刊社投稿Email = 33
            </summary>
        </member>
        <member name="F:DragonSource.Utils.Logic.E_MagazineExtension.大小刊">
            <summary>
            大小刊 = 34
            </summary>
        </member>
        <member name="F:DragonSource.Utils.Logic.E_MagazineExtension.杂志排序">
            <summary>
            杂志排序 = 35
            </summary>
        </member>
        <member name="F:DragonSource.Utils.Logic.E_MagazineExtension.是否允许留言">
            <summary>
            刊社是否允许留言
            </summary>
        </member>
        <member name="F:DragonSource.Utils.Logic.E_MagazineExtension.滞后期数">
            <summary>
            期刊滞后多少期再上
            </summary>
        </member>
        <member name="F:DragonSource.Utils.Logic.E_MagazineExtension.期刊介绍">
            <summary>
            期刊介绍 = 38
            </summary>
        </member>
        <member name="F:DragonSource.Utils.Logic.E_MagazineExtension.分组ID">
            <summary>
            对同一刊社的多本杂志分配同一个groupid
            </summary>
        </member>
        <member name="F:DragonSource.Utils.Logic.E_MagazineExtension.APP4期刊简介">
            <summary>
            APP4期刊简介
            </summary>
        </member>
        <member name="T:DragonSource.Utils.Logic.E_MagazineCycle">
            <summary>
            期刊刊期类型
            </summary>
        </member>
        <member name="F:DragonSource.Utils.Logic.E_MagazineCycle.周刊">
            <summary>
            周刊 = 1
            </summary>
        </member>
        <member name="F:DragonSource.Utils.Logic.E_MagazineCycle.半月刊">
            <summary>
            半月刊 = 2
            </summary>
        </member>
        <member name="F:DragonSource.Utils.Logic.E_MagazineCycle.月刊">
            <summary>
            月刊 = 3
            </summary>
        </member>
        <member name="F:DragonSource.Utils.Logic.E_MagazineCycle.双月刊">
            <summary>
            双月刊 = 4
            </summary>
        </member>
        <member name="F:DragonSource.Utils.Logic.E_MagazineCycle.季刊">
            <summary>
            季刊 = 5
            </summary>
        </member>
        <member name="F:DragonSource.Utils.Logic.E_MagazineCycle.旬刊">
            <summary>
            旬刊 = 6
            </summary>
        </member>
        <member name="F:DragonSource.Utils.Logic.E_MagazineCycle.双周刊">
            <summary>
            双周刊 = 7
            </summary>
        </member>
        <member name="F:DragonSource.Utils.Logic.E_MagazineCycle.半年刊">
            <summary>
            半年刊 = 8
            </summary>
        </member>
        <member name="F:DragonSource.Utils.Logic.E_MagazineCycle.年刊">
            <summary>
            年刊 = 9
            </summary>
        </member>
        <member name="T:DragonSource.Utils.Logic.E_MagazineState">
            <summary>
            期刊状态类型
            </summary>
        </member>
        <member name="F:DragonSource.Utils.Logic.E_MagazineState.签约">
            <summary>
            签约 = 1
            </summary>
        </member>
        <member name="F:DragonSource.Utils.Logic.E_MagazineState.改刊">
            <summary>
            改刊 = 2
            </summary>
        </member>
        <member name="F:DragonSource.Utils.Logic.E_MagazineState.隐藏">
            <summary>
            隐藏 = 3
            </summary>
        </member>
        <member name="F:DragonSource.Utils.Logic.E_MagazineState.休刊">
            <summary>
            休刊 = 4
            </summary>
        </member>
        <member name="F:DragonSource.Utils.Logic.E_MagazineState.停刊">
            <summary>
            停刊 = 5
            </summary>
        </member>
        <member name="F:DragonSource.Utils.Logic.E_MagazineState.续约中">
            <summary>
            续约中 = 6
            </summary>
        </member>
        <member name="F:DragonSource.Utils.Logic.E_MagazineState.停止合作">
            <summary>
            停止合作 = 7
            </summary>
        </member>
        <member name="F:DragonSource.Utils.Logic.E_MagazineState.默认合作">
            <summary>
            默认合作 = 8
            </summary>
        </member>
        <member name="T:DragonSource.Utils.Logic.E_AuthState">
            <summary>
            授权状态
            </summary>
        </member>
        <member name="T:DragonSource.Utils.Logic.E_OtherArticle">
            <summary>
            其他文章类型（投荐稿）
            </summary>
        </member>
        <member name="F:DragonSource.Utils.Logic.E_OtherArticle.投稿">
            <summary>
            投稿 = 1
            </summary>
        </member>
        <member name="F:DragonSource.Utils.Logic.E_OtherArticle.荐稿">
            <summary>
            荐稿 = 2
            </summary>
        </member>
        <member name="T:DragonSource.Utils.Logic.E_OtherArticleState">
            <summary>
            其他文章稿件状态（投荐稿）
            </summary>
        </member>
        <member name="T:DragonSource.Utils.Logic.E_VoiceType">
            <summary>
            语音类型
            </summary>
        </member>
        <member name="F:DragonSource.Utils.Logic.E_VoiceType.TTS语音">
            <summary>
            TTS语音 = 1
            </summary>
        </member>
        <member name="F:DragonSource.Utils.Logic.E_VoiceType.人声语音">
            <summary>
            人声语音 = 2
            </summary>
        </member>
        <member name="T:DragonSource.Utils.Logic.E_CoverImage">
            <summary>
            封面图片的规格
            </summary>
        </member>
        <member name="F:DragonSource.Utils.Logic.E_CoverImage.z">
            <summary>
             z = 1
            </summary>
        </member>
        <member name="F:DragonSource.Utils.Logic.E_CoverImage.l">
            <summary>
            l = 2
            </summary>
        </member>
        <member name="F:DragonSource.Utils.Logic.E_CoverImage.s">
            <summary>
             s = 3
            </summary>
        </member>
        <member name="F:DragonSource.Utils.Logic.E_CoverImage.m">
            <summary>
            m = 4
            </summary>
        </member>
        <member name="T:DragonSource.Utils.Logic.E_SourceType">
            <summary>
            资源分类的资源类型
            </summary>
        </member>
        <member name="F:DragonSource.Utils.Logic.E_SourceType.期刊学科分类">
            <summary>
            期刊学科分类 = 1
            </summary>
        </member>
        <member name="F:DragonSource.Utils.Logic.E_SourceType.图书分类">
            <summary>
            图书分类 = 2
            </summary>
        </member>
        <member name="F:DragonSource.Utils.Logic.E_SourceType.视频分类">
            <summary>
            视频分类 = 3
            </summary>
        </member>
        <member name="F:DragonSource.Utils.Logic.E_SourceType.其它文章分类">
            <summary>
            其它文章分类 = 4
            </summary>
        </member>
        <member name="T:DragonSource.Utils.Logic.E_DataState">
            <summary>
            选刊表数据更新状态
            </summary>
        </member>
        <member name="F:DragonSource.Utils.Logic.E_DataState.未制作">
            <summary>
            未制作 = 1
            </summary>
        </member>
        <member name="F:DragonSource.Utils.Logic.E_DataState.正常更新">
            <summary>
            正常更新 = 2
            </summary>
        </member>
        <member name="F:DragonSource.Utils.Logic.E_DataState.停止更新">
            <summary>
            停止更新 = 3
            </summary>
        </member>
        <member name="T:DragonSource.Utils.Logic.E_VisitType">
            <summary>
            访问类型
            </summary>
        </member>
        <member name="F:DragonSource.Utils.Logic.E_VisitType.阅读">
            <summary>
            阅读 = 1
            </summary>
        </member>
        <member name="F:DragonSource.Utils.Logic.E_VisitType.下载">
            <summary>
            下载 = 2
            </summary>
        </member>
        <member name="F:DragonSource.Utils.Logic.E_VisitType.播放">
            <summary>
            播放 = 3
            </summary>
        </member>
        <member name="T:DragonSource.Utils.Logic.E_ArticelSource">
            <summary>
            文章来源
            </summary>
        </member>
        <member name="F:DragonSource.Utils.Logic.E_ArticelSource.签约">
            <summary>
            签约 = 1
            </summary>
        </member>
        <member name="F:DragonSource.Utils.Logic.E_ArticelSource.投稿">
            <summary>
            投稿 = 2
            </summary>
        </member>
        <member name="F:DragonSource.Utils.Logic.E_ArticelSource.荐稿">
            <summary>
             荐稿 = 3
            </summary>
        </member>
        <member name="F:DragonSource.Utils.Logic.E_ArticelSource.博客">
            <summary>
            博客 = 4
            </summary>
        </member>
        <member name="F:DragonSource.Utils.Logic.E_ArticelSource.CBS">
            <summary>
            CBS = 5
            </summary>
        </member>
        <member name="F:DragonSource.Utils.Logic.E_ArticelSource.心理健康">
            <summary>
            心理健康 = 6
            </summary>
        </member>
        <member name="F:DragonSource.Utils.Logic.E_ArticelSource.抓取">
            <summary>
            抓取 = 7
            </summary>
        </member>
        <member name="F:DragonSource.Utils.Logic.E_ArticelSource.北京精神">
            <summary>
            北京精神
            </summary>
        </member>
        <member name="T:DragonSource.Utils.Logic.E_TimeRoundType">
            <summary>
            
            </summary>
        </member>
        <member name="F:DragonSource.Utils.Logic.E_TimeRoundType.天">
            <summary>
            天 = 1
            </summary>
        </member>
        <member name="F:DragonSource.Utils.Logic.E_TimeRoundType.周">
            <summary>
            周 = 2
            </summary>
        </member>
        <member name="F:DragonSource.Utils.Logic.E_TimeRoundType.月">
            <summary>
            月 = 3
            </summary>
        </member>
        <member name="T:DragonSource.Utils.Logic.E_Unit">
            <summary>
            机构
            </summary>
        </member>
        <member name="F:DragonSource.Utils.Logic.E_Unit.公网">
            <summary>
            公网 = 1
            </summary>
        </member>
        <member name="F:DragonSource.Utils.Logic.E_Unit.机构">
            <summary>
            机构 = 2
            </summary>
        </member>
        <member name="F:DragonSource.Utils.Logic.E_Unit.对外合作">
            <summary>
            对外合作 = 3
            </summary>
        </member>
        <member name="T:DragonSource.Utils.Logic.E_AuthType">
            <summary>
            机构授权方式
            </summary>
        </member>
        <member name="F:DragonSource.Utils.Logic.E_AuthType.非授权">
            <summary>
            非授权 = 1
            </summary>
        </member>
        <member name="F:DragonSource.Utils.Logic.E_AuthType.其它授权">
            <summary>
            其它授权 = 2
            </summary>
        </member>
        <member name="F:DragonSource.Utils.Logic.E_AuthType.IP授权">
            <summary>
            IP授权 = 3
            </summary>
        </member>
        <member name="F:DragonSource.Utils.Logic.E_AuthType.国图">
            <summary>
            国图 = 4
            </summary>
        </member>
        <member name="T:DragonSource.Utils.Logic.E_SiteServiceType">
            <summary>
            客户端类型
            </summary>
        </member>
        <member name="F:DragonSource.Utils.Logic.E_SiteServiceType.Web">
            <summary>
            互联网项目
            </summary>
        </member>
        <member name="F:DragonSource.Utils.Logic.E_SiteServiceType.Wap">
            <summary>
            移动互联网项目
            </summary>
        </member>
        <member name="F:DragonSource.Utils.Logic.E_SiteServiceType.安卓PAD">
            <summary>
            安卓平板电脑
            </summary>
        </member>
        <member name="T:DragonSource.Utils.Logic.E_BlackIPType">
            <summary>
            黑名单类型
            </summary>
        </member>
        <member name="F:DragonSource.Utils.Logic.E_BlackIPType.文章">
            <summary>
            文章 = 1
            </summary>
        </member>
        <member name="F:DragonSource.Utils.Logic.E_BlackIPType.文章本">
            <summary>
            文章本 = 2
            </summary>
        </member>
        <member name="F:DragonSource.Utils.Logic.E_BlackIPType.文章篇">
            <summary>
            文章篇 = 3
            </summary>
        </member>
        <member name="F:DragonSource.Utils.Logic.E_BlackIPType.原貌">
            <summary>
            原貌 = 4
            </summary>
        </member>
        <member name="F:DragonSource.Utils.Logic.E_BlackIPType.原貌本">
            <summary>
            原貌本 = 5
            </summary>
        </member>
        <member name="F:DragonSource.Utils.Logic.E_BlackIPType.个人_文章本">
            <summary>
            个人_文章本 = 6
            </summary>
        </member>
        <member name="T:DragonSource.Utils.Logic.E_BookType">
            <summary>
            电子书版本类型
            </summary>
        </member>
        <member name="F:DragonSource.Utils.Logic.E_BookType.文本版">
            <summary>
            文本版 = 1
            </summary>
        </member>
        <member name="F:DragonSource.Utils.Logic.E_BookType.原文原貌版">
            <summary>
            原文原貌版 = 2
            </summary>
        </member>
        <member name="F:DragonSource.Utils.Logic.E_BookType.Djvu版">
            <summary>
            Djvu版 = 3
            </summary>
        </member>
        <member name="F:DragonSource.Utils.Logic.E_BookType.易博士">
            <summary>
            易博士 = 4
            </summary>
        </member>
        <member name="F:DragonSource.Utils.Logic.E_BookType.EPUB版">
            <summary>
            EPUB版 = 5
            </summary>
        </member>
        <member name="T:DragonSource.Utils.Logic.E_BookLanguage">
            <summary>
            电子书语言类型
            </summary>
        </member>
        <member name="F:DragonSource.Utils.Logic.E_BookLanguage.中文">
            <summary>
            中文 = 1
            </summary>
        </member>
        <member name="F:DragonSource.Utils.Logic.E_BookLanguage.英文">
            <summary>
            英文 = 2
            </summary>
        </member>
        <member name="F:DragonSource.Utils.Logic.E_BookLanguage.法文">
            <summary>
            法文 = 3
            </summary>
        </member>
        <member name="T:DragonSource.Utils.Logic.E_FeatureType">
            <summary>
            专题分类
            </summary>
        </member>
        <member name="T:DragonSource.Utils.Logic.E_FeatureResourceType">
            <summary>
            专题资源分类
            </summary>
        </member>
        <member name="T:DragonSource.Utils.Logic.E_TableName">
            <summary>
            用户购买的实物配送表TableName
            </summary>
        </member>
        <member name="F:DragonSource.Utils.Logic.E_TableName.用户订购期刊明细表">
            <summary>
            用户订购期刊明细表 = 1
            </summary>
        </member>
        <member name="T:DragonSource.Utils.Logic.E_ReceivingType">
            <summary>
            实物收货状态
            </summary>
        </member>
        <member name="F:DragonSource.Utils.Logic.E_ReceivingType.未发货">
            <summary>
            未发货 = 1
            </summary>
        </member>
        <member name="F:DragonSource.Utils.Logic.E_ReceivingType.已发货">
            <summary>
            已发货 = 2  
            </summary>
        </member>
        <member name="F:DragonSource.Utils.Logic.E_ReceivingType.已收货">
            <summary>
            已收货 = 3
            </summary>
        </member>
        <member name="F:DragonSource.Utils.Logic.E_ReceivingType.退货">
            <summary>
            退货 = 4
            </summary>
        </member>
        <member name="T:DragonSource.Utils.Logic.E_PayStatus">
            <summary>
            支付状态
            </summary>
        </member>
        <member name="F:DragonSource.Utils.Logic.E_PayStatus.未付款">
            <summary>
            未付款 = 1
            </summary>
        </member>
        <member name="F:DragonSource.Utils.Logic.E_PayStatus.已付款">
            <summary>
            已付款 = 2
            </summary>
        </member>
        <member name="F:DragonSource.Utils.Logic.E_PayStatus.已确认付款">
            <summary>
            已确认付款 = 3
            </summary>
        </member>
        <member name="F:DragonSource.Utils.Logic.E_PayStatus.已扣费">
            <summary>
            已扣费 = 4
            </summary>
        </member>
        <member name="F:DragonSource.Utils.Logic.E_PayStatus.已退款">
            <summary>
            已退款 = 5
            </summary>
        </member>
        <member name="T:DragonSource.Utils.Logic.E_PayType">
            <summary>
            支付方式
            </summary>
        </member>
        <member name="F:DragonSource.Utils.Logic.E_PayType.邮局汇款">
            <summary>
            邮局汇款 = 1
            </summary>
        </member>
        <member name="F:DragonSource.Utils.Logic.E_PayType.招行一卡通">
            <summary>
            招行一卡通 = 2
            </summary>
        </member>
        <member name="F:DragonSource.Utils.Logic.E_PayType.工行卡">
            <summary>
            工行卡 = 3
            </summary>
        </member>
        <member name="F:DragonSource.Utils.Logic.E_PayType.神州行支付">
            <summary>
            神州行支付 = 4
            </summary>
        </member>
        <member name="F:DragonSource.Utils.Logic.E_PayType.YeePay支付">
            <summary>
            YeePay支付 = 5
            </summary>
        </member>
        <member name="F:DragonSource.Utils.Logic.E_PayType.建行支付">
            <summary>
            建行支付 = 6
            </summary>
        </member>
        <member name="F:DragonSource.Utils.Logic.E_PayType.快钱支付">
            <summary>
            快钱支付 = 7
            </summary>
        </member>
        <member name="F:DragonSource.Utils.Logic.E_PayType.支付宝支付">
            <summary>
            支付宝支付 = 8
            </summary>
        </member>
        <member name="F:DragonSource.Utils.Logic.E_PayType.财富通支付">
            <summary>
            财富通支付 = 9
            </summary>
        </member>
        <member name="F:DragonSource.Utils.Logic.E_PayType.手机支付">
            <summary>
            手机支付 = 10
            </summary>
        </member>
        <member name="F:DragonSource.Utils.Logic.E_PayType.PayPal支付">
            <summary>
            PayPal支付 = 11
            </summary>
        </member>
        <member name="F:DragonSource.Utils.Logic.E_PayType.福建电信">
            <summary>
            福建电信 = 12
            </summary>
        </member>
        <member name="F:DragonSource.Utils.Logic.E_PayType.固定电话支付">
            <summary>
            固定电话支付 = 13
            </summary>
        </member>
        <member name="F:DragonSource.Utils.Logic.E_PayType.Wap支付">
            <summary>
            Wap支付 = 14
            </summary>
        </member>
        <member name="F:DragonSource.Utils.Logic.E_PayType.支付通支付">
            <summary>
            支付通支付 = 15
            </summary>
        </member>
        <member name="T:DragonSource.Utils.Logic.E_ShoppingMemberType">
            <summary>
            商品类型（会员类型）
            </summary>
        </member>
        <member name="F:DragonSource.Utils.Logic.E_ShoppingMemberType.全年ceo会员">
            <summary>
            全年ceo会员 = 1
            </summary>
        </member>
        <member name="F:DragonSource.Utils.Logic.E_ShoppingMemberType.紫光版会员">
            <summary>
            全年ceo会员 = 1
            </summary>
        </member>
        <member name="F:DragonSource.Utils.Logic.E_ShoppingMemberType.充值用户">
            <summary>
            充值用户 = 3
            </summary>
        </member>
        <member name="F:DragonSource.Utils.Logic.E_ShoppingMemberType.充值用户100">
            <summary>
            充值用户100 = 4
            </summary>
        </member>
        <member name="F:DragonSource.Utils.Logic.E_ShoppingMemberType.充值用户30">
            <summary>
            充值用户30 = 5
            </summary>
        </member>
        <member name="F:DragonSource.Utils.Logic.E_ShoppingMemberType.电玩高手">
            <summary>
            电玩高手 = 6
            </summary>
        </member>
        <member name="F:DragonSource.Utils.Logic.E_ShoppingMemberType.城市达人">
            <summary>
            城市达人 = 7
            </summary>
        </member>
        <member name="F:DragonSource.Utils.Logic.E_ShoppingMemberType.故事人生">
            <summary>
            故事人生 = 8
            </summary>
        </member>
        <member name="F:DragonSource.Utils.Logic.E_ShoppingMemberType.人在职场">
             <summary>
            人在职场 = 9
             </summary>
        </member>
        <member name="F:DragonSource.Utils.Logic.E_ShoppingMemberType.经理人">
            <summary>
            经理人 = 10
            </summary>
        </member>
        <member name="F:DragonSource.Utils.Logic.E_ShoppingMemberType.生活家">
            <summary>
            生活家 = 11
            </summary>
        </member>
        <member name="F:DragonSource.Utils.Logic.E_ShoppingMemberType.包月会员">
            <summary>
            包月会员 = 12
            </summary>
        </member>
        <member name="F:DragonSource.Utils.Logic.E_ShoppingMemberType.全年vip会员">
            <summary>
            全年vip会员 = 13
            </summary>
        </member>
        <member name="F:DragonSource.Utils.Logic.E_ShoppingMemberType.易博士版会员">
            <summary>
            易博士版会员 = 14
            </summary>
        </member>
        <member name="T:DragonSource.Utils.Logic.E_TimeType">
            <summary>
            商品中的时间类型
            </summary>
        </member>
        <member name="F:DragonSource.Utils.Logic.E_TimeType.年">
            <summary>
            年 = 1
            </summary>
        </member>
        <member name="F:DragonSource.Utils.Logic.E_TimeType.季">
            <summary>
            季 = 2
            </summary>
        </member>
        <member name="F:DragonSource.Utils.Logic.E_TimeType.月">
            <summary>
            月 = 3
            </summary>
        </member>
        <member name="F:DragonSource.Utils.Logic.E_TimeType.周">
            <summary>
            周 = 4
            </summary>
        </member>
        <member name="F:DragonSource.Utils.Logic.E_TimeType.日">
            <summary>
            日 = 5
            </summary>
        </member>
        <member name="T:DragonSource.Utils.Logic.E_PhysicsType">
            <summary>
            购买实物类型
            </summary>
        </member>
        <member name="F:DragonSource.Utils.Logic.E_PhysicsType.龙源阅读器">
            <summary>
            龙源阅读器 = 1
            </summary>
        </member>
        <member name="F:DragonSource.Utils.Logic.E_PhysicsType.紫光阅读器">
            <summary>
            紫光阅读器 = 2
            </summary>
        </member>
        <member name="F:DragonSource.Utils.Logic.E_PhysicsType.购买纸版">
            <summary>
            购买纸版 = 3
            </summary>
        </member>
        <member name="T:DragonSource.Utils.Logic.E_UserExtensionType">
            <summary>
            用户信息扩展信息
            </summary>
        </member>
        <member name="F:DragonSource.Utils.Logic.E_UserExtensionType.真实姓名">
            <summary>
            真实姓名 = 1
            </summary>
        </member>
        <member name="F:DragonSource.Utils.Logic.E_UserExtensionType.家庭住址">
            <summary>
            家庭住址 = 2
            </summary>
        </member>
        <member name="F:DragonSource.Utils.Logic.E_UserExtensionType.国家">
            <summary>
            国家 = 3
            </summary>
        </member>
        <member name="F:DragonSource.Utils.Logic.E_UserExtensionType.省份">
            <summary>
            省份 = 4
            </summary>
        </member>
        <member name="F:DragonSource.Utils.Logic.E_UserExtensionType.城市">
            <summary>
            城市 = 5
            </summary>
        </member>
        <member name="F:DragonSource.Utils.Logic.E_UserExtensionType.邮政编码">
            <summary>
            邮政编码 = 6
            </summary>
        </member>
        <member name="F:DragonSource.Utils.Logic.E_UserExtensionType.固定电话">
            <summary>
            固定电话 = 7
            </summary>
        </member>
        <member name="F:DragonSource.Utils.Logic.E_UserExtensionType.移动电话">
            <summary>
            移动电话 = 8
            </summary>
        </member>
        <member name="F:DragonSource.Utils.Logic.E_UserExtensionType.传真">
            <summary>
            传真 = 9
            </summary>
        </member>
        <member name="F:DragonSource.Utils.Logic.E_UserExtensionType.出生日期">
            <summary>
            出生日期 = 10
            </summary>
        </member>
        <member name="F:DragonSource.Utils.Logic.E_UserExtensionType.性别">
            <summary>
            性别 = 11
            </summary>
        </member>
        <member name="F:DragonSource.Utils.Logic.E_UserExtensionType.婚姻状况">
            <summary>
            婚姻状况 = 12
            </summary>
        </member>
        <member name="F:DragonSource.Utils.Logic.E_UserExtensionType.学历">
            <summary>
            学历 = 13
            </summary>
        </member>
        <member name="F:DragonSource.Utils.Logic.E_UserExtensionType.血型">
            <summary>
            血型 = 14
            </summary>
        </member>
        <member name="F:DragonSource.Utils.Logic.E_UserExtensionType.星座">
            <summary>
            星座 = 15
            </summary>
        </member>
        <member name="F:DragonSource.Utils.Logic.E_UserExtensionType.腾讯QQ">
            <summary>
            腾讯QQ = 16
            </summary>
        </member>
        <member name="F:DragonSource.Utils.Logic.E_UserExtensionType.MSN">
            <summary>
            MSN = 17
            </summary>
        </member>
        <member name="F:DragonSource.Utils.Logic.E_UserExtensionType.所属行业">
            <summary>
            所属行业 = 18
            </summary>
        </member>
        <member name="F:DragonSource.Utils.Logic.E_UserExtensionType.公司名称">
            <summary>
            公司名称 = 19
            </summary>
        </member>
        <member name="F:DragonSource.Utils.Logic.E_UserExtensionType.公司地址">
            <summary>
            公司地址 = 20
            </summary>
        </member>
        <member name="F:DragonSource.Utils.Logic.E_UserExtensionType.公司人数">
            <summary>
            公司人数 = 21
            </summary>
        </member>
        <member name="F:DragonSource.Utils.Logic.E_UserExtensionType.职位名称">
            <summary>
            职位名称 = 22
            </summary>
        </member>
        <member name="F:DragonSource.Utils.Logic.E_UserExtensionType.创建日期">
            <summary>
            创建日期 = 23
            </summary>
        </member>
        <member name="F:DragonSource.Utils.Logic.E_UserExtensionType.是否发送邮件海外">
            <summary>
            是否发送邮件海外
            </summary>
        </member>
        <member name="F:DragonSource.Utils.Logic.E_UserExtensionType.备用邮箱">
            <summary>
            备用邮箱 = 25
            </summary>
        </member>
        <member name="F:DragonSource.Utils.Logic.E_UserExtensionType.名字">
            <summary>
            名字 = 26
            </summary>
        </member>
        <member name="F:DragonSource.Utils.Logic.E_UserExtensionType.姓氏">
            <summary>
            姓氏 = 27
            </summary>
        </member>
        <member name="F:DragonSource.Utils.Logic.E_UserExtensionType.家庭住址1">
            <summary>
            家庭住址1 = 28
            </summary>
        </member>
        <member name="F:DragonSource.Utils.Logic.E_UserExtensionType.家庭住址2">
            <summary>
            家庭住址2 = 29
            </summary>
        </member>
        <member name="F:DragonSource.Utils.Logic.E_UserExtensionType.洲">
            <summary>
             洲 = 30
            </summary>
        </member>
        <member name="F:DragonSource.Utils.Logic.E_UserExtensionType.商务电话">
            <summary>
            商务电话 = 31
            </summary>
        </member>
        <member name="F:DragonSource.Utils.Logic.E_UserExtensionType.商务电话分机">
            <summary>
            商务电话分机 = 32
            </summary>
        </member>
        <member name="F:DragonSource.Utils.Logic.E_UserExtensionType.其他电话">
            <summary>
            其他电话 = 33
            </summary>
        </member>
        <member name="F:DragonSource.Utils.Logic.E_UserExtensionType.其他电话分机">
            <summary>
            其他电话分机 = 34
            </summary>
        </member>
        <member name="F:DragonSource.Utils.Logic.E_UserExtensionType.大学名称">
            <summary>
            大学名称 = 35
            </summary>
        </member>
        <member name="F:DragonSource.Utils.Logic.E_UserExtensionType.大学网址">
            <summary>
            大学网址 = 36
            </summary>
        </member>
        <member name="F:DragonSource.Utils.Logic.E_UserExtensionType.科系">
            <summary>
            科系 = 37
            </summary>
        </member>
        <member name="F:DragonSource.Utils.Logic.E_UserExtensionType.头衔">
            <summary>
            头衔 = 38
            </summary>
        </member>
        <member name="F:DragonSource.Utils.Logic.E_UserExtensionType.主修专业">
            <summary>
            主修专业 = 39
            </summary>
        </member>
        <member name="F:DragonSource.Utils.Logic.E_UserExtensionType.兴趣分类">
            <summary>
            兴趣分类 = 40
            </summary>
        </member>
        <member name="F:DragonSource.Utils.Logic.E_UserExtensionType.单位用户类型">
            <summary>
            单位用户类型 = 41
            </summary>
        </member>
        <member name="F:DragonSource.Utils.Logic.E_UserExtensionType.单位变更时间">
            <summary>
            单位变更时间 = 42
            </summary>
        </member>
        <member name="F:DragonSource.Utils.Logic.E_UserExtensionType.是否发送邮件">
            <summary>
            是否发送邮件 = 43
            </summary>
        </member>
        <member name="F:DragonSource.Utils.Logic.E_UserExtensionType.职业">
            <summary>
            职业 = 44
            </summary>
        </member>
        <member name="F:DragonSource.Utils.Logic.E_UserExtensionType.常看书籍">
            <summary>
            常看书籍 = 45
            </summary>
        </member>
        <member name="F:DragonSource.Utils.Logic.E_UserExtensionType.常看期刊">
            <summary>
            常看期刊 = 46
            </summary>
        </member>
        <member name="F:DragonSource.Utils.Logic.E_UserExtensionType.兴趣爱好">
            <summary>
            兴趣爱好 = 47
            </summary>
        </member>
        <member name="F:DragonSource.Utils.Logic.E_UserExtensionType.昵称">
            <summary>
            昵称 = 48
            </summary>
        </member>
        <member name="F:DragonSource.Utils.Logic.E_UserExtensionType.工作单位">
            <summary>
            工作单位 = 49
            </summary>
        </member>
        <member name="F:DragonSource.Utils.Logic.E_UserExtensionType.邮寄人">
            <summary>
            邮寄人 = 50
            </summary>
        </member>
        <member name="F:DragonSource.Utils.Logic.E_UserExtensionType.是否包月用户">
            <summary>
            是否包月用户 = 51
            </summary>
        </member>
        <member name="F:DragonSource.Utils.Logic.E_UserExtensionType.包月开始时间">
            <summary>
            包月开始时间 = 52
            </summary>
        </member>
        <member name="F:DragonSource.Utils.Logic.E_UserExtensionType.包月结束时间">
            <summary>
            包月结束时间 = 53
            </summary>
        </member>
        <member name="F:DragonSource.Utils.Logic.E_UserExtensionType.注册IP">
            <summary>
            注册IP = 54
            </summary>
        </member>
        <member name="F:DragonSource.Utils.Logic.E_UserExtensionType.用户类型">
            <summary>
            用户类型 = 55
            </summary>
        </member>
        <member name="F:DragonSource.Utils.Logic.E_UserExtensionType.年龄范围">
            <summary>
            年龄范围 = 56
            </summary>
        </member>
        <member name="F:DragonSource.Utils.Logic.E_UserExtensionType.公网Pad机器码">
            <summary>
            公网Pad机器码 = 57
            </summary>
        </member>
        <member name="F:DragonSource.Utils.Logic.E_UserExtensionType.机构Pad机器码">
            <summary>
            机构Pad机器码 = 58
            </summary>
        </member>
        <member name="F:DragonSource.Utils.Logic.E_UserExtensionType.是否虚拟用户">
            <summary>
            是否虚拟用户 = 59
            </summary>
        </member>
        <member name="F:DragonSource.Utils.Logic.E_UserExtensionType.用户国家">
            <summary>
            用户国家 = 60
            </summary>
        </member>
        <member name="F:DragonSource.Utils.Logic.E_UserExtensionType.登录次数">
            <summary>
            登录次数 = 61
            </summary>
        </member>
        <member name="F:DragonSource.Utils.Logic.E_UserExtensionType.安全问题">
            <summary>
            海外项目使用
            </summary>
        </member>
        <member name="F:DragonSource.Utils.Logic.E_UserExtensionType.安全问题答案">
            <summary>
            海外项目使用
            </summary>
        </member>
        <member name="F:DragonSource.Utils.Logic.E_UserExtensionType.您的位置海外">
            <summary>
            海外项目使用
            </summary>
        </member>
        <member name="F:DragonSource.Utils.Logic.E_UserExtensionType.工作性质海外">
            <summary>
            海外项目使用
            </summary>
        </member>
        <member name="T:DragonSource.Utils.Logic.E_UserAccountDetailsType">
            <summary>
            账户明细对应表名称
            </summary>
        </member>
        <member name="F:DragonSource.Utils.Logic.E_UserAccountDetailsType.订单充值">
            <summary>
            订单充值 = 1
            </summary>
        </member>
        <member name="F:DragonSource.Utils.Logic.E_UserAccountDetailsType.充值卡充值">
            <summary>
            充值卡充值 = 2
            </summary>
        </member>
        <member name="F:DragonSource.Utils.Logic.E_UserAccountDetailsType.购买的会员">
            <summary>
            购买的会员 = 3
            </summary>
        </member>
        <member name="F:DragonSource.Utils.Logic.E_UserAccountDetailsType.购买的图书">
            <summary>
            购买的图书 = 4
            </summary>
        </member>
        <member name="F:DragonSource.Utils.Logic.E_UserAccountDetailsType.购买的杂志">
            <summary>
            购买的杂志 = 5
            </summary>
        </member>
        <member name="F:DragonSource.Utils.Logic.E_UserAccountDetailsType.购买的文章">
            <summary>
            购买的文章 = 6
            </summary>
        </member>
        <member name="T:DragonSource.Utils.Logic.E_AccountInOutType">
            <summary>
            进出帐信息
            </summary>
        </member>
        <member name="F:DragonSource.Utils.Logic.E_AccountInOutType.出账">
            <summary>
            出账 = 0
            </summary>
        </member>
        <member name="F:DragonSource.Utils.Logic.E_AccountInOutType.进账">
            <summary>
            进账 = 1
            </summary>
        </member>
        <member name="T:DragonSource.Utils.Logic.E_CurrencyType">
            <summary>
            货币币种
            </summary>
        </member>
        <member name="F:DragonSource.Utils.Logic.E_CurrencyType.人民币">
            <summary>
            人民币 = 1
            </summary>
        </member>
        <member name="F:DragonSource.Utils.Logic.E_CurrencyType.美元">
            <summary>
            美元 = 2
            </summary>
        </member>
        <member name="T:DragonSource.Utils.Logic.E_RegisterResult">
            <summary>
            注册结论
            </summary>
        </member>
        <member name="F:DragonSource.Utils.Logic.E_RegisterResult.注册成功">
            <summary>
            注册成功 = 1,
            </summary>
        </member>
        <member name="F:DragonSource.Utils.Logic.E_RegisterResult.邮箱冲突">
            <summary>
            邮箱冲突 = 2,
            </summary>
        </member>
        <member name="F:DragonSource.Utils.Logic.E_RegisterResult.登录名冲突">
            <summary>
            登录名冲突 = 3,
            </summary>
        </member>
        <member name="F:DragonSource.Utils.Logic.E_RegisterResult.登录名不规范">
            <summary>
            登录名不规范 = 4,
            </summary>
        </member>
        <member name="F:DragonSource.Utils.Logic.E_RegisterResult.注册失败">
            <summary>
            注册失败 = 5
            </summary>
        </member>
        <member name="T:DragonSource.Utils.Logic.E_ReadType">
            <summary>
            文章访问类型
            </summary>
        </member>
        <member name="F:DragonSource.Utils.Logic.E_ReadType.购买">
            <summary>
            购买 = 1
            </summary>
        </member>
        <member name="F:DragonSource.Utils.Logic.E_ReadType.包月阅读">
            <summary>
            包月阅读 = 2
            </summary>
        </member>
        <member name="T:DragonSource.Utils.Logic.E_BuyWay">
            <summary>
            用户权限购买方式
            </summary>
            <remarks>
            <para>
            在线支付,对应订单编号<br/>
            充值卡,对应充值卡号
            </para>
            </remarks>  
        </member>
        <member name="F:DragonSource.Utils.Logic.E_BuyWay.在线支付">
            <summary>
            在线支付 = 1
            </summary>
        </member>
        <member name="F:DragonSource.Utils.Logic.E_BuyWay.充值卡">
            <summary>
            充值卡 = 2
            </summary>
        </member>
        <member name="F:DragonSource.Utils.Logic.E_BuyWay.帐户表支付">
            <summary>
            帐户表支付 = 3
            </summary>
        </member>
        <member name="T:DragonSource.Utils.Logic.E_CardType">
            <summary>
            阅读卡模块
            </summary>
        </member>
        <member name="F:DragonSource.Utils.Logic.E_CardType.普通充值卡">
            <summary>
            普通充值卡 = 1
            </summary>
        </member>
        <member name="F:DragonSource.Utils.Logic.E_CardType.促销包月卡">
            <summary>
            促销包月卡 = 2
            </summary>
        </member>
        <member name="F:DragonSource.Utils.Logic.E_CardType.企业线上杂志推广卡">
            <summary>
            企业线上杂志推广卡 = 3
            </summary>
        </member>
        <member name="F:DragonSource.Utils.Logic.E_CardType.vip包年卡">
            <summary>
            vip包年卡 = 4
            </summary>
        </member>
        <member name="F:DragonSource.Utils.Logic.E_CardType.ceo包年会员卡">
            <summary>
            ceo包年会员卡 = 5
            </summary>
        </member>
        <member name="F:DragonSource.Utils.Logic.E_CardType.杂志阅读卡">
            <summary>
            杂志阅读卡 = 6
            </summary>
        </member>
        <member name="F:DragonSource.Utils.Logic.E_CardType.一卡供多人使用的杂志阅读卡">
            <summary>
            一卡供多人使用的杂志阅读卡 = 7
            </summary>
        </member>
        <member name="F:DragonSource.Utils.Logic.E_CardType.易博士包两年卡">
            <summary>
            易博士包两年卡 = 8
            </summary>
        </member>
        <member name="F:DragonSource.Utils.Logic.E_CardType.紫光包年卡">
            <summary>
            紫光包年卡 = 9
            </summary>
        </member>
        <member name="T:DragonSource.Utils.Logic.E_RegStatus">
            <summary>
            充值卡用途登记状态
            </summary>
        </member>
        <member name="F:DragonSource.Utils.Logic.E_RegStatus.未登记">
            <summary>
            未登记 = 0
            </summary>
        </member>
        <member name="F:DragonSource.Utils.Logic.E_RegStatus.已登记">
            <summary>
            已登记 = 1
            </summary>
        </member>
        <member name="T:DragonSource.Utils.Logic.E_CardStatus">
            <summary>
            会员卡状态
            </summary>
        </member>
        <member name="F:DragonSource.Utils.Logic.E_CardStatus.未启用">
            <summary>
            未启用 = 1
            </summary>
        </member>
        <member name="F:DragonSource.Utils.Logic.E_CardStatus.未激活">
            <summary>
            未激活 = 2
            </summary>
        </member>
        <member name="F:DragonSource.Utils.Logic.E_CardStatus.已激活">
            <summary>
            已激活 = 3
            </summary>
        </member>
        <member name="T:DragonSource.Utils.Logic.E_BuyMagazineType">
            <summary>
            购物车杂志类型
            </summary>
        </member>
        <member name="F:DragonSource.Utils.Logic.E_BuyMagazineType.单期">
            <summary>
            单期 = 1
            </summary>
        </member>
        <member name="F:DragonSource.Utils.Logic.E_BuyMagazineType.全年">
            <summary>
            全年 = 2
            </summary>
        </member>
        <member name="F:DragonSource.Utils.Logic.E_BuyMagazineType.整刊">
            <summary>
            整刊 = 3
            </summary>
        </member>
        <member name="F:DragonSource.Utils.Logic.E_BuyMagazineType.购买文章">
            <summary>
            购买文章 = 4
            </summary>
        </member>
        <member name="F:DragonSource.Utils.Logic.E_BuyMagazineType.某年期前过刊">
            <summary>
            某年期前过刊 = 5
            </summary>
        </member>
        <member name="F:DragonSource.Utils.Logic.E_BuyMagazineType.易博士版">
            <summary>
            易博士版 = 6
            </summary>
        </member>
        <member name="F:DragonSource.Utils.Logic.E_BuyMagazineType.紫光版">
            <summary>
            紫光版 = 7
            </summary>
        </member>
        <member name="T:DragonSource.Utils.Logic.E_Sort">
            <summary>
            排序方式
            </summary>
        </member>
        <member name="F:DragonSource.Utils.Logic.E_Sort.升序">
            <summary>
            升序 = 1
            </summary>
        </member>
        <member name="F:DragonSource.Utils.Logic.E_Sort.降序">
            <summary>
            降序 = 2
            </summary>
        </member>
        <member name="T:DragonSource.Utils.AccessHelper">
            <summary>
            Access/Excel访问帮助类
            </summary>
        </member>
        <member name="M:DragonSource.Utils.AccessHelper.excuteSql(System.String,System.String)">
            <summary>
            执行一条Sql语句,一般用作无返回值的数据操作
            </summary>
            <param name="sqlstr">sql语句内容</param>
            <param name="sqlConfig">
            Access数据库文件名称或者Excel文件名称，全路径的，如：C:\dsmag.mdb或者c:\dsmag.xls
            </param>
        </member>
        <member name="M:DragonSource.Utils.AccessHelper.dataReader(System.String,System.String)">
            <summary>
            执行一条sql语句，返回一个OleDbDataReader对象
            </summary>
            <param name="sqlstr">sql语句执行内容</param>
            <param name="sqlConfig">Access数据库文件名称或者Excel文件名称，全路径的，如：C:\dsmag.mdb或者c:\dsmag.xls</param>
            <returns>一个<c>OleDbDataReader</c>类型的对象</returns>
        </member>
        <member name="M:DragonSource.Utils.AccessHelper.dataReader(System.String,System.Data.OleDb.OleDbDataReader@,System.String)">
            <summary>
            dataReader方法的一个重载方法
            </summary>
            <param name="sqlstr">sql语句字符串</param>
            <param name="dr">引用类型的OleDbDataReader对象</param>
            <param name="sqlConfig">Access数据库文件名称或者Excel文件名称，全路径的，如：C:\dsmag.mdb或者c:\dsmag.xls</param>
        </member>
        <member name="M:DragonSource.Utils.AccessHelper.dataSet(System.String,System.String)">
            <summary>
             执行一条Sql语句返回一个dataset类型的对象
            </summary>
            <param name="sqlstr">sql语句执行内容</param>
            <param name="sqlConfig">Access数据库文件名称或者Excel文件名称，全路径的，如：C:\dsmag.mdb或者c:\dsmag.xls</param>
            <returns><c>DataSet</c></returns>
        </member>
        <member name="M:DragonSource.Utils.AccessHelper.dataSet(System.String,System.Data.DataSet@,System.String)">
            <summary>
            执行一条Sql语句，改变参数ds的值
            </summary>
            <param name="sqlstr">sql语句执行内容</param>
            <param name="ds">引用类型的<c>DataSet</c>对象</param>
            <param name="sqlConfig">Access数据库文件名称或者Excel文件名称，全路径的，如：C:\dsmag.mdb或者c:\dsmag.xls</param>
        </member>
        <member name="M:DragonSource.Utils.AccessHelper.dataTable(System.String,System.String)">
            <summary>
            执行一条sql语句，返回一个<c>DataTable</c>对象
            </summary>
            <param name="sqlstr">sql语句执行内容</param>
            <param name="sqlConfig">Access数据库文件名称或者Excel文件名称，全路径的，如：C:\dsmag.mdb或者c:\dsmag.xls</param>
            <returns></returns>
        </member>
        <member name="M:DragonSource.Utils.AccessHelper.dataTable(System.String,System.Data.DataTable@,System.String)">
            <summary>
            执行一条Sql语句，并改变引用类型参数dt的值
            </summary>
            <param name="sqlstr">sql语句执行内容</param>
            <param name="dt">引用类型的<c>DataTable对象</c></param>
            <param name="sqlConfig">Access数据库文件名称或者Excel文件名称，全路径的，如：C:\dsmag.mdb或者c:\dsmag.xls</param>
        </member>
        <member name="M:DragonSource.Utils.AccessHelper.dataView(System.String,System.String)">
            <summary>
            执行一条Sql语句返回一个<c>DataView</c>对象
            </summary>
            <param name="sqlstr">sql语句执行内容</param>
            <param name="sqlConfig">Access数据库文件名称或者Excel文件名称，全路径的，如：C:\dsmag.mdb或者c:\dsmag.xls</param>
            <returns></returns>
        </member>
        <member name="T:DragonSource.Utils.ValidatecodeHttpHandler">
            <summary>
            验证码图片请求处理类
            </summary>
        </member>
        <member name="M:DragonSource.Utils.ValidatecodeHttpHandler.ProcessRequest(System.Web.HttpContext)">
            <summary>
            处理请求
            </summary>
            <param name="context"></param>
        </member>
        <member name="P:DragonSource.Utils.ValidatecodeHttpHandler.IsReusable">
            <summary>
            是否可重用
            </summary>
        </member>
        <member name="T:DragonSource.Utils.ValidatecodeTool">
            <summary>
            验证码工具的使用接口
            </summary>
        </member>
        <member name="M:DragonSource.Utils.ValidatecodeTool.OutputImage">
            <summary>
            输出验证码图片 
            参看OutputImage(string validateCodeName)方法
            </summary>
        </member>
        <member name="M:DragonSource.Utils.ValidatecodeTool.OutputImage(System.String)">
            <summary>
            输出指定验证码名称的验证码图片,
            </summary>
            <param name="validateCodeName">验证码名字，用于区分验证码</param>
        </member>
        <member name="M:DragonSource.Utils.ValidatecodeTool.OutputImage(System.Int32,System.Int32,System.String,System.String,System.Int32,System.Boolean,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            输出验证码图片
            </summary>
            <param name="width">验证图片的宽度</param>
            <param name="height">验证图片的高度</param>
            <param name="validateCodeName">验证码名称，用于同一页面支持多验证码的情况，不要重名</param>
            <param name="fontName">字体名称</param>
            <param name="fontSize">字体大小</param>
            <param name="isDrawNoise">是否生成干扰线</param>
            <param name="charCount">验证码字符位数</param>
            <param name="isUserNumber">是否使用数字</param>
            <param name="isDistorted">是否变形</param>
        </member>
        <member name="M:DragonSource.Utils.ValidatecodeTool.GetValidateCodeConfig">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:DragonSource.Utils.ValidatecodeTool.ValidateInputcode(System.String)">
            <summary>
            验证输入的验证码是否相符，不区分大小写,
            参看ValidateInputcode(string validateCodeName, string code)方法
            </summary>
            <param name="code">用户输入的验证码，不区分大小写</param>
            <returns></returns>
        </member>
        <member name="M:DragonSource.Utils.ValidatecodeTool.ValidateInputcode(System.String,System.Boolean)">
            <summary>
            验证输入的验证码是否相符，不区分大小写,
            参看ValidateInputcode(string validateCodeName, string code)方法
            </summary>
            <param name="code">用户输入的验证码，不区分大小写</param>
            <param name="isClearCodeInSession">
            是否清除Session中的验证码，此参数最好传true，否则会引入安全漏洞；
            使用场景为：客户端验证时传false，服务器端验证时再传true。
            </param>
            <returns></returns>
        </member>
        <member name="M:DragonSource.Utils.ValidatecodeTool.ValidateInputcode(System.String,System.String)">
            <summary>
            验证输入的验证码是否相符，不区分大小写
            </summary>
            <param name="validateCodeName">验证码名称，用于同一页面支持多验证码的情况</param>
            <param name="code">用户输入的验证码，不区分大小写</param>
            <returns>校验结果，true——通过，false——不正确</returns>
        </member>
        <member name="M:DragonSource.Utils.ValidatecodeTool.ValidateInputcode(System.String,System.String,System.Boolean)">
            <summary>
            验证输入的验证码是否相符，不区分大小写
            </summary>
            <param name="validateCodeName">验证码名称，用于同一页面支持多验证码的情况</param>
            <param name="code">用户输入的验证码，不区分大小写</param>
            <param name="isClearCodeInSession">
            是否清除Session中的验证码，此参数最好传true，否则可能会引入安全漏洞；
            使用场景为：客户端验证时传false，服务器端验证时再传true。
            </param>
            <returns>校验结果，true——通过，false——不正确</returns>
        </member>
        <member name="T:DragonSource.Utils.ValidatecodeImage">
            <summary>
            本类封装了验证码的生成算法.
            </summary>
        </member>
        <member name="M:DragonSource.Utils.ValidatecodeImage.#ctor(System.Int32,System.Int32,System.String,System.Int32,System.Boolean,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            
            </summary>
            <param name="width">宽度</param>
            <param name="height">高度</param>
            <param name="fontName">字体名称</param>
            <param name="fontSize">字体大小</param>
            <param name="isDrawNoise">是否画干扰线</param>
            <param name="charCount">字符个数</param>
            <param name="isUserNumber">是否使用数字</param>
            <param name="isDistorted">是否变形</param>
        </member>
        <member name="M:DragonSource.Utils.ValidatecodeImage.Finalize">
            <summary>
            
            </summary>
        </member>
        <member name="M:DragonSource.Utils.ValidatecodeImage.Dispose">
            <summary>
            
            </summary>
        </member>
        <member name="M:DragonSource.Utils.ValidatecodeImage.Dispose(System.Boolean)">
            <summary>
            
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="P:DragonSource.Utils.ValidatecodeImage.Text">
            <summary>
            
            </summary>
        </member>
        <member name="P:DragonSource.Utils.ValidatecodeImage.Image">
            <summary>
            
            </summary>
        </member>
        <member name="P:DragonSource.Utils.ValidatecodeImage.Width">
            <summary>
            
            </summary>
        </member>
        <member name="P:DragonSource.Utils.ValidatecodeImage.Height">
            <summary>
            
            </summary>
        </member>
        <member name="T:DragonUtility.Web.ExtensionMethods.Minification">
            <summary>
            Extensions dealing with minification of data
            </summary>
        </member>
        <member name="M:DragonUtility.Web.ExtensionMethods.Minification.Combine(System.Collections.Generic.IEnumerable{System.String},DragonUtility.Web.ExtensionMethods.MinificationType)">
            <summary>
            Combines and minifies various files
            </summary>
            <param name="Input">input strings (file contents)</param>
            <param name="Type">文本类型</param>
            <returns>A minified/packed string</returns>
        </member>
        <member name="M:DragonUtility.Web.ExtensionMethods.Minification.Combine(System.Collections.Generic.IEnumerable{System.IO.FileInfo},DragonUtility.Web.ExtensionMethods.MinificationType)">
            <summary>
            Combines and minifies various files
            </summary>
            <param name="Input">input strings (file contents)</param>
            <param name="Type">文本类型</param>
            <returns>A minified/packed string</returns>
        </member>
        <member name="M:DragonUtility.Web.ExtensionMethods.Minification.Minify(System.String,DragonUtility.Web.ExtensionMethods.MinificationType)">
            <summary>
            在指定的字符串中过滤指定的脚本
            </summary>
            <param name="Input">待过滤脚本的字符串</param>
            <param name="Type">要过滤掉的脚本</param>
            <returns>过滤后的字符串</returns>
        </member>
        <member name="M:DragonUtility.Web.ExtensionMethods.Minification.Minify(System.IO.FileInfo,DragonUtility.Web.ExtensionMethods.MinificationType)">
            <summary>
            在文件中过滤指定的脚本
            </summary>
            <param name="Input">文件</param>
            <param name="Type">要过滤的脚本类型</param>
            <returns>文件读取的字符串</returns>
        </member>
        <member name="T:DragonUtility.Web.ExtensionMethods.MinificationType">
            <summary>
            Defines the type of data that is being minified
            </summary>
        </member>
        <member name="F:DragonUtility.Web.ExtensionMethods.MinificationType.CSS">
            <summary>
            CSS
            </summary>
        </member>
        <member name="F:DragonUtility.Web.ExtensionMethods.MinificationType.JavaScript">
            <summary>
            JavaScript
            </summary>
        </member>
        <member name="F:DragonUtility.Web.ExtensionMethods.MinificationType.HTML">
            <summary>
            HTML
            </summary>
        </member>
        <member name="T:DragonUtility.Web.ExtensionMethods.HTMLExtensions">
            <summary>
            Set of HTML related extensions
            </summary>
        </member>
        <member name="M:DragonUtility.Web.ExtensionMethods.HTMLExtensions.AbsoluteRoot(System.Web.HttpContext)">
            <summary>
            Returns the absolute root
            </summary>
        </member>
        <member name="M:DragonUtility.Web.ExtensionMethods.HTMLExtensions.AddScriptFile(System.Web.UI.Page,System.IO.FileInfo)">
            <summary>
            向的页面Body部分引用脚本文件
            </summary>
            <param name="Page">页面</param>
            <param name="File">文件</param>
        </member>
        <member name="M:DragonUtility.Web.ExtensionMethods.HTMLExtensions.ContainsHTML(System.String)">
            <summary>
            Decides if the string contains HTML
            </summary>
            <param name="Input">Input string to check</param>
            <returns>false if it does not contain HTML, true otherwise</returns>
        </member>
        <member name="M:DragonUtility.Web.ExtensionMethods.HTMLExtensions.ContainsHTML(System.IO.FileInfo)">
            <summary>
            Decides if the file contains HTML
            </summary>
            <param name="Input">Input file to check</param>
            <returns>false if it does not contain HTML, true otherwise</returns>
        </member>
        <member name="M:DragonUtility.Web.ExtensionMethods.HTMLExtensions.HTTPCompress(System.Web.HttpContext)">
            <summary>    
            Adds HTTP compression to the current context
            </summary>
            <param name="Context">Current context</param>
        </member>
        <member name="M:DragonUtility.Web.ExtensionMethods.HTMLExtensions.IsEncodingAccepted(System.Web.HttpContext,System.String)">
            <summary>
            Checks the request headers to see if the specified
            encoding is accepted by the client.
            </summary>
        </member>
        <member name="M:DragonUtility.Web.ExtensionMethods.HTMLExtensions.RelativeRoot(System.Web.HttpContext)">
            <summary>
            Gets the relative root of the web site
            </summary>
            <param name="Context">Current context</param>
            <returns>The relative root of the web site</returns>
        </member>
        <member name="M:DragonUtility.Web.ExtensionMethods.HTMLExtensions.RemoveURLIllegalCharacters(System.String)">
            <summary>
            Removes illegal characters (used in uri's, etc.)
            </summary>
            <param name="Input">string to be converted</param>
            <returns>A stripped string</returns>
        </member>
        <member name="M:DragonUtility.Web.ExtensionMethods.HTMLExtensions.SetEncoding(System.Web.HttpContext,System.String)">
            <summary>
            向Http上下文对象添加编码
            </summary>
            <param name="Context">上下文</param>
            <param name="Encoding">编码</param>
        </member>
        <member name="M:DragonUtility.Web.ExtensionMethods.HTMLExtensions.StripHTML(System.String)">
            <summary>
            从一段HTML文本中清除HTML标签
            </summary>
            <param name="HTML">包含HTML标记的文本</param>
            <returns>纯文本</returns>
        </member>
        <member name="M:DragonUtility.Web.ExtensionMethods.HTMLExtensions.StripHTML(System.IO.FileInfo)">
            <summary>
            从一段HTML文本中剔除HTML标签
            </summary>
            <param name="HTML">HTML文本</param>
            <returns>剔除之后的纯文本</returns>
        </member>
        <member name="M:DragonUtility.Web.ExtensionMethods.HTMLExtensions.RemoveExtraHyphen(System.String)">
            <summary>
            Removes extra hyphens from a string
            </summary>
            <param name="Input">string to be stripped</param>
            <returns>Stripped string</returns>
        </member>
        <member name="M:DragonUtility.Web.ExtensionMethods.HTMLExtensions.RemoveDiacritics(System.String)">
            <summary>
            Removes special characters (Diacritics) from the string
            </summary>
            <param name="Input">String to strip</param>
            <returns>Stripped string</returns>
        </member>
        <member name="M:DragonUtility.Web.ExtensionMethods.HTMLExtensions.ParseHtml(System.String)">
            <summary>
            HTML转换为文本
            </summary>
            <param name="html">Html</param>
            <returns>结果</returns>
        </member>
        <member name="M:DragonUtility.Web.ExtensionMethods.HTMLExtensions.ParseHtml(System.String,System.String)">
            <summary>
            去除HTML标记
            </summary>
            <param name="html">Html</param>
            <param name="tag">标记</param>
            <returns>结果</returns>
        </member>
        <member name="M:DragonUtility.Web.ExtensionMethods.HTMLExtensions.WordCountExceptHtml(System.String)">
            <summary>
            统计字数（忽略HTML标记）
            </summary>
            <param name="inputHtml"></param>
            <returns></returns>
        </member>
        <member name="T:DragonUtility.Mail.MailService">
            <summary>
            
            </summary>
        </member>
        <member name="F:DragonUtility.Mail.MailService.MailHost">
            发送服务器主机
        </member>
        <member name="F:DragonUtility.Mail.MailService.User">
            账号
        </member>
        <member name="F:DragonUtility.Mail.MailService.PassWord">
            密码
        </member>
        <member name="M:DragonUtility.Mail.MailService.MailSenderBasic(System.String,System.String[],System.String[],System.String,System.String,System.Boolean)">
            <summary>
            发送邮件
            </summary>
            <param name="mFrom">发件人地址</param>
            <param name="mTo">收件人地址</param>
            <param name="mCc">抄送</param>
            <param name="mBody">正文</param>
            <param name="mSubiect">标题</param>
            <param name="isHtml">是否HTML结构</param>
            <returns></returns>
        </member>
        <member name="M:DragonUtility.Mail.MailService.SendTxtMail(System.String,System.String,System.String,System.String)">
            <summary>
            发送普通文本邮件
            </summary>
            <param name="mTo">接收地址</param>
            <param name="mBody">内容</param>
            <param name="mSubiect">标题</param>
            <param name="MailFrom">发送人</param>
            <returns></returns>
        </member>
        <member name="M:DragonUtility.Mail.MailService.SendHtmlMail(System.String,System.String,System.String,System.String)">
            <summary>
            发送超文本邮件
            </summary>
            <param name="mTo">接收地址</param>
            <param name="mBody">内容</param>
            <param name="mSubiect">主题</param>
            <param name="MailFrom">发送人</param>
            <returns></returns>
        </member>
        <member name="M:DragonUtility.Mail.MailService.SendMail(System.String,System.String,System.String,System.String@)">
            <summary>
            发送邮件
            </summary>
            <param name="mTo">收件人地址</param>
            <param name="mBody">正文</param>
            <param name="mSubiect">标题</param>
            <returns></returns>
        </member>
        <member name="T:DragonUtility.DragonNavigation.NavigationService">
            <summary>
            导航菜单服务
            </summary>
            <example>
            <pre>
            引入 DragonUtility.dll 类库。
            
            using DragonUtility.DragonNavigation;
            using DragonUtility.DragonNavigation.Enums;
            
            //各业务系统自定义导航菜单种类
            public enum CustomNavigationKind : byte
            {
                //页面顶部导航
                TopNavigation = 1
                //页面主导航
                MainNavigation,
                //页脚导航
                FooterNavigation,
                //管理平台导航
                ManagementPlatform
            }
            
            public class DragonNavigationExample
            {
                //该服务有两个构造函数：
                //1）无参构造函数适用于系统管理员可自主控制系统中一级导航菜单应用环境；
                //2) 有参构造函数（参数：一级导航菜单编号）适用于多个用户单元共存一套系统内，每个用户单元在系统内只能拥有一个一级导航菜单，自主创建的一级导航菜实际上是二级导航菜单。
                INavigationService nav = new NavigationService();
                
                NavigationModel model = new NavigationModel{
                    Name = "一级导航菜单名称",
                    Kind = (byte)CustomNavigationKind.MainNavigation,
                    ImageUrl = "http://img1.qikan.com/magazine/code2014/1839472423.jpg",
                    ImageDisplayMode = ImageDisplayMode.一般图片,
                    State = NavigationState.正常,
                    Link = "/directory/filename.aspx",
                    OpenModel = OpenMode.当前窗口,
                    Description = "前端页面鼠标移入导航菜单的提示文字或覆层消息等内容，具体看前端设计制作而定",
                    Note = "写给系统管理员的备注信息。"
                };
                
                ////////////////////////////////// 添加导航菜单 /////////////////////////////////
                //添加一级导航菜单
                nav.Add(model, null);
                //添加二级导航菜单
                NavigationModel model2 = new NavigationModel{ ..... };
                nav.Add(model2, model.Code);
            
                ////////////////////////////////// 保存修改的导航菜单 /////////////////////////////////
                string changeCode = Request.Form["nCode"]; //被修改的菜单编号
                var cModel = nav.GetSingle(changeCode);
                cModel.Name = TextBox.Text.Trim();
                .... 其余模型属性赋值代码 ....
                State = (NavigationState)int.Pares(RadioGroup.SelectedValue);
                nav.Update(cModel);
                
                ////////////////////////////////// 获取导航菜单集合 /////////////////////////////////
                //获取所有导航菜单集合，该集合的导航菜单顺序是无序的，即下一个元素不一定是该元素的自己或同级元素。
                var chaosList = nav.GetList();
                //获取所有导航菜单集合，该集合的导航菜单顺序是树形且同一父级同一级别的元素是按OrderNumber字段升序排列好的。
                var treeList = nav.GetTreeList();
            }
            </pre>
            </example>
            <remarks>
            <pre>
            注意：
            1）导航菜单使用了缓存，对该服务任何方法返回的导航菜单模型实例属性的修改都会影响到下次或其它线程获取的结果，但在调用“更行”方法之前，是不会将修改后的值存储到数据库的。
            
            2）每个模型的的 Parent（父级模型实例）、Childs（子集模型实例集合） 属性都是即时更新的，当调用“添加”、“更新”、“删除”方法后受影响的模型实例的这两个属性会立即体现。
            
            
            规则:
            导航菜单编号：子导航菜单的编号一定是他的父级编号开头。
            
            
            使用须知：
            使用前需先创建数据库表，并在appSettings配置中增加一下节点：
            &lt;add key="DragonNavigationCodeStep" value="2" /&gt;
            &lt;add key="DragonNavigationConnectionString" value="DragonResourcePortal" /&gt;
            其中：
            DragonNavigationCodeStep：表示导航菜单编号步长，即导航编号的长度。
            例如：当值为2时，一级导航菜单编号为2个字符，二级为4个字符，三级为6个字符以此类推。
            注意：编号步长决定着同一父级下（若有父级的话）同一级别的导航菜单数量。数量计算方法为：(26个字母 + 10个数字) 步长的平方）,以步长为2为例：同级数量最多为 1296 = (26+10)㎡。
            
            DragonNavigationConnectionString 表示导航菜单数据库连接的 name 值，即 connectionStrings 配置下 add 节点的 name 值。
            
            
            数据库表创建脚本：
            SET ANSI_NULLS ON
            GO
            SET QUOTED_IDENTIFIER ON
            GO
            SET ANSI_PADDING ON
            GO
            CREATE TABLE [dbo].[Navigation](
              [Code] [varchar](30) NOT NULL, --根据具体情况设定编号长度
              [Kind] [tinyint] NULL,
              [Name] [varchar](40) NOT NULL,
              [ImageUrl] [varchar](100) NULL,
              [ImageDisplayMode] [tinyint] NOT NULL,
              [Level] [tinyint] NOT NULL,
              [OrderNumber] [int] NOT NULL,
              [State] [int] NOT NULL,
              [Link] [varchar](100) NULL,
              [OpenMode] [tinyint] NOT NULL,
              [Description] [varchar](100) NULL,
              [Note] [varchar](100) NULL,
              [UpdateDate] [smalldatetime] NOT NULL,
              [CreateDate] [smalldatetime] NOT NULL,
            CONSTRAINT [PK_NAVIGATION] PRIMARY KEY CLUSTERED 
            (
              [Code] ASC
            )WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
            ) ON [PRIMARY]
            GO
            SET ANSI_PADDING OFF
            GO
            </pre>
            </remarks>
        </member>
        <member name="T:DragonUtility.DragonNavigation.INavigationService">
            <summary>
            导航菜单服务接口
            </summary>
            <remarks>
            <pre>
            该接口定义了导航菜单的基本方法。
            通常使用该接口即可满足导航菜单的功能需求。
            </pre>
            </remarks>
        </member>
        <member name="M:DragonUtility.DragonNavigation.INavigationService.Add(DragonUtility.DragonNavigation.NavigationModel,System.String)">
            <summary>
            添加导航菜单
            </summary>
            <param name="model">导航菜单模型</param>
            <param name="parentCode">父导航菜单编号</param>
        </member>
        <member name="M:DragonUtility.DragonNavigation.INavigationService.Update(DragonUtility.DragonNavigation.NavigationModel)">
            <summary>
            修改导航菜单
            </summary>
            <param name="model">导航菜单模型</param>
        </member>
        <member name="M:DragonUtility.DragonNavigation.INavigationService.Delete(System.String)">
            <summary>
            删除一个导航菜单
            </summary>
            <param name="code">要删除的导航菜单编号</param>
            <returns>0有子导航菜单不能删除，1删除成功</returns>
        </member>
        <member name="M:DragonUtility.DragonNavigation.INavigationService.MovePosition(DragonUtility.DragonNavigation.NavigationModel,DragonUtility.DragonNavigation.Enums.MoveDirection)">
            <summary>
            每次移动一个位置，来移动导航菜单在导航菜单集合中的位置
            </summary>
            <param name="model">要移动位置的导航菜单</param>
            <param name="direction">移动方向</param>
        </member>
        <member name="M:DragonUtility.DragonNavigation.INavigationService.GetLevel(System.String)">
            <summary>
            获取导航菜单等级
            </summary>
            <param name="code">导航菜单编号</param>
            <returns>返回导航菜单的等级，导航菜单不存在则返回0</returns>
        </member>
        <member name="M:DragonUtility.DragonNavigation.INavigationService.GetSingle(System.String)">
            <summary>
            获取一个导航菜单模型
            </summary>
            <param name="code">导航菜单编号</param>
            <returns>返回指定导航菜单模型，没有则返回null</returns>
        </member>
        <member name="M:DragonUtility.DragonNavigation.INavigationService.GetParent(System.String)">
            <summary>
            获取指定导航菜单的父导航菜单
            </summary>
            <param name="code">导航菜单编号</param>
            <returns>返回指定导航菜单的父导航菜单，没有则返回null</returns>
        </member>
        <member name="M:DragonUtility.DragonNavigation.INavigationService.GetBrethren(System.String)">
            <summary>
            获取同胞导航菜单集合
            </summary>
            <param name="model">导航菜单模型</param>
            <returns>返回同胞导航菜单集合，没有则返回null</returns>
        </member>
        <member name="M:DragonUtility.DragonNavigation.INavigationService.GetChild(System.String,System.Int32)">
            <summary>
            获取指定位置的子导航菜单
            </summary>
            <param name="code">导航菜单编号</param>
            <param name="index">子导航菜单索引位置</param>
            <returns>返回指定位置的子导航菜单，索引位超出范围返回null</returns>
        </member>
        <member name="M:DragonUtility.DragonNavigation.INavigationService.GetFirstChild(System.String)">
            <summary>
            获取第一个子导航菜单
            </summary>
            <param name="code">导航菜单编号</param>
            <returns>返回指定导航菜单的第一个子导航菜单，没有则返回null</returns>
        </member>
        <member name="M:DragonUtility.DragonNavigation.INavigationService.GetLastChild(System.String)">
            <summary>
            获取最后一个子导航菜单
            </summary>
            <param name="code">导航菜单编号</param>
            <returns>返回指定导航菜单的最后一个子导航菜单，没有则返回null</returns>
        </member>
        <member name="M:DragonUtility.DragonNavigation.INavigationService.GetList">
            <summary>
            获取全部导航菜单
            </summary>
            <returns>返回无序导航菜单集合的副本</returns>
        </member>
        <member name="M:DragonUtility.DragonNavigation.INavigationService.GetTreeList">
            <summary>
            获取树形结构的导航菜单
            </summary>
            <returns>返回树形结构的导航菜单集合副本</returns>
        </member>
        <member name="M:DragonUtility.DragonNavigation.INavigationService.GetListByLevel(System.Int32)">
            <summary>
            获取特定等级的所有导航菜单
            </summary>
            <param name="level">导航菜单等级（起始为1）</param>
            <returns>返回特定等级的导航菜单，如果没有则返回null</returns>
        </member>
        <member name="M:DragonUtility.DragonNavigation.INavigationService.GetChildNodes(System.String)">
            <summary>
            获取子导航菜单
            </summary>
            <param name="code">导航菜单编号</param>
            <returns>返回指定导航菜单的子导航菜单，没有则返回null</returns>
        </member>
        <member name="M:DragonUtility.DragonNavigation.INavigationService.GetChildNodes(System.String,System.Boolean)">
            <summary>
            获取子导航菜单
            </summary>
            <param name="code">导航菜单编号</param>
            <param name="includeSelf">返回的结果集中是否包含父导航菜单本生</param>
            <returns>返回指定导航菜单的子导航菜单，没有则返回null</returns>
        </member>
        <member name="M:DragonUtility.DragonNavigation.INavigationService.GetPosterityNodes(System.String)">
            <summary>
            获取子孙导航菜单
            </summary>
            <param name="code">导航菜单编号</param>
            <returns>返回指定导航菜单的子孙导航菜单集合，没有则返回null</returns>
        </member>
        <member name="M:DragonUtility.DragonNavigation.INavigationService.GetPosterityNodes(System.String,System.Boolean)">
            <summary>
            获取子孙导航菜单
            </summary>
            <param name="code">导航菜单编号</param>
            <param name="includeSelf">返回的结果集中是否包含指定的导航菜单</param>
            <returns>返回指定导航菜单的子孙导航菜单集合，没有则返回null</returns>
        </member>
        <member name="M:DragonUtility.DragonNavigation.INavigationService.RemovePosterity(System.Collections.Generic.IList{DragonUtility.DragonNavigation.NavigationModel},System.String)">
            <summary>
            移除所有子孙导航菜单
            </summary>
            <param name="nodes">导航菜单集合</param>
            <param name="code">导航菜单编号</param>
        </member>
        <member name="M:DragonUtility.DragonNavigation.INavigationService.RemovePosterity(System.Collections.Generic.IList{DragonUtility.DragonNavigation.NavigationModel},System.String,System.Boolean)">
            <summary>
            移除所有子孙导航菜单
            </summary>
            <param name="nodes">导航菜单集合</param>
            <param name="code">导航菜单编号</param>
            <param name="includeSelf">是否连同父导航菜单一起移除</param>
        </member>
        <member name="P:DragonUtility.DragonNavigation.INavigationService.StartLevel">
            <summary>
            导航菜单起始等级
            </summary>
        </member>
        <member name="P:DragonUtility.DragonNavigation.INavigationService.TreeEnableCacheLimit">
            <summary>
            当导航菜单数量超过指定值后将树形导航菜单放入缓存
            </summary>
        </member>
        <member name="F:DragonUtility.DragonNavigation.NavigationService.START_LEVEL">
            <summary>
            起始等级
            </summary>
        </member>
        <member name="F:DragonUtility.DragonNavigation.NavigationService.CODE_STEP_LENGTH">
            <summary>
            导航菜单编号步长
            </summary>
        </member>
        <member name="F:DragonUtility.DragonNavigation.NavigationService._firstlevelCode">
            <summary>
            一级导航菜单编号
            </summary>
        </member>
        <member name="F:DragonUtility.DragonNavigation.NavigationService._list">
            <summary>
            导航菜单集合
            </summary>
        </member>
        <member name="F:DragonUtility.DragonNavigation.NavigationService._tree">
            <summary>
            树形结构导航菜单集合（在获取时，请使用 this.Tree 代替，避免直接使用 this._tree）
            </summary>
        </member>
        <member name="F:DragonUtility.DragonNavigation.NavigationService._dataAccess">
            <summary>
            导航菜单数据访问服务实例
            </summary>
        </member>
        <member name="M:DragonUtility.DragonNavigation.NavigationService.#cctor">
            <summary>
            静态构造函数
            </summary>
        </member>
        <member name="M:DragonUtility.DragonNavigation.NavigationService.#ctor">
            <summary>
            创建导航菜单服务实例，该构造函数适用于系统管理员可自主控制系统中一级导航菜单应用环境
            </summary>
        </member>
        <member name="M:DragonUtility.DragonNavigation.NavigationService.#ctor(System.String)">
            <summary>
            创建导航菜单服务实例，该构造函数适用于多个用户单元共存一套系统内，每个用户单元在系统内只能拥有一个一级导航菜单，自主创建的一级导航菜实际上是二级导航菜单
            </summary>
            <param name="firstlevelCode">一级导航菜单编号</param>
            <remarks>
            此构造函数提供给类似机构阅览室这样一个系统为多家单位提供服务的平台使用。
            </remarks>
        </member>
        <member name="M:DragonUtility.DragonNavigation.NavigationService.Constructors">
            <summary>
            实例构造器，用于封装两个构造函数共同执行的部分
            </summary>
        </member>
        <member name="M:DragonUtility.DragonNavigation.NavigationService.GetFromCache(System.String)">
            <summary>
            从缓存获取对象
            </summary>
            <param name="key">缓存的键</param>
            <returns></returns>
        </member>
        <member name="M:DragonUtility.DragonNavigation.NavigationService.SetCache(System.String,System.Object)">
            <summary>
            将对象放入缓存
            </summary>
            <param name="key">缓存的键</param>
            <param name="value">缓存的对象</param>
        </member>
        <member name="M:DragonUtility.DragonNavigation.NavigationService.UpdateCacheForAdd(DragonUtility.DragonNavigation.NavigationModel)">
            <summary>
            将新添加的导航菜单插入缓存集合
            </summary>
            <param name="newModel">新添加的导航菜单</param>
        </member>
        <member name="M:DragonUtility.DragonNavigation.NavigationService.UpdateCacheForEditor(DragonUtility.DragonNavigation.NavigationModel)">
            <summary>
            将编辑过的导航菜单同步到缓存集合
            </summary>
            <param name="newModel">编辑后的导航菜单</param>
        </member>
        <member name="M:DragonUtility.DragonNavigation.NavigationService.UpdateCacheForMove(DragonUtility.DragonNavigation.NavigationModel,DragonUtility.DragonNavigation.Enums.MoveDirection)">
            <summary>
            调整缓存中的模型属性及集合顺序，并返回被调整的元素模型供持久化使用
            </summary>
            <param name="model">调整位置的元素</param>
            <param name="direction">移动方向</param>
            <returns>被调整的元素模型</returns>
        </member>
        <member name="M:DragonUtility.DragonNavigation.NavigationService.ExchangeLocation(System.Collections.Generic.IList{DragonUtility.DragonNavigation.NavigationModel},DragonUtility.DragonNavigation.NavigationModel,DragonUtility.DragonNavigation.NavigationModel)">
            <summary>
            将集合中的两个元素相互调换位置
            </summary>
            <param name="list">集合</param>
            <param name="aModel">元素1</param>
            <param name="bModel">元素2</param>
        </member>
        <member name="M:DragonUtility.DragonNavigation.NavigationService.RemoveCache">
            <summary>
            移除缓存
            </summary>
        </member>
        <member name="M:DragonUtility.DragonNavigation.NavigationService.RemoveCache(System.String)">
            <summary>
            移除缓存
            </summary>
            <param name="cacheKey">将被移除的缓存Key</param>
        </member>
        <member name="M:DragonUtility.DragonNavigation.NavigationService.Load">
            <summary>
            从缓存或数据源载入导航菜单集合
            </summary>
        </member>
        <member name="M:DragonUtility.DragonNavigation.NavigationService.LoadTree">
            <summary>
            加载导航菜单树，建议不要直接调用该方法，而是使用 this.Tree 获取导航菜单书，
            </summary>
        </member>
        <member name="M:DragonUtility.DragonNavigation.NavigationService.CreateRelationship">
            <summary>
            建立导航菜单的父子关系
            </summary>
        </member>
        <member name="M:DragonUtility.DragonNavigation.NavigationService.TreeNodeRange(System.Collections.Generic.IEnumerable{DragonUtility.DragonNavigation.NavigationModel},System.Collections.Generic.ICollection{DragonUtility.DragonNavigation.NavigationModel})">
            <summary>
            将导航菜单按树形排列
            </summary>
            <param name="nodeCollection">开始排列的节点集合</param>
            <param name="container">排列好的节点容器</param>
        </member>
        <member name="M:DragonUtility.DragonNavigation.NavigationService.GenerateCode(System.String)">
            <summary>
            生成导航菜单编号
            </summary>
            <param name="parentCode">父导航菜单编号；没有父导航菜单可传入null或String.Empty</param>
            <returns></returns>
        </member>
        <member name="M:DragonUtility.DragonNavigation.NavigationService.IsParent(System.String)">
            <summary>
            是否是父导航菜单
            </summary>
            <param name="code">导航菜单编号</param>
            <returns>true:是</returns>
        </member>
        <member name="M:DragonUtility.DragonNavigation.NavigationService.RemoveNode(System.Collections.Generic.ICollection{DragonUtility.DragonNavigation.NavigationModel},System.String)">
            <summary>
            移除某个导航菜单节点
            </summary>
            <param name="coll">导航菜单集合</param>
            <param name="code">要移除的导航菜单编号</param>
        </member>
        <member name="M:DragonUtility.DragonNavigation.NavigationService.RemovePosterityNode(System.Collections.Generic.IList{DragonUtility.DragonNavigation.NavigationModel},System.String)">
            <summary>
            移除所有子孙导航菜单节点
            </summary>
            <param name="nodes">导航菜单集合</param>
            <param name="code">导航菜单编号</param>
        </member>
        <member name="M:DragonUtility.DragonNavigation.NavigationService.Add(DragonUtility.DragonNavigation.NavigationModel,System.String)">
            <summary>方法说明见：DragonUtility.DragonNavigation.INavigationService 接口 </summary>
        </member>
        <member name="M:DragonUtility.DragonNavigation.NavigationService.Update(DragonUtility.DragonNavigation.NavigationModel)">
            <summary>方法说明见：DragonUtility.DragonNavigation.INavigationService 接口 </summary>
        </member>
        <member name="M:DragonUtility.DragonNavigation.NavigationService.Delete(System.String)">
            <summary>方法说明见：DragonUtility.DragonNavigation.INavigationService 接口 </summary>
        </member>
        <member name="M:DragonUtility.DragonNavigation.NavigationService.MovePosition(DragonUtility.DragonNavigation.NavigationModel,DragonUtility.DragonNavigation.Enums.MoveDirection)">
            <summary>方法说明见：DragonUtility.DragonNavigation.INavigationService 接口 </summary>
        </member>
        <member name="M:DragonUtility.DragonNavigation.NavigationService.GetLevel(System.String)">
            <summary>方法说明见：DragonUtility.DragonNavigation.INavigationService 接口 </summary>
        </member>
        <member name="M:DragonUtility.DragonNavigation.NavigationService.GetSingle(System.String)">
            <summary>方法说明见：DragonUtility.DragonNavigation.INavigationService 接口 </summary>
        </member>
        <member name="M:DragonUtility.DragonNavigation.NavigationService.GetParent(System.String)">
            <summary>方法说明见：DragonUtility.DragonNavigation.INavigationService 接口 </summary>
        </member>
        <member name="M:DragonUtility.DragonNavigation.NavigationService.GetBrethren(System.String)">
            <summary>方法说明见：DragonUtility.DragonNavigation.INavigationService 接口 </summary>
        </member>
        <member name="M:DragonUtility.DragonNavigation.NavigationService.GetChild(System.String,System.Int32)">
            <summary>方法说明见：DragonUtility.DragonNavigation.INavigationService 接口 </summary>
        </member>
        <member name="M:DragonUtility.DragonNavigation.NavigationService.GetFirstChild(System.String)">
            <summary>方法说明见：DragonUtility.DragonNavigation.INavigationService 接口 </summary>
        </member>
        <member name="M:DragonUtility.DragonNavigation.NavigationService.GetLastChild(System.String)">
            <summary>方法说明见：DragonUtility.DragonNavigation.INavigationService 接口 </summary>
        </member>
        <member name="M:DragonUtility.DragonNavigation.NavigationService.GetList">
            <summary>方法说明见：DragonUtility.DragonNavigation.INavigationService 接口 </summary>
        </member>
        <member name="M:DragonUtility.DragonNavigation.NavigationService.GetTreeList">
            <summary>方法说明见：DragonUtility.DragonNavigation.INavigationService 接口 </summary>
        </member>
        <member name="M:DragonUtility.DragonNavigation.NavigationService.GetListByLevel(System.Int32)">
            <summary>方法说明见：DragonUtility.DragonNavigation.INavigationService 接口 </summary>
        </member>
        <member name="M:DragonUtility.DragonNavigation.NavigationService.GetChildNodes(System.String)">
            <summary>方法说明见：DragonUtility.DragonNavigation.INavigationService 接口 </summary>
        </member>
        <member name="M:DragonUtility.DragonNavigation.NavigationService.GetChildNodes(System.String,System.Boolean)">
            <summary>方法说明见：DragonUtility.DragonNavigation.INavigationService 接口 </summary>
        </member>
        <member name="M:DragonUtility.DragonNavigation.NavigationService.GetPosterityNodes(System.String)">
            <summary>方法说明见：DragonUtility.DragonNavigation.INavigationService 接口 </summary>
        </member>
        <member name="M:DragonUtility.DragonNavigation.NavigationService.GetPosterityNodes(System.String,System.Boolean)">
            <summary>方法说明见：DragonUtility.DragonNavigation.INavigationService 接口 </summary>
        </member>
        <member name="M:DragonUtility.DragonNavigation.NavigationService.RemovePosterity(System.Collections.Generic.IList{DragonUtility.DragonNavigation.NavigationModel},System.String)">
            <summary>方法说明见：DragonUtility.DragonNavigation.INavigationService 接口 </summary>
        </member>
        <member name="M:DragonUtility.DragonNavigation.NavigationService.RemovePosterity(System.Collections.Generic.IList{DragonUtility.DragonNavigation.NavigationModel},System.String,System.Boolean)">
            <summary>方法说明见：DragonUtility.DragonNavigation.INavigationService 接口 </summary>
        </member>
        <member name="M:DragonUtility.DragonNavigation.NavigationService.UpdateCacheForAdd(System.String)">
            <summary>方法说明见：DragonUtility.DragonNavigation.INavigationCacheService 接口 </summary>
        </member>
        <member name="M:DragonUtility.DragonNavigation.NavigationService.UpdateCacheForEditor(System.String)">
            <summary>方法说明见：DragonUtility.DragonNavigation.INavigationCacheService 接口 </summary>
        </member>
        <member name="M:DragonUtility.DragonNavigation.NavigationService.UpdateCacheForMove(System.String,DragonUtility.DragonNavigation.Enums.MoveDirection)">
            <summary>方法说明见：DragonUtility.DragonNavigation.INavigationCacheService 接口 </summary>
        </member>
        <member name="M:DragonUtility.DragonNavigation.NavigationService.UpdateCacheForDelete(System.String)">
            <summary>方法说明见：DragonUtility.DragonNavigation.INavigationCacheService 接口 </summary>
        </member>
        <member name="P:DragonUtility.DragonNavigation.NavigationService.CacheKey">
            <summary>
            缓存KEY（无序）
            </summary>
        </member>
        <member name="P:DragonUtility.DragonNavigation.NavigationService.CacheTreeKey">
            <summary>
            缓存KEY（树形）
            </summary>
        </member>
        <member name="P:DragonUtility.DragonNavigation.NavigationService.ExistsTreeCache">
            <summary>
            获取一个值，指示导航菜单树是否已缓存
            </summary>
        </member>
        <member name="P:DragonUtility.DragonNavigation.NavigationService.Tree">
            <summary>
            获取树形结构导航菜单集合
            </summary>
        </member>
        <member name="P:DragonUtility.DragonNavigation.NavigationService.StartLevel">
            <summary>属性说明见：DragonUtility.DragonNavigation.INavigationService 接口 </summary>
        </member>
        <member name="P:DragonUtility.DragonNavigation.NavigationService.TreeEnableCacheLimit">
            <summary>属性说明见：DragonUtility.DragonNavigation.INavigationService 接口 </summary>
        </member>
        <member name="T:DragonUtility.DragonNavigation.INavigationDataAccess">
            <summary>
            导航菜单数据访问接口
            </summary>
        </member>
        <member name="M:DragonUtility.DragonNavigation.INavigationDataAccess.Add(DragonUtility.DragonNavigation.NavigationModel)">
            <summary>
            添加导航菜单
            </summary>
            <param name="model">导航菜单模型</param>
        </member>
        <member name="M:DragonUtility.DragonNavigation.INavigationDataAccess.Update(DragonUtility.DragonNavigation.NavigationModel)">
            <summary>
            修改分类
            </summary>
            <param name="model">导航菜单模型</param>
        </member>
        <member name="M:DragonUtility.DragonNavigation.INavigationDataAccess.Delete(System.String)">
            <summary>
            删除导航菜单及所有子孙导航菜单
            </summary>
            <param name="code">要删除的导航菜单编号</param>
            <returns>被删除的导航菜单数量</returns>
        </member>
        <member name="M:DragonUtility.DragonNavigation.INavigationDataAccess.GetSingle(System.String)">
            <summary>
            从数据库加载指定导航菜单模型
            </summary>
            <param name="code">菜单编号</param>
            <returns>导航菜单模型</returns>
        </member>
        <member name="M:DragonUtility.DragonNavigation.INavigationDataAccess.Load(System.String)">
            <summary>
            从数据源加载指定导航菜单及其所有子孙导航菜单
            </summary>
            <param name="rootCode">根导航菜单编号</param>
            <returns>导航菜单集合</returns>
        </member>
        <member name="T:DragonUtility.DataTypes.ExtensionMethods.GenericObjectExtensions">
            <summary>
            Generic extensions dealing with objects
            </summary>
        </member>
        <member name="M:DragonUtility.DataTypes.ExtensionMethods.GenericObjectExtensions.If``1(``0,System.Predicate{``0},``0)">
            <summary>
            Determines if the object fullfills the predicate and if it does, returns itself. Otherwise the default value.
            </summary>
            <typeparam name="T">The object type</typeparam>
            <param name="Object">Object to check</param>
            <param name="Predicate">Predicate to run on the object</param>
            <param name="DefaultValue">Default value to return if it does not succeed the predicate test</param>
            <returns>The original value if predicate is true, the default value otherwise</returns>
        </member>
        <member name="M:DragonUtility.DataTypes.ExtensionMethods.GenericObjectExtensions.NotIf``1(``0,System.Predicate{``0},``0)">
            <summary>
            Determines if the object fails the predicate and if it does, returns itself. Otherwise the default value.
            </summary>
            <typeparam name="T">The object type</typeparam>
            <param name="Object">Object to check</param>
            <param name="Predicate">Predicate to run on the object</param>
            <param name="DefaultValue">Default value to return if it succeeds the predicate test</param>
            <returns>The original value if predicate is false, the default value otherwise</returns>
        </member>
        <member name="M:DragonUtility.DataTypes.ExtensionMethods.GenericObjectExtensions.Return``2(``0,System.Func{``0,``1},``1)">
            <summary>
            Used to determine if an object, or it's properties are null (Although can be used for other things)
            </summary>
            <typeparam name="T">Input type</typeparam>
            <typeparam name="R">Output type</typeparam>
            <param name="Object">Object to check</param>
            <param name="Function">Property, function, etc. to run</param>
            <param name="DefaultValue">Default value to return if Object is null</param>
            <returns>The value returned by the function or the default value if the object is null or the function returns a null value</returns>
        </member>
        <member name="M:DragonUtility.DataTypes.ExtensionMethods.GenericObjectExtensions.Chain``1(``0,System.Action{``0})">
            <summary>
            Allows actions to be chained together
            </summary>
            <typeparam name="T">The type of the object</typeparam>
            <param name="Object">Object to run the action on</param>
            <param name="Action">Action to run</param>
            <returns>The original object</returns>
        </member>
        <member name="M:DragonUtility.DataTypes.ExtensionMethods.GenericObjectExtensions.Chain``2(``0,System.Func{``0,``1})">
            <summary>
            Allows actions to be chained together
            </summary>
            <typeparam name="T">The type of the object</typeparam>
            <typeparam name="R">Return type</typeparam>
            <param name="Object">Object to run the action on</param>
            <param name="Function">Function to run</param>
            <returns>The result from the function</returns>
        </member>
        <member name="M:DragonUtility.DataTypes.ExtensionMethods.GenericObjectExtensions.Do``1(``0,System.Action{``0},``0)">
            <summary>
            Similar to Chain, except checks if the Object or Action is null first and returns the default value if they are
            </summary>
            <typeparam name="T">The object type</typeparam>
            <param name="Object">Object to run the action on</param>
            <param name="Action">Action to run</param>
            <param name="DefaultValue">Default value to return if the action or object is null</param>
            <returns>The original object or the default value</returns>
        </member>
        <member name="M:DragonUtility.DataTypes.ExtensionMethods.GenericObjectExtensions.Do``2(``0,System.Func{``0,``1},``1)">
            <summary>
            Similar to Chain, except checks if the Object or Function is null first and returns the default value if they are
            </summary>
            <typeparam name="T">The object type</typeparam>
            <typeparam name="R">待转换的类型</typeparam>
            <param name="Object">Object to run the function on</param>
            <param name="Function">Function to run</param>
            <param name="DefaultValue">Default value to return if the action or object is null</param>
            <returns>The result of the function or the default value</returns>
        </member>
        <member name="M:DragonUtility.DataTypes.ExtensionMethods.GenericObjectExtensions.Execute``1(System.Func{``0},System.Int32,System.Int32,System.Int32)">
            <summary>
            Executes a function, repeating it a number of times in case it fails
            </summary>
            <typeparam name="T">Return type</typeparam>
            <param name="Function">Function to run</param>
            <param name="Attempts">Number of times to attempt it</param>
            <param name="RetryDelay">The amount of milliseconds to wait between tries</param>
            <param name="TimeOut">Max amount of time to wait for the function to run (waits for the current attempt to finish before checking)</param>
            <returns>The returned value from the function</returns>
        </member>
        <member name="M:DragonUtility.DataTypes.ExtensionMethods.GenericObjectExtensions.Execute(System.Action,System.Int32,System.Int32,System.Int32)">
            <summary>
            Executes an action, repeating it a number of times in case it fails
            </summary>
            <param name="Action">Action to run</param>
            <param name="Attempts">Number of times to attempt it</param>
            <param name="RetryDelay">The amount of milliseconds to wait between tries</param>
            <param name="TimeOut">Max amount of time to wait for the function to run (waits for the current attempt to finish before checking)</param>
        </member>
        <member name="M:DragonUtility.DataTypes.ExtensionMethods.GenericObjectExtensions.TrimNull(System.Object)">
            <summary>
            
            </summary>
            <param name="o"></param>
            <returns></returns>
        </member>
        <member name="T:DragonUtility.DataProvider.AccessHelper">
            <summary>
            Access帮助类
            </summary>
        </member>
        <member name="M:DragonUtility.DataProvider.AccessHelper.excuteSql(System.String,System.String)">
            <summary>
            执行一条Sql语句,一般用作无返回值的数据操作
            </summary>
            <param name="sqlstr">sql语句内容</param>
            <param name="sqlConfig">
            Access数据库文件名称或者Excel文件名称，全路径的，如：C:\dsmag.mdb或者c:\dsmag.xls
            </param>
        </member>
        <member name="M:DragonUtility.DataProvider.AccessHelper.dataReader(System.String,System.String)">
            <summary>
            执行一条sql语句，返回一个OleDbDataReader对象
            </summary>
            <param name="sqlstr">sql语句执行内容</param>
            <param name="sqlConfig">Access数据库文件名称或者Excel文件名称，全路径的，如：C:\dsmag.mdb或者c:\dsmag.xls</param>
            <returns>一个<c>OleDbDataReader</c>类型的对象</returns>
        </member>
        <member name="M:DragonUtility.DataProvider.AccessHelper.dataReader(System.String,System.Data.OleDb.OleDbDataReader@,System.String)">
            <summary>
            dataReader方法的一个重载方法
            </summary>
            <param name="sqlstr">sql语句字符串</param>
            <param name="dr">引用类型的OleDbDataReader对象</param>
            <param name="sqlConfig">Access数据库文件名称或者Excel文件名称，全路径的，如：C:\dsmag.mdb或者c:\dsmag.xls</param>
        </member>
        <member name="M:DragonUtility.DataProvider.AccessHelper.dataSet(System.String,System.String)">
            <summary>
             执行一条Sql语句返回一个dataset类型的对象
            </summary>
            <param name="sqlstr">sql语句执行内容</param>
            <param name="sqlConfig">Access数据库文件名称或者Excel文件名称，全路径的，如：C:\dsmag.mdb或者c:\dsmag.xls</param>
            <returns><c>DataSet</c></returns>
        </member>
        <member name="M:DragonUtility.DataProvider.AccessHelper.dataSet(System.String,System.Data.DataSet@,System.String)">
            <summary>
            执行一条Sql语句，改变参数ds的值
            </summary>
            <param name="sqlstr">sql语句执行内容</param>
            <param name="ds">引用类型的<c>DataSet</c>对象</param>
            <param name="sqlConfig">Access数据库文件名称或者Excel文件名称，全路径的，如：C:\dsmag.mdb或者c:\dsmag.xls</param>
        </member>
        <member name="M:DragonUtility.DataProvider.AccessHelper.dataTable(System.String,System.String)">
            <summary>
            执行一条sql语句，返回一个<c>DataTable</c>对象
            </summary>
            <param name="sqlstr">sql语句执行内容</param>
            <param name="sqlConfig">Access数据库文件名称或者Excel文件名称，全路径的，如：C:\dsmag.mdb或者c:\dsmag.xls</param>
            <returns></returns>
        </member>
        <member name="M:DragonUtility.DataProvider.AccessHelper.dataTable(System.String,System.Data.DataTable@,System.String)">
            <summary>
            执行一条Sql语句，并改变引用类型参数dt的值
            </summary>
            <param name="sqlstr">sql语句执行内容</param>
            <param name="dt">引用类型的<c>DataTable对象</c></param>
            <param name="sqlConfig">Access数据库文件名称或者Excel文件名称，全路径的，如：C:\dsmag.mdb或者c:\dsmag.xls</param>
        </member>
        <member name="M:DragonUtility.DataProvider.AccessHelper.dataView(System.String,System.String)">
            <summary>
            执行一条Sql语句返回一个<c>DataView</c>对象
            </summary>
            <param name="sqlstr">sql语句执行内容</param>
            <param name="sqlConfig">Access数据库文件名称或者Excel文件名称，全路径的，如：C:\dsmag.mdb或者c:\dsmag.xls</param>
            <returns></returns>
        </member>
        <member name="T:DragonSource.Utils.Logging.FileLog">
            <summary>
            文件日志
            </summary>
        </member>
        <member name="T:DragonSource.Utils.Logging.LogBase`1">
            <summary>
            日志接口实现类的基类，通过继承此类来开发一个新的日志接口实现类
            </summary>
            <typeparam name="LogType">Log type</typeparam>
        </member>
        <member name="T:DragonSource.Utils.Logging.ILog">
            <summary>
            日志接口
            </summary>
        </member>
        <member name="M:DragonSource.Utils.Logging.ILog.LogMessage(System.String,DragonSource.Utils.Logging.MessageType,System.Object[])">
            <summary>
            记录日志信息
            </summary>
            <param name="Message">日志内容</param>
            <param name="Type">日志信息类型</param>
            <param name="args">附加的日志信息参数(会在对日志信息进行格式化的时候用到)</param>
        </member>
        <member name="M:DragonSource.Utils.Logging.LogBase`1.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:DragonSource.Utils.Logging.LogBase`1.Init(System.String)">
            <summary>
            需要做的初始化工作
            </summary>
            <param name="currentname">当前日志的名称</param>
        </member>
        <member name="F:DragonSource.Utils.Logging.LogBase`1.Log">
            <summary>
            Called to log the current message
            </summary>
        </member>
        <member name="M:DragonSource.Utils.Logging.LogBase`1.Dispose">
            <summary>
            结束
            </summary>
        </member>
        <member name="M:DragonSource.Utils.Logging.LogBase`1.LogMessage(System.String,DragonSource.Utils.Logging.MessageType,System.Object[])">
            <summary>
            实现接口
            </summary>
            <param name="Message"></param>
            <param name="Type"></param>
            <param name="args"></param>
        </member>
        <member name="P:DragonSource.Utils.Logging.LogBase`1.Start">
            <summary>
            Called when the log is "opened"
            </summary>
        </member>
        <member name="P:DragonSource.Utils.Logging.LogBase`1.End">
            <summary>
            Called when the log is "closed"
            </summary>
        </member>
        <member name="P:DragonSource.Utils.Logging.LogBase`1.FormatMessage">
            <summary>
            格式化消息
            </summary>
        </member>
        <member name="T:DragonSource.Utils.Logging.LogBase`1.Format">
            <summary>
            
            </summary>
            <param name="Message"></param>
            <param name="Type"></param>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="M:DragonSource.Utils.Logging.FileLog.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:DragonSource.Utils.Logging.FileLog.Init(System.String)">
            <summary>
            初始化文件日志
            </summary>
            <param name="currentname"></param>
        </member>
        <member name="T:DragonSource.Utils.Logging.MessageType">
            <summary>
            日志信息的类型
            </summary>
        </member>
        <member name="F:DragonSource.Utils.Logging.MessageType.General">
            <summary>
            一般
            </summary>
        </member>
        <member name="F:DragonSource.Utils.Logging.MessageType.Debug">
            <summary>
            调试
            </summary>
        </member>
        <member name="F:DragonSource.Utils.Logging.MessageType.Trace">
            <summary>
            跟踪
            </summary>
        </member>
        <member name="F:DragonSource.Utils.Logging.MessageType.Info">
            <summary>
            信息
            </summary>
        </member>
        <member name="F:DragonSource.Utils.Logging.MessageType.Warn">
            <summary>
            警告
            </summary>
        </member>
        <member name="F:DragonSource.Utils.Logging.MessageType.Error">
            <summary>
            错误
            </summary>
        </member>
        <member name="T:DragonSource.Utils.TypeConversionExtensions">
            <summary>
            Extensions converting between types, checking if something is null, etc.
            </summary>
        </member>
        <member name="M:DragonSource.Utils.TypeConversionExtensions.FormatToString(System.Object,System.String)">
            <summary>
            Calls the object's ToString function passing in the formatting
            </summary>
            <param name="Input">Input object</param>
            <param name="Format">Format of the output string</param>
            <returns>The formatted string</returns>
        </member>
        <member name="M:DragonSource.Utils.TypeConversionExtensions.IsNotDefault``1(``0,System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Determines if the object is not null
            </summary>
            <typeparam name="T">Object type</typeparam>
            <param name="Object">The object to check</param>
            <param name="EqualityComparer">Equality comparer used to determine if the object is equal to default</param>
            <returns>False if it is null, true otherwise</returns>
        </member>
        <member name="M:DragonSource.Utils.TypeConversionExtensions.IsDefault``1(``0,System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Determines if the object is null
            </summary>
            <typeparam name="T">Object type</typeparam>
            <param name="Object">The object to check</param>
            <param name="EqualityComparer">Equality comparer used to determine if the object is equal to default</param>
            <returns>True if it is null, false otherwise</returns>
        </member>
        <member name="M:DragonSource.Utils.TypeConversionExtensions.IsNotNull(System.Object)">
            <summary>
            Determines if the object is not null
            </summary>
            <param name="Object">The object to check</param>
            <returns>False if it is null, true otherwise</returns>
        </member>
        <member name="M:DragonSource.Utils.TypeConversionExtensions.IsNull(System.Object)">
            <summary>
            Determines if the object is null
            </summary>
            <param name="Object">The object to check</param>
            <returns>True if it is null, false otherwise</returns>
        </member>
        <member name="M:DragonSource.Utils.TypeConversionExtensions.IsNotNullOrDBNull(System.Object)">
            <summary>
            Determines if the object is not null or DBNull
            </summary>
            <param name="Object">The object to check</param>
            <returns>False if it is null/DBNull, true otherwise</returns>
        </member>
        <member name="M:DragonSource.Utils.TypeConversionExtensions.IsNullOrDBNull(System.Object)">
            <summary>
            Determines if the object is null or DBNull
            </summary>
            <param name="Object">The object to check</param>
            <returns>True if it is null/DBNull, false otherwise</returns>
        </member>
        <member name="M:DragonSource.Utils.TypeConversionExtensions.NullCheck``1(``0,``0)">
            <summary>
            Does a null check and either returns the default value (if it is null) or the object
            </summary>
            <typeparam name="T">Object type</typeparam>
            <param name="Object">Object to check</param>
            <param name="DefaultValue">Default value to return in case it is null</param>
            <returns>The default value if it is null, the object otherwise</returns>
        </member>
        <member name="M:DragonSource.Utils.TypeConversionExtensions.ThrowIfDefault``1(``0,System.String,System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Determines if the object is equal to default value and throws an ArgumentNullException if it is
            </summary>
            <param name="Item">The object to check</param>
            <param name="EqualityComparer">Equality comparer used to determine if the object is equal to default</param>
            <param name="Name">Name of the argument</param>
        </member>
        <member name="M:DragonSource.Utils.TypeConversionExtensions.ThrowIfNull(System.Object,System.String)">
            <summary>
            Determines if the object is null and throws an ArgumentNullException if it is
            </summary>
            <param name="Item">The object to check</param>
            <param name="Name">Name of the argument</param>
        </member>
        <member name="M:DragonSource.Utils.TypeConversionExtensions.ThrowIfNullOrEmpty``1(System.Collections.Generic.IEnumerable{``0},System.String)">
            <summary>
            Determines if the IEnumerable is null or empty and throws an ArgumentNullException if it is
            </summary>
            <typeparam name="T">Item type</typeparam>
            <param name="Item">The object to check</param>
            <param name="Name">Name of the argument</param>
        </member>
        <member name="M:DragonSource.Utils.TypeConversionExtensions.ThrowIfNullOrDBNull(System.Object,System.String)">
            <summary>
            Determines if the object is null or DbNull and throws an ArgumentNullException if it is
            </summary>
            <param name="Item">The object to check</param>
            <param name="Name">Name of the argument</param>
        </member>
        <member name="M:DragonSource.Utils.TypeConversionExtensions.ToSQLDbType(System.Type)">
            <summary>
            Converts a .Net type to SQLDbType value
            </summary>
            <param name="Type">.Net Type</param>
            <returns>The corresponding SQLDbType</returns>
        </member>
        <member name="M:DragonSource.Utils.TypeConversionExtensions.ToSqlDbType(System.Data.DbType)">
            <summary>
            Converts a DbType to a SqlDbType
            </summary>
            <param name="Type">Type to convert</param>
            <returns>The corresponding SqlDbType (if it exists)</returns>
        </member>
        <member name="M:DragonSource.Utils.TypeConversionExtensions.ToDbType(System.Type)">
            <summary>
            Converts a .Net type to DbType value
            </summary>
            <param name="Type">.Net Type</param>
            <returns>The corresponding DbType</returns>
        </member>
        <member name="M:DragonSource.Utils.TypeConversionExtensions.ToDbType(System.Data.SqlDbType)">
            <summary>
            Converts SqlDbType to DbType
            </summary>
            <param name="Type">Type to convert</param>
            <returns>The corresponding DbType (if it exists)</returns>
        </member>
        <member name="M:DragonSource.Utils.TypeConversionExtensions.ToType(System.Data.SqlDbType)">
            <summary>
            Converts a SQLDbType value to .Net type
            </summary>
            <param name="Type">SqlDbType Type</param>
            <returns>The corresponding .Net type</returns>
        </member>
        <member name="M:DragonSource.Utils.TypeConversionExtensions.ToType(System.Data.DbType)">
            <summary>
            Converts a DbType value to .Net type
            </summary>
            <param name="Type">DbType</param>
            <returns>The corresponding .Net type</returns>
        </member>
        <member name="M:DragonSource.Utils.TypeConversionExtensions.TryTo``2(``0,``1)">
            <summary>
            Attempts to convert the object to another type and returns the value
            </summary>
            <typeparam name="T">Type to convert from</typeparam>
            <typeparam name="R">Return type</typeparam>
            <param name="Object">Object to convert</param>
            <param name="DefaultValue">Default value to return if there is an issue or it can't be converted</param>
            <returns>The object converted to the other type or the default value if there is an error or can't be converted</returns>
        </member>
        <member name="M:DragonSource.Utils.TypeConversionExtensions.CallMethod(System.String,System.Object,System.Object[])">
            <summary>
            Calls a method on an object
            </summary>
            <param name="MethodName">Method name</param>
            <param name="Object">Object to call the method on</param>
            <param name="InputVariables">(Optional)input variables for the method</param>
            <returns>The returned value of the method</returns>
        </member>
        <member name="T:DragonSource.Utils.Config.CommonConfigBase">
            <summary>
            公用平台配置基类
            </summary>
        </member>
        <member name="P:DragonSource.Utils.Config.CommonConfigBase.ValidatecodeConfigRoot">
            <summary>
            验证码配置
            </summary>
        </member>
        <member name="P:DragonSource.Utils.Config.CommonConfigBase.MailConfig">
            <summary>
            邮箱相关配置
            </summary>
        </member>
        <member name="P:DragonSource.Utils.Config.CommonConfigBase.LogConfig">
            <summary>
            日志相关配置
            </summary>
        </member>
        <member name="T:DragonUtility.IO.Logging.Enums.MessageType">
            <summary>
            Message type
            </summary>
        </member>
        <member name="F:DragonUtility.IO.Logging.Enums.MessageType.General">
            <summary>
            
            </summary>
        </member>
        <member name="F:DragonUtility.IO.Logging.Enums.MessageType.Debug">
            <summary>
            
            </summary>
        </member>
        <member name="F:DragonUtility.IO.Logging.Enums.MessageType.Trace">
            <summary>
            
            </summary>
        </member>
        <member name="F:DragonUtility.IO.Logging.Enums.MessageType.Info">
            <summary>
            
            </summary>
        </member>
        <member name="F:DragonUtility.IO.Logging.Enums.MessageType.Warn">
            <summary>
            
            </summary>
        </member>
        <member name="F:DragonUtility.IO.Logging.Enums.MessageType.Error">
            <summary>
            
            </summary>
        </member>
        <member name="T:DragonUtility.Enums.E_TableName">
            <summary>
            用户购买的实物配送表TableName
            </summary>
        </member>
        <member name="F:DragonUtility.Enums.E_TableName.用户订购期刊明细表">
            <summary>
            用户订购期刊明细表 = 1
            </summary>
        </member>
        <member name="T:DragonUtility.Enums.E_ReceivingType">
            <summary>
            实物收货状态
            </summary>
        </member>
        <member name="F:DragonUtility.Enums.E_ReceivingType.未发货">
            <summary>
            未发货 = 1
            </summary>
        </member>
        <member name="F:DragonUtility.Enums.E_ReceivingType.已发货">
            <summary>
            已发货 = 2
            </summary>
        </member>
        <member name="F:DragonUtility.Enums.E_ReceivingType.已收货">
            <summary>
            已收货 = 3
            </summary>
        </member>
        <member name="F:DragonUtility.Enums.E_ReceivingType.退货">
            <summary>
            退货 = 4
            </summary>
        </member>
        <member name="T:DragonUtility.Enums.E_PayStatus">
            <summary>
            支付状态
            </summary>
        </member>
        <member name="F:DragonUtility.Enums.E_PayStatus.未付款">
            <summary>
            未付款 = 1
            </summary>
        </member>
        <member name="F:DragonUtility.Enums.E_PayStatus.已付款">
            <summary>
            已付款 = 2
            </summary>
        </member>
        <member name="F:DragonUtility.Enums.E_PayStatus.已确认付款">
            <summary>
            已确认付款 = 3
            </summary>
        </member>
        <member name="F:DragonUtility.Enums.E_PayStatus.已扣费">
            <summary>
            已扣费 = 4
            </summary>
        </member>
        <member name="F:DragonUtility.Enums.E_PayStatus.已退款">
            <summary>
            已退款 = 5
            </summary>
        </member>
        <member name="T:DragonUtility.Enums.E_PayType">
            <summary>
            支付方式
            </summary>
        </member>
        <member name="F:DragonUtility.Enums.E_PayType.邮局汇款">
            <summary>
            邮局汇款 = 1
            </summary>
        </member>
        <member name="F:DragonUtility.Enums.E_PayType.招行一卡通">
            <summary>
            招行一卡通 = 2
            </summary>
        </member>
        <member name="F:DragonUtility.Enums.E_PayType.工行卡">
            <summary>
            工行卡 = 3
            </summary>
        </member>
        <member name="F:DragonUtility.Enums.E_PayType.神州行支付">
            <summary>
            神州行支付 = 4
            </summary>
        </member>
        <member name="F:DragonUtility.Enums.E_PayType.YeePay支付">
            <summary>
            YeePay支付 = 5
            </summary>
        </member>
        <member name="F:DragonUtility.Enums.E_PayType.建行支付">
            <summary>
            建行支付 = 6
            </summary>
        </member>
        <member name="F:DragonUtility.Enums.E_PayType.快钱支付">
            <summary>
            快钱支付 = 7
            </summary>
        </member>
        <member name="F:DragonUtility.Enums.E_PayType.支付宝支付">
            <summary>
            支付宝支付 = 8
            </summary>
        </member>
        <member name="F:DragonUtility.Enums.E_PayType.财富通支付">
            <summary>
            财富通支付 = 9
            </summary>
        </member>
        <member name="F:DragonUtility.Enums.E_PayType.手机支付">
            <summary>
            手机支付 = 10
            </summary>
        </member>
        <member name="F:DragonUtility.Enums.E_PayType.PayPal支付">
            <summary>
            PayPal支付 = 11
            </summary>
        </member>
        <member name="F:DragonUtility.Enums.E_PayType.福建电信">
            <summary>
            福建电信 = 12
            </summary>
        </member>
        <member name="F:DragonUtility.Enums.E_PayType.固定电话支付">
            <summary>
            固定电话支付 = 13
            </summary>
        </member>
        <member name="F:DragonUtility.Enums.E_PayType.Wap支付">
            <summary>
            Wap支付 = 14
            </summary>
        </member>
        <member name="F:DragonUtility.Enums.E_PayType.支付通支付">
            <summary>
            支付通支付 = 15
            </summary>
        </member>
        <member name="T:DragonUtility.Enums.E_ShoppingMemberType">
            <summary>
            商品类型（会员类型）
            </summary>
        </member>
        <member name="F:DragonUtility.Enums.E_ShoppingMemberType.全年ceo会员">
            <summary>
            全年ceo会员 = 1
            </summary>
        </member>
        <member name="F:DragonUtility.Enums.E_ShoppingMemberType.紫光版会员">
            <summary>
            全年ceo会员 = 1
            </summary>
        </member>
        <member name="F:DragonUtility.Enums.E_ShoppingMemberType.充值用户">
            <summary>
            充值用户 = 3
            </summary>
        </member>
        <member name="F:DragonUtility.Enums.E_ShoppingMemberType.充值用户100">
            <summary>
            充值用户100 = 4
            </summary>
        </member>
        <member name="F:DragonUtility.Enums.E_ShoppingMemberType.充值用户30">
            <summary>
            充值用户30 = 5
            </summary>
        </member>
        <member name="F:DragonUtility.Enums.E_ShoppingMemberType.电玩高手">
            <summary>
            电玩高手 = 6
            </summary>
        </member>
        <member name="F:DragonUtility.Enums.E_ShoppingMemberType.城市达人">
            <summary>
            城市达人 = 7
            </summary>
        </member>
        <member name="F:DragonUtility.Enums.E_ShoppingMemberType.故事人生">
            <summary>
            故事人生 = 8
            </summary>
        </member>
        <member name="F:DragonUtility.Enums.E_ShoppingMemberType.人在职场">
             <summary>
            人在职场 = 9
             </summary>
        </member>
        <member name="F:DragonUtility.Enums.E_ShoppingMemberType.经理人">
            <summary>
            经理人 = 10
            </summary>
        </member>
        <member name="F:DragonUtility.Enums.E_ShoppingMemberType.生活家">
            <summary>
            生活家 = 11
            </summary>
        </member>
        <member name="F:DragonUtility.Enums.E_ShoppingMemberType.包月会员">
            <summary>
            包月会员 = 12
            </summary>
        </member>
        <member name="F:DragonUtility.Enums.E_ShoppingMemberType.全年vip会员">
            <summary>
            全年vip会员 = 13
            </summary>
        </member>
        <member name="F:DragonUtility.Enums.E_ShoppingMemberType.易博士版会员">
            <summary>
            易博士版会员 = 14
            </summary>
        </member>
        <member name="T:DragonUtility.Enums.E_TimeType">
            <summary>
            商品中的时间类型
            </summary>
        </member>
        <member name="F:DragonUtility.Enums.E_TimeType.年">
            <summary>
            年 = 1
            </summary>
        </member>
        <member name="F:DragonUtility.Enums.E_TimeType.季">
            <summary>
            季 = 2
            </summary>
        </member>
        <member name="F:DragonUtility.Enums.E_TimeType.月">
            <summary>
            月 = 3
            </summary>
        </member>
        <member name="F:DragonUtility.Enums.E_TimeType.周">
            <summary>
            周 = 4
            </summary>
        </member>
        <member name="F:DragonUtility.Enums.E_TimeType.日">
            <summary>
            日 = 5
            </summary>
        </member>
        <member name="T:DragonUtility.Enums.E_PhysicsType">
            <summary>
            购买实物类型
            </summary>
        </member>
        <member name="F:DragonUtility.Enums.E_PhysicsType.龙源阅读器">
            <summary>
            龙源阅读器 = 1
            </summary>
        </member>
        <member name="F:DragonUtility.Enums.E_PhysicsType.紫光阅读器">
            <summary>
            紫光阅读器 = 2
            </summary>
        </member>
        <member name="F:DragonUtility.Enums.E_PhysicsType.购买纸版">
            <summary>
            购买纸版 = 3
            </summary>
        </member>
        <member name="T:DragonUtility.Enums.E_UserExtensionType">
            <summary>
            用户信息扩展信息
            </summary>
        </member>
        <member name="F:DragonUtility.Enums.E_UserExtensionType.真实姓名">
            <summary>
            真实姓名 = 1
            </summary>
        </member>
        <member name="F:DragonUtility.Enums.E_UserExtensionType.家庭住址">
            <summary>
            家庭住址 = 2
            </summary>
        </member>
        <member name="F:DragonUtility.Enums.E_UserExtensionType.国家">
            <summary>
            国家 = 3
            </summary>
        </member>
        <member name="F:DragonUtility.Enums.E_UserExtensionType.省份">
            <summary>
            省份 = 4
            </summary>
        </member>
        <member name="F:DragonUtility.Enums.E_UserExtensionType.城市">
            <summary>
            城市 = 5
            </summary>
        </member>
        <member name="F:DragonUtility.Enums.E_UserExtensionType.邮政编码">
            <summary>
            邮政编码 = 6
            </summary>
        </member>
        <member name="F:DragonUtility.Enums.E_UserExtensionType.固定电话">
            <summary>
            固定电话 = 7
            </summary>
        </member>
        <member name="F:DragonUtility.Enums.E_UserExtensionType.移动电话">
            <summary>
            移动电话 = 8
            </summary>
        </member>
        <member name="F:DragonUtility.Enums.E_UserExtensionType.传真">
            <summary>
            传真 = 9
            </summary>
        </member>
        <member name="F:DragonUtility.Enums.E_UserExtensionType.出生日期">
            <summary>
            出生日期 = 10
            </summary>
        </member>
        <member name="F:DragonUtility.Enums.E_UserExtensionType.性别">
            <summary>
            性别 = 11
            </summary>
        </member>
        <member name="F:DragonUtility.Enums.E_UserExtensionType.婚姻状况">
            <summary>
            婚姻状况 = 12
            </summary>
        </member>
        <member name="F:DragonUtility.Enums.E_UserExtensionType.学历">
            <summary>
            学历 = 13
            </summary>
        </member>
        <member name="F:DragonUtility.Enums.E_UserExtensionType.血型">
            <summary>
            血型 = 14
            </summary>
        </member>
        <member name="F:DragonUtility.Enums.E_UserExtensionType.星座">
            <summary>
            星座 = 15
            </summary>
        </member>
        <member name="F:DragonUtility.Enums.E_UserExtensionType.腾讯QQ">
            <summary>
            腾讯QQ = 16
            </summary>
        </member>
        <member name="F:DragonUtility.Enums.E_UserExtensionType.MSN">
            <summary>
            MSN = 17
            </summary>
        </member>
        <member name="F:DragonUtility.Enums.E_UserExtensionType.所属行业">
            <summary>
            所属行业 = 18
            </summary>
        </member>
        <member name="F:DragonUtility.Enums.E_UserExtensionType.公司名称">
            <summary>
            公司名称 = 19
            </summary>
        </member>
        <member name="F:DragonUtility.Enums.E_UserExtensionType.公司地址">
            <summary>
            公司地址 = 20
            </summary>
        </member>
        <member name="F:DragonUtility.Enums.E_UserExtensionType.公司人数">
            <summary>
            公司人数 = 21
            </summary>
        </member>
        <member name="F:DragonUtility.Enums.E_UserExtensionType.职位名称">
            <summary>
            职位名称 = 22
            </summary>
        </member>
        <member name="F:DragonUtility.Enums.E_UserExtensionType.创建日期">
            <summary>
            创建日期 = 23
            </summary>
        </member>
        <member name="F:DragonUtility.Enums.E_UserExtensionType.是否发送邮件海外">
            <summary>
            是否发送邮件海外
            </summary>
        </member>
        <member name="F:DragonUtility.Enums.E_UserExtensionType.备用邮箱">
            <summary>
            备用邮箱 = 25
            </summary>
        </member>
        <member name="F:DragonUtility.Enums.E_UserExtensionType.名字">
            <summary>
            名字 = 26
            </summary>
        </member>
        <member name="F:DragonUtility.Enums.E_UserExtensionType.姓氏">
            <summary>
            姓氏 = 27
            </summary>
        </member>
        <member name="F:DragonUtility.Enums.E_UserExtensionType.家庭住址1">
            <summary>
            家庭住址1 = 28
            </summary>
        </member>
        <member name="F:DragonUtility.Enums.E_UserExtensionType.家庭住址2">
            <summary>
            家庭住址2 = 29
            </summary>
        </member>
        <member name="F:DragonUtility.Enums.E_UserExtensionType.洲">
            <summary>
             洲 = 30
            </summary>
        </member>
        <member name="F:DragonUtility.Enums.E_UserExtensionType.商务电话">
            <summary>
            商务电话 = 31
            </summary>
        </member>
        <member name="F:DragonUtility.Enums.E_UserExtensionType.商务电话分机">
            <summary>
            商务电话分机 = 32
            </summary>
        </member>
        <member name="F:DragonUtility.Enums.E_UserExtensionType.其他电话">
            <summary>
            其他电话 = 33
            </summary>
        </member>
        <member name="F:DragonUtility.Enums.E_UserExtensionType.其他电话分机">
            <summary>
            其他电话分机 = 34
            </summary>
        </member>
        <member name="F:DragonUtility.Enums.E_UserExtensionType.大学名称">
            <summary>
            大学名称 = 35
            </summary>
        </member>
        <member name="F:DragonUtility.Enums.E_UserExtensionType.大学网址">
            <summary>
            大学网址 = 36
            </summary>
        </member>
        <member name="F:DragonUtility.Enums.E_UserExtensionType.科系">
            <summary>
            科系 = 37
            </summary>
        </member>
        <member name="F:DragonUtility.Enums.E_UserExtensionType.头衔">
            <summary>
            头衔 = 38
            </summary>
        </member>
        <member name="F:DragonUtility.Enums.E_UserExtensionType.主修专业">
            <summary>
            主修专业 = 39
            </summary>
        </member>
        <member name="F:DragonUtility.Enums.E_UserExtensionType.兴趣分类">
            <summary>
            兴趣分类 = 40
            </summary>
        </member>
        <member name="F:DragonUtility.Enums.E_UserExtensionType.单位用户类型">
            <summary>
            单位用户类型 = 41
            </summary>
        </member>
        <member name="F:DragonUtility.Enums.E_UserExtensionType.单位变更时间">
            <summary>
            单位变更时间 = 42
            </summary>
        </member>
        <member name="F:DragonUtility.Enums.E_UserExtensionType.是否发送邮件">
            <summary>
            是否发送邮件 = 43
            </summary>
        </member>
        <member name="F:DragonUtility.Enums.E_UserExtensionType.职业">
            <summary>
            职业 = 44
            </summary>
        </member>
        <member name="F:DragonUtility.Enums.E_UserExtensionType.常看书籍">
            <summary>
            常看书籍 = 45
            </summary>
        </member>
        <member name="F:DragonUtility.Enums.E_UserExtensionType.常看期刊">
            <summary>
            常看期刊 = 46
            </summary>
        </member>
        <member name="F:DragonUtility.Enums.E_UserExtensionType.兴趣爱好">
            <summary>
            兴趣爱好 = 47
            </summary>
        </member>
        <member name="F:DragonUtility.Enums.E_UserExtensionType.昵称">
            <summary>
            昵称 = 48
            </summary>
        </member>
        <member name="F:DragonUtility.Enums.E_UserExtensionType.工作单位">
            <summary>
            工作单位 = 49
            </summary>
        </member>
        <member name="F:DragonUtility.Enums.E_UserExtensionType.邮寄人">
            <summary>
            邮寄人 = 50
            </summary>
        </member>
        <member name="F:DragonUtility.Enums.E_UserExtensionType.是否包月用户">
            <summary>
            是否包月用户 = 51
            </summary>
        </member>
        <member name="F:DragonUtility.Enums.E_UserExtensionType.包月开始时间">
            <summary>
            包月开始时间 = 52
            </summary>
        </member>
        <member name="F:DragonUtility.Enums.E_UserExtensionType.包月结束时间">
            <summary>
            包月结束时间 = 53
            </summary>
        </member>
        <member name="F:DragonUtility.Enums.E_UserExtensionType.注册IP">
            <summary>
            注册IP = 54
            </summary>
        </member>
        <member name="F:DragonUtility.Enums.E_UserExtensionType.用户类型">
            <summary>
            用户类型 = 55
            </summary>
        </member>
        <member name="F:DragonUtility.Enums.E_UserExtensionType.年龄范围">
            <summary>
            年龄范围 = 56
            </summary>
        </member>
        <member name="F:DragonUtility.Enums.E_UserExtensionType.公网Pad机器码">
            <summary>
            公网Pad机器码 = 57
            </summary>
        </member>
        <member name="F:DragonUtility.Enums.E_UserExtensionType.机构Pad机器码">
            <summary>
            机构Pad机器码 = 58
            </summary>
        </member>
        <member name="F:DragonUtility.Enums.E_UserExtensionType.是否虚拟用户">
            <summary>
            是否虚拟用户 = 59
            </summary>
        </member>
        <member name="F:DragonUtility.Enums.E_UserExtensionType.用户国家">
            <summary>
            用户国家 = 60
            </summary>
        </member>
        <member name="F:DragonUtility.Enums.E_UserExtensionType.登录次数">
            <summary>
            登录次数 = 61
            </summary>
        </member>
        <member name="F:DragonUtility.Enums.E_UserExtensionType.安全问题">
            <summary>
            海外项目使用
            </summary>
        </member>
        <member name="F:DragonUtility.Enums.E_UserExtensionType.安全问题答案">
            <summary>
            海外项目使用
            </summary>
        </member>
        <member name="F:DragonUtility.Enums.E_UserExtensionType.您的位置海外">
            <summary>
            海外项目使用
            </summary>
        </member>
        <member name="F:DragonUtility.Enums.E_UserExtensionType.工作性质海外">
            <summary>
            海外项目使用
            </summary>
        </member>
        <member name="T:DragonUtility.Enums.E_UserAccountDetailsType">
            <summary>
            账户明细对应表名称
            </summary>
        </member>
        <member name="F:DragonUtility.Enums.E_UserAccountDetailsType.订单充值">
            <summary>
            订单充值 = 1
            </summary>
        </member>
        <member name="F:DragonUtility.Enums.E_UserAccountDetailsType.充值卡充值">
            <summary>
            充值卡充值 = 2
            </summary>
        </member>
        <member name="F:DragonUtility.Enums.E_UserAccountDetailsType.购买的会员">
            <summary>
            购买的会员 = 3
            </summary>
        </member>
        <member name="F:DragonUtility.Enums.E_UserAccountDetailsType.购买的图书">
            <summary>
            购买的图书 = 4
            </summary>
        </member>
        <member name="F:DragonUtility.Enums.E_UserAccountDetailsType.购买的杂志">
            <summary>
            购买的杂志 = 5
            </summary>
        </member>
        <member name="F:DragonUtility.Enums.E_UserAccountDetailsType.购买的文章">
            <summary>
            购买的文章 = 6
            </summary>
        </member>
        <member name="T:DragonUtility.Enums.E_AccountInOutType">
            <summary>
            进出帐信息
            </summary>
        </member>
        <member name="F:DragonUtility.Enums.E_AccountInOutType.出账">
            <summary>
            出账 = 0
            </summary>
        </member>
        <member name="F:DragonUtility.Enums.E_AccountInOutType.进账">
            <summary>
            进账 = 1
            </summary>
        </member>
        <member name="T:DragonUtility.Enums.E_CurrencyType">
            <summary>
            货币币种
            </summary>
        </member>
        <member name="F:DragonUtility.Enums.E_CurrencyType.人民币">
            <summary>
            人民币 = 1
            </summary>
        </member>
        <member name="F:DragonUtility.Enums.E_CurrencyType.美元">
            <summary>
            美元 = 2
            </summary>
        </member>
        <member name="T:DragonUtility.Enums.E_RegisterResult">
            <summary>
            注册结论
            </summary>
        </member>
        <member name="F:DragonUtility.Enums.E_RegisterResult.注册成功">
            <summary>
            注册成功 = 1,
            </summary>
        </member>
        <member name="F:DragonUtility.Enums.E_RegisterResult.邮箱冲突">
            <summary>
            邮箱冲突 = 2,
            </summary>
        </member>
        <member name="F:DragonUtility.Enums.E_RegisterResult.登录名冲突">
            <summary>
            登录名冲突 = 3,
            </summary>
        </member>
        <member name="F:DragonUtility.Enums.E_RegisterResult.登录名不规范">
            <summary>
            登录名不规范 = 4,
            </summary>
        </member>
        <member name="F:DragonUtility.Enums.E_RegisterResult.注册失败">
            <summary>
            注册失败 = 5,
            </summary>
        </member>
        <member name="F:DragonUtility.Enums.E_RegisterResult.手机号有冲突">
            <summary>
            手机号有冲突 = 6,
            </summary>
        </member>
        <member name="F:DragonUtility.Enums.E_RegisterResult.更新成功">
            <summary>
            更新成功 = 7,
            </summary>
        </member>
        <member name="F:DragonUtility.Enums.E_RegisterResult.更新失败">
            <summary>
            更新失败 = 8,
            </summary>
        </member>
        <member name="F:DragonUtility.Enums.E_RegisterResult.手机号不规范">
            <summary>
            手机号不规范 = 9,
            </summary>
        </member>
        <member name="T:DragonUtility.Enums.E_ReadType">
            <summary>
            文章访问类型
            </summary>
        </member>
        <member name="F:DragonUtility.Enums.E_ReadType.购买">
            <summary>
            购买 = 1
            </summary>
        </member>
        <member name="F:DragonUtility.Enums.E_ReadType.包月阅读">
            <summary>
            包月阅读 = 2
            </summary>
        </member>
        <member name="T:DragonUtility.Enums.E_BuyWay">
            <summary>
            用户权限购买方式
            </summary>
            <remarks>
            <para>
            在线支付,对应订单编号<br/>
            充值卡,对应充值卡号
            </para>
            </remarks>  
        </member>
        <member name="F:DragonUtility.Enums.E_BuyWay.在线支付">
            <summary>
            在线支付 = 1
            </summary>
        </member>
        <member name="F:DragonUtility.Enums.E_BuyWay.充值卡">
            <summary>
            充值卡 = 2
            </summary>
        </member>
        <member name="F:DragonUtility.Enums.E_BuyWay.帐户表支付">
            <summary>
            帐户表支付 = 3
            </summary>
        </member>
        <member name="T:DragonUtility.Enums.E_CardType">
            <summary>
            阅读卡模块
            </summary>
        </member>
        <member name="F:DragonUtility.Enums.E_CardType.普通充值卡">
            <summary>
            普通充值卡 = 1
            </summary>
        </member>
        <member name="F:DragonUtility.Enums.E_CardType.促销包月卡">
            <summary>
            促销包月卡 = 2
            </summary>
        </member>
        <member name="F:DragonUtility.Enums.E_CardType.企业线上杂志推广卡">
            <summary>
            企业线上杂志推广卡 = 3
            </summary>
        </member>
        <member name="F:DragonUtility.Enums.E_CardType.vip包年卡">
            <summary>
            vip包年卡 = 4
            </summary>
        </member>
        <member name="F:DragonUtility.Enums.E_CardType.ceo包年会员卡">
            <summary>
            ceo包年会员卡 = 5
            </summary>
        </member>
        <member name="F:DragonUtility.Enums.E_CardType.杂志阅读卡">
            <summary>
            杂志阅读卡 = 6
            </summary>
        </member>
        <member name="F:DragonUtility.Enums.E_CardType.一卡供多人使用的杂志阅读卡">
            <summary>
            一卡供多人使用的杂志阅读卡 = 7
            </summary>
        </member>
        <member name="F:DragonUtility.Enums.E_CardType.易博士包两年卡">
            <summary>
            易博士包两年卡 = 8
            </summary>
        </member>
        <member name="F:DragonUtility.Enums.E_CardType.紫光包年卡">
            <summary>
            紫光包年卡 = 9
            </summary>
        </member>
        <member name="T:DragonUtility.Enums.E_RegStatus">
            <summary>
            充值卡用途登记状态
            </summary>
        </member>
        <member name="F:DragonUtility.Enums.E_RegStatus.未登记">
            <summary>
            未登记 = 0
            </summary>
        </member>
        <member name="F:DragonUtility.Enums.E_RegStatus.已登记">
            <summary>
            已登记 = 1
            </summary>
        </member>
        <member name="T:DragonUtility.Enums.E_CardStatus">
            <summary>
            会员卡状态
            </summary>
        </member>
        <member name="F:DragonUtility.Enums.E_CardStatus.未启用">
            <summary>
            未启用 = 1
            </summary>
        </member>
        <member name="F:DragonUtility.Enums.E_CardStatus.未激活">
            <summary>
            未激活 = 2
            </summary>
        </member>
        <member name="F:DragonUtility.Enums.E_CardStatus.已激活">
            <summary>
            已激活 = 3
            </summary>
        </member>
        <member name="T:DragonUtility.Enums.E_BuyMagazineType">
            <summary>
            购物车杂志类型
            </summary>
        </member>
        <member name="F:DragonUtility.Enums.E_BuyMagazineType.单期">
            <summary>
            单期 = 1
            </summary>
        </member>
        <member name="F:DragonUtility.Enums.E_BuyMagazineType.全年">
            <summary>
            全年 = 2
            </summary>
        </member>
        <member name="F:DragonUtility.Enums.E_BuyMagazineType.整刊">
            <summary>
            整刊 = 3
            </summary>
        </member>
        <member name="F:DragonUtility.Enums.E_BuyMagazineType.购买文章">
            <summary>
            购买文章 = 4
            </summary>
        </member>
        <member name="F:DragonUtility.Enums.E_BuyMagazineType.某年期前过刊">
            <summary>
            某年期前过刊 = 5
            </summary>
        </member>
        <member name="F:DragonUtility.Enums.E_BuyMagazineType.易博士版">
            <summary>
            易博士版 = 6
            </summary>
        </member>
        <member name="F:DragonUtility.Enums.E_BuyMagazineType.紫光版">
            <summary>
            紫光版 = 7
            </summary>
        </member>
        <member name="T:DragonUtility.Enums.E_Sort">
            <summary>
            排序方式
            </summary>
        </member>
        <member name="F:DragonUtility.Enums.E_Sort.升序">
            <summary>
            升序 = 1
            </summary>
        </member>
        <member name="F:DragonUtility.Enums.E_Sort.降序">
            <summary>
            降序 = 2
            </summary>
        </member>
        <member name="T:DragonSource.Utils.Logic.MagazinePath">
            <summary>
            期刊
            </summary>
        </member>
        <member name="M:DragonSource.Utils.Logic.MagazinePath.MagazineCoverImage(System.String,System.Int32,System.Int32,DragonSource.Utils.Logic.E_CoverImage)">
            <summary>
            期刊封面
            </summary>
            <param name="codename"></param>
            <param name="year"></param>
            <param name="issue"></param>
            <param name="cover"></param>
            <returns></returns>
        </member>
        <member name="M:DragonSource.Utils.Logic.MagazinePath.OriginalImage(System.String,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            原貌图片
            </summary>
            <returns></returns>
        </member>
        <member name="M:DragonSource.Utils.Logic.MagazinePath.OriginalThumbnailImage(System.String,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            原貌图片缩略图
            </summary>
            <param name="CodeName"></param>
            <param name="Year"></param>
            <param name="Issue"></param>
            <param name="StartPage"></param>
            <param name="PageCount"></param>
            <returns></returns>
        </member>
        <member name="M:DragonSource.Utils.Logic.MagazinePath.OriginalCatalogXml(System.String,System.Int32,System.Int32)">
            <summary>
            原貌目录
            </summary>
            <param name="CodeName"></param>
            <param name="Year"></param>
            <param name="Issue"></param>
            <returns></returns>
        </member>
        <member name="M:DragonSource.Utils.Logic.MagazinePath.ArticleImageUrl(System.String,System.Int32,System.Int32,System.String)">
            <summary>
            文章图片
            </summary>
            <param name="CodeName"></param>
            <param name="Year"></param>
            <param name="Issue"></param>
            <param name="ImgFileName"></param>
        </member>
        <member name="M:DragonSource.Utils.Logic.MagazinePath.GetArticleContentWithImgHost(System.String)">
            <summary>
            处理文章内容里的内文图片，使其附带上正确的图片服务器地址与防盗保护处理
            </summary>
            <param name="szContent">文章内容</param>
            <returns>附带上图片服务器地址与防盗处理的文章内容</returns>
        </member>
        <member name="M:DragonSource.Utils.Logic.MagazinePath.MultimediaFile(System.String,System.Int32,System.Int32)">
            <summary>
            多媒体下载地址
            </summary>
            <param name="CodeName"></param>
            <param name="Year"></param>
            <param name="Issue"></param>
            <returns></returns>
        </member>
        <member name="M:DragonSource.Utils.Logic.MagazinePath.EReaderFile(System.String,System.Int32,System.Int32,System.String)">
            <summary>
            易博士期刊下载
            </summary>
            <param name="CodeName"></param>
            <param name="Year"></param>
            <param name="Issue"></param>
            <param name="MagazineName"></param>
            <returns></returns>
        </member>
        <member name="M:DragonSource.Utils.Logic.MagazinePath.TTSVoiceFile(System.String,System.String)">
            <summary>
            TTS语音文件路径
            </summary>
            <param name="TitleID"></param>
            <param name="Title"></param>
            <returns></returns>
        </member>
        <member name="M:DragonSource.Utils.Logic.MagazinePath.PeopleVoiceFile(System.String,System.String)">
            <summary>
            人声语音文件
            </summary>
            <param name="TitleID"></param>
            <param name="Title"></param>
            <returns></returns>
        </member>
        <member name="M:DragonSource.Utils.Logic.MagazinePath.ArticlePDF(System.String)">
            <summary>
            文章PDF
            </summary>
            <param name="TitleID"></param>
            <returns></returns>
        </member>
        <member name="M:DragonSource.Utils.Logic.MagazinePath.ArticleXml(System.String,System.Boolean)">
            <summary>
            期刊文章
            </summary>
            <param name="titleid"></param>
            <param name="has">当杂志超过99期时，获取99期之后的文章方式调整</param>
            <returns></returns>
        </member>
        <member name="M:DragonSource.Utils.Logic.MagazinePath.TextCatalogXml(System.Int32,System.Int32,System.String)">
            <summary>
            期刊目录
            </summary>
            <param name="Year"></param>
            <param name="Issue"></param>
            <param name="CodeName"></param>
            <returns></returns>
        </member>
        <member name="M:DragonSource.Utils.Logic.MagazinePath.MagazineAwards(System.String)">
            <summary>
            期刊奖项图片
            </summary>
            <param name="imgname">图片名称</param>
            <returns></returns>
        </member>
        <member name="T:DragonSource.Utils.Logic.OtherArticlePath">
            <summary>
            投稿荐稿
            </summary>
        </member>
        <member name="M:DragonSource.Utils.Logic.OtherArticlePath.DeliverPaperFeatureImage(System.String)">
            <summary>
            获取投稿专栏图片路径
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:DragonSource.Utils.Logic.OtherArticlePath.InterviewImage(System.String)">
            <summary>
            获取主编头像图片的时候是Editor_ImgName字段，获取主编文章中的信息的时候传LivingPic字段
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:DragonSource.Utils.Logic.OtherArticlePath.WriterImage(System.String)">
            <summary>
            名家名作
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:DragonSource.Utils.Logic.OtherArticlePath.ArticelXml(System.String)">
            <summary>
            投荐稿文章
            </summary>
            <param name="titleid"></param>
            <returns></returns>
        </member>
        <member name="T:DragonSource.Utils.Logic.VideoPath">
            <summary>
            视频
            </summary>
        </member>
        <member name="M:DragonSource.Utils.Logic.VideoPath.FlvFile(System.String)">
            <summary>
            FLV视频文件路径
            </summary>
            <param name="titleid"></param>
            <returns></returns>
        </member>
        <member name="M:DragonSource.Utils.Logic.VideoPath.MP4File(System.String)">
            <summary>
            MP4视频文件路径
            </summary>
            <param name="titleid"></param>
            <returns></returns>
        </member>
        <member name="M:DragonSource.Utils.Logic.VideoPath.SmallCoverImage(System.String)">
            <summary>
            视频大图
            </summary>
            <param name="titleid"></param>
            <returns></returns>
        </member>
        <member name="M:DragonSource.Utils.Logic.VideoPath.BigCoverImage(System.String)">
            <summary>
            视频小图
            </summary>
            <param name="titleid"></param>
            <returns></returns>
        </member>
        <member name="T:DragonSource.Utils.Logic.HBRPath">
            <summary>
            哈弗
            </summary>
        </member>
        <member name="M:DragonSource.Utils.Logic.HBRPath.Article(System.Int32)">
            <summary>
            哈佛文章
            </summary>
            <param name="contentid"></param>
            <returns></returns>
        </member>
        <member name="T:DragonSource.Utils.Logic.BookPath">
            <summary>
            图书
            </summary>
        </member>
        <member name="M:DragonSource.Utils.Logic.BookPath.DJVUReaderUrl(System.String)">
            <summary>
            Djvu图书的阅读地址
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:DragonSource.Utils.Logic.BookPath.BookCoverImage(System.String)">
            <summary>
            电子书封面
            </summary>
            <param name="codename"></param>
            <returns></returns>
        </member>
        <member name="M:DragonSource.Utils.Logic.BookPath.OriginalImage(System.String,System.Int32,System.Int32)">
            <summary>
            原貌图书图片
            </summary>
            <param name="codename"></param>
            <param name="StartPage"></param>
            <param name="PageCount"></param>
            <returns></returns>
        </member>
        <member name="M:DragonSource.Utils.Logic.BookPath.OriginalThumbnailImage(System.String,System.Int32,System.Int32)">
            <summary>
            原貌图书缩略图
            </summary>
            <param name="codename"></param>
            <param name="StartPage"></param>
            <param name="PageCount"></param>
            <returns></returns>
        </member>
        <member name="M:DragonSource.Utils.Logic.BookPath.EReaderFile(System.String,System.Int32,System.String)">
            <summary>
            易博士下载地址
            </summary>
            <param name="codename"></param>
            <param name="year"></param>
            <param name="bookname"></param>
            <returns></returns>
        </member>
        <member name="M:DragonSource.Utils.Logic.BookPath.ArticleXml(System.String,System.String)">
            <summary>
            图书文章
            </summary>
        </member>
        <member name="M:DragonSource.Utils.Logic.BookPath.TextCatalogXml(System.String)">
            <summary>
            图书目录
            </summary>
            <param name="bookguid"></param>
            <returns></returns>
        </member>
        <member name="T:DragonSource.Utils.Logic.OtherPath">
            <summary>
            其他
            </summary>
        </member>
        <member name="M:DragonSource.Utils.Logic.OtherPath.BlogUrl(System.String)">
            <summary>
            博客地址
            </summary>
            <param name="blogId"></param>
            <returns></returns>
        </member>
        <member name="M:DragonSource.Utils.Logic.OtherPath.BlogArticleUrl(System.String,System.String)">
            <summary>
            博客文章地址
            </summary>
            <param name="blogId"></param>
            <param name="articleId"></param>
            <returns></returns>
        </member>
        <member name="M:DragonSource.Utils.Logic.OtherPath.HeaderImage(System.String)">
            <summary>
            用户头像地址
            </summary>
            <param name="dir"></param>
            <returns></returns>
        </member>
        <member name="T:DragonSource.Utils.Logic.FeaturePath">
            <summary>
            专题
            </summary>
        </member>
        <member name="M:DragonSource.Utils.Logic.FeaturePath.FeatureImage(System.String)">
            <summary>
            专题图片
            </summary>
            <param name="imgname"></param>
            <returns></returns>
        </member>
        <member name="T:DragonSource.Utils.Logic.NewsPaperPath">
            <summary>
            报纸路径封装
            </summary>
        </member>
        <member name="M:DragonSource.Utils.Logic.NewsPaperPath.ArticleXml(System.String)">
            <summary>
            文章
            </summary>
            <param name="titleid"></param>
            <returns></returns>
        </member>
        <member name="M:DragonSource.Utils.Logic.NewsPaperPath.CataLogXml(System.Int32,System.Int32,System.String)">
            <summary>
            目录
            </summary>
            <param name="Year"></param>
            <param name="Issue"></param>
            <param name="CodeName"></param>
            <returns></returns>
        </member>
        <member name="M:DragonSource.Utils.Logic.NewsPaperPath.CoverImage(System.String,System.Int32,System.Int32,DragonSource.Utils.Logic.E_CoverImage)">
            <summary>
            封面图片
            </summary>
            <param name="codename"></param>
            <param name="year"></param>
            <param name="issue"></param>
            <param name="cover"></param>
            <returns></returns>
        </member>
        <member name="T:DragonSource.Utils.Logic.ImageProtection">
            <summary>
            图片防盗帮助类,加密密钥可由web.config或者app.config文件中的appSettings节点key为ImageProtection_EncryptKey的值(value)来覆盖
            </summary>
        </member>
        <member name="M:DragonSource.Utils.Logic.ImageProtection.GetProtectedImageUrl(System.String)">
            <summary>
            产生一个带图片防盗后缀参数的图片URL地址<![CDATA[
            如：RequestImageUrl="http://www.imagetest.com/nyxb201406-l.jpg",将会产生一个类似“http://www.imagetest.com/nyxb201406-l.jpg?k=b9a3ded8f18ab8de1c2e0937bd54cc45”之类的输出，注意是类似，并不是一成不变的
            ]]>
            </summary>
            <param name="RequestImageUrl">Image的请求地址,如：
            <![CDATA[
            http://flip.qikan.com.cn/qkFlipPage/2014/nyxb/2014/nyxb2014__06/Level_000/0091_0000_0000.jpg
            ]]></param>
            <returns></returns>
        </member>
        <member name="M:DragonSource.Utils.Logic.ImageProtection.CheckEncryptKey(System.Web.HttpRequest)">
            <summary>
            验证图片防盗字符串是否正确
            </summary>
            <param name="request">当前请求</param>
            <returns></returns>
        </member>
        <member name="M:DragonSource.Utils.Logic.ImageProtection.GenerateKey(System.Uri)">
            <summary>
            根据Url生成图片保护后缀加密字符串
            </summary>
            <param name="url"></param>
            <returns></returns>
        </member>
        <member name="T:DragonUtility.Validate.ValidateUtil">
            <summary>
            验证字符串是否合法
            </summary>
        </member>
        <member name="M:DragonUtility.Validate.ValidateUtil.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:DragonUtility.Validate.ValidateUtil.isNumeric(System.String)">
            <summary>是否数字</summary>
            <param name="strInput">输入字符串</param>
            <returns>true/false</returns>
        </member>
        <member name="M:DragonUtility.Validate.ValidateUtil.isDate(System.String)">
            <summary>是否日期</summary>
            <param name="strInput">输入字符串</param>
            <returns>true/false</returns>
        </member>
        <member name="M:DragonUtility.Validate.ValidateUtil.isDate(System.String,System.String,System.String)">
            <summary>
            检查年月日是否合法
            </summary>
            <param name="year"></param>
            <param name="month"></param>
            <param name="day"></param>
            <returns></returns>
        </member>
        <member name="M:DragonUtility.Validate.ValidateUtil.isTel(System.String)">
            <summary>是否为合法的电话号码</summary>
            <param name="strInput">输入字符串</param>
            <returns>true/false</returns>
        </member>
        <member name="M:DragonUtility.Validate.ValidateUtil.isPostCode(System.String)">
            <summary>是否为中国邮政编码</summary>
            <param name="strInput">输入字符串</param>
            <returns>true/false</returns>
        </member>
        <member name="M:DragonUtility.Validate.ValidateUtil.isEmail(System.String)">
            <summary>是否为合法的电子邮件</summary>
            <param name="strInput">输入字符串</param>
            <returns>true/false</returns>
        </member>
        <member name="M:DragonUtility.Validate.ValidateUtil.isBirthday(System.String)">
            <summary>
            是否为生日
            </summary>
            <param name="strInput">输入字符串</param>
            <returns>true/false</returns>
        </member>
        <member name="M:DragonUtility.Validate.ValidateUtil.IsNaturalNumber(System.String)">
            <summary>
            判断是否为自然数
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:DragonUtility.Validate.ValidateUtil.isEnglishOrDigital(System.String)">
            <summary>
            验证是否为数字或英文
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:DragonUtility.Validate.ValidateUtil.IsChinaese(System.String)">
            <summary>
            验证是否为中文
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:DragonUtility.Validate.ValidateUtil.RegexCheck(System.String,System.String)">
            <summary>
            是否满足正则校验
            </summary>
            <param name="zhengze_str">正则表达式</param>
            <param name="str">要判断的字符串</param>
            <returns></returns>
        </member>
        <member name="M:DragonUtility.Validate.ValidateUtil.HasDangerousSQL(System.String)">
            <summary>
            检测是否含有危险字符（防止Sql注入）
            </summary>
            <param name="contents">预检测的内容</param>
            <returns>返回True或false</returns>
        </member>
        <member name="M:DragonUtility.Validate.ValidateUtil.HasDangerousScript(System.String)">
            <summary>
            文本注入防范,主要去除script,iframe
            </summary>
            <param name="val">字符串</param>
            <returns>结果</returns>
        </member>
        <member name="T:DragonUtility.Enums.E_NPState">
            <summary>
            
            </summary>
        </member>
        <member name="F:DragonUtility.Enums.E_NPState.签约">
            <summary>
            签约 = 1
            </summary>
        </member>
        <member name="F:DragonUtility.Enums.E_NPState.改刊">
            <summary>
            改刊 = 2
            </summary>
        </member>
        <member name="F:DragonUtility.Enums.E_NPState.隐藏">
            <summary>
            隐藏 = 3
            </summary>
        </member>
        <member name="F:DragonUtility.Enums.E_NPState.休刊">
            <summary>
            休刊 = 4
            </summary>
        </member>
        <member name="F:DragonUtility.Enums.E_NPState.停刊">
            <summary>
            停刊 = 5
            </summary>
        </member>
        <member name="F:DragonUtility.Enums.E_NPState.续约中">
            <summary>
            续约中 = 6
            </summary>
        </member>
        <member name="F:DragonUtility.Enums.E_NPState.停止合作">
            <summary>
            停止合作 = 7
            </summary>
        </member>
        <member name="F:DragonUtility.Enums.E_NPState.默认合作">
            <summary>
            默认合作 = 8
            </summary>
        </member>
        <member name="T:DragonUtility.Enums.E_NPCycle">
            <summary>
            E_NPCycle
            </summary>
        </member>
        <member name="F:DragonUtility.Enums.E_NPCycle.日报">
            <summary>
            日报 =1
            </summary>
        </member>
        <member name="F:DragonUtility.Enums.E_NPCycle.周一报">
            <summary>
            
            </summary>
        </member>
        <member name="F:DragonUtility.Enums.E_NPCycle.周二报">
            <summary>
            
            </summary>
        </member>
        <member name="F:DragonUtility.Enums.E_NPCycle.周三报">
            <summary>
            
            </summary>
        </member>
        <member name="F:DragonUtility.Enums.E_NPCycle.周四报">
            <summary>
            
            </summary>
        </member>
        <member name="F:DragonUtility.Enums.E_NPCycle.周五报">
            <summary>
            
            </summary>
        </member>
        <member name="F:DragonUtility.Enums.E_NPCycle.周六报">
            <summary>
            
            </summary>
        </member>
        <member name="F:DragonUtility.Enums.E_NPCycle.半月报">
            <summary>
            
            </summary>
        </member>
        <member name="F:DragonUtility.Enums.E_NPCycle.双周报">
            <summary>
            
            </summary>
        </member>
        <member name="F:DragonUtility.Enums.E_NPCycle.月报">
            <summary>
            
            </summary>
        </member>
        <member name="T:DragonUtility.Enums.E_NPType">
            <summary>
            
            </summary>
        </member>
        <member name="F:DragonUtility.Enums.E_NPType.文本版">
            <summary>
            文本版 = 1
            </summary>
        </member>
        <member name="T:DragonUtility.Enums.E_NPExtension">
            <summary>
            报纸扩展类型
            </summary>
        </member>
        <member name="F:DragonUtility.Enums.E_NPExtension.邮发代号">
            <summary>
            邮发代号 = 1
            </summary>
        </member>
        <member name="P:DragonUtility.Operate.Model.OperateItem.OperateID">
            <summary>
            模块编号
            </summary>
        </member>
        <member name="P:DragonUtility.Operate.Model.OperateItem.OperateName">
            <summary>
            模块名称
            </summary>
        </member>
        <member name="P:DragonUtility.Operate.Model.OperateItem.Description">
            <summary>
            描述
            </summary>
        </member>
        <member name="P:DragonUtility.Operate.Model.OperateItem.CreateDate">
            <summary>
            创建时间
            </summary>
        </member>
        <member name="P:DragonUtility.Operate.Model.OperateItem.UnitID">
            <summary>
            单位名称
            </summary>
        </member>
        <member name="P:DragonUtility.Operate.Model.OperateItem.SiteServiceType">
            <summary>
            站点服务类型 1web 2wap
            </summary>
        </member>
        <member name="P:DragonUtility.Operate.Model.OperateItem.PageFrom">
            <summary>
            位置
            </summary>
        </member>
        <member name="P:DragonUtility.Operate.Model.OperateItem.OrderNumber">
            <summary>
            排序
            </summary>
        </member>
        <member name="P:DragonUtility.Operate.Model.OperateItem.IsDisplay">
            <summary>
            是否显示
            </summary>
        </member>
        <member name="T:DragonUtility.Operate.Model.OperateItem.Columns">
            <summary>
            列
            </summary>
        </member>
        <member name="F:DragonUtility.Operate.Model.OperateItem.Columns.OperateID">
            <summary>
            模块编号
            </summary>
        </member>
        <member name="F:DragonUtility.Operate.Model.OperateItem.Columns.OperateName">
            <summary>
            模块名称
            </summary>
        </member>
        <member name="F:DragonUtility.Operate.Model.OperateItem.Columns.Description">
            <summary>
            描述
            </summary>
        </member>
        <member name="F:DragonUtility.Operate.Model.OperateItem.Columns.CreateDate">
            <summary>
            创建时间
            </summary>
        </member>
        <member name="F:DragonUtility.Operate.Model.OperateItem.Columns.UnitID">
            <summary>
            单位名称
            </summary>
        </member>
        <member name="F:DragonUtility.Operate.Model.OperateItem.Columns.SiteServiceType">
            <summary>
            站点服务类型 1web 2wap
            </summary>
        </member>
        <member name="F:DragonUtility.Operate.Model.OperateItem.Columns.PageFrom">
            <summary>
            位置
            </summary>
        </member>
        <member name="F:DragonUtility.Operate.Model.OperateItem.Columns.OrderNumber">
            <summary>
            排序
            </summary>
        </member>
        <member name="F:DragonUtility.Operate.Model.OperateItem.Columns.IsDisplay">
            <summary>
            是否显示
            </summary>
        </member>
        <member name="T:DragonUtility.Operate.Model.SearchOperateItemModel">
            <summary>
            获取列表时用的查询实体
            </summary>
        </member>
        <member name="P:DragonUtility.Operate.Model.SearchOperateItemModel.OperateID">
            <summary>
            模块编号
            </summary>
        </member>
        <member name="P:DragonUtility.Operate.Model.SearchOperateItemModel.OperateName">
            <summary>
            模块名称
            </summary>
        </member>
        <member name="P:DragonUtility.Operate.Model.SearchOperateItemModel.Description">
            <summary>
            描述
            </summary>
        </member>
        <member name="P:DragonUtility.Operate.Model.SearchOperateItemModel.CreateDate">
            <summary>
            创建时间
            </summary>
        </member>
        <member name="P:DragonUtility.Operate.Model.SearchOperateItemModel.UnitID">
            <summary>
            单位名称
            </summary>
        </member>
        <member name="P:DragonUtility.Operate.Model.SearchOperateItemModel.SiteServiceType">
            <summary>
            站点服务类型 1web 2wap
            </summary>
        </member>
        <member name="P:DragonUtility.Operate.Model.SearchOperateItemModel.PageFrom">
            <summary>
            位置
            </summary>
        </member>
        <member name="P:DragonUtility.Operate.Model.SearchOperateItemModel.OrderNumber">
            <summary>
            排序
            </summary>
        </member>
        <member name="P:DragonUtility.Operate.Model.SearchOperateItemModel.IsDisplay">
            <summary>
            是否显示
            </summary>
        </member>
        <member name="T:DragonUtility.DragonNavigation.NavigationDataAccess">
            <summary>
            导航菜单数据访问服务
            </summary>
        </member>
        <member name="M:DragonUtility.DragonNavigation.NavigationDataAccess.WildcardEscape(System.String)">
            <summary>
            将通配符转换为普通符号
            </summary>
            <param name="value">放在 LIKE 中的值</param>
            <returns>%返回[%]，_返回[_]</returns>
        </member>
        <member name="T:DragonSource.Utils.Logic.Magazine">
            <summary>
            期刊类
            </summary>
        </member>
        <member name="M:DragonSource.Utils.Logic.Magazine.YearByCycle(System.Int32)">
            <summary>
            根据期刊类型，返回一年可阅读期数
            </summary>
            <param name="cycle"></param>
            <returns></returns>
        </member>
        <member name="M:DragonSource.Utils.Logic.Magazine.GetCurrentIssue(DragonSource.Utils.Logic.E_MagazineCycle,System.DateTime)">
            <summary>
             求当前期数
            </summary>
            <param name="cycle">发行周期</param>
            <param name="dt">起始或者结束日期</param>
            <returns></returns>
        </member>
        <member name="T:DragonSource.Utils.FlvMetaDataReader">
            <summary>
            FLV视频文件帮助类，借助此类可以获取FLV文件的一些元数据信息，如时长，画面长度，画面宽度等信息
            </summary>
        </member>
        <member name="M:DragonSource.Utils.FlvMetaDataReader.GetFlvMetaInfo(System.String)">
             <summary>
            获取FLV视频文件元数据信息
             </summary>
             <param name="path">视频文件路径地址（物理路径）</param>
             <returns></returns>
        </member>
        <member name="T:DragonSource.Utils.FlvMetaInfo">
            <summary>
            FLV视频文件信息 实体
            </summary>
        </member>
        <member name="T:DragonSource.Utils.SQLServerProvider">
            <summary>
            该类可以用作提供数据的公共方法类
            </summary>
        </member>
        <member name="M:DragonSource.Utils.SQLServerProvider.CreateModel``1(System.Data.IDataRecord)">
            <summary>
            请注意Model程序集中EntityBase类需要保留，这里为动态创建类型实例提供类类型约束,需要在创建实体时实现SQLDATAREADER的构造
            </summary>
            <typeparam name="T">T类型</typeparam>
            <param name="dr"><c>IDataRecord</c>对象</param>
            <returns>T类型对象</returns>
        </member>
        <member name="M:DragonSource.Utils.SQLServerProvider.GetRowCount(System.String,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            获取记录集总数
            </summary>
            <param name="conn"></param>
            <param name="sqlstr"></param>
            <param name="param"></param>
            <returns></returns>
        </member>
        <member name="M:DragonSource.Utils.SQLServerProvider.GetData(System.String,System.String,System.Data.SqlClient.SqlParameter[],System.String,System.String,System.Int32,System.Int32)">
            <summary>
            返回可以应用分页的Reader,仅试用于2005以上版本的库
            </summary>
            <param name="conn">连接字符串</param>
            <param name="sqlstr">查询字符串</param>
            <param name="param">参数</param>
            <param name="primarykey">不允许为空</param>
            <param name="orderby">如果传递空字符串,将会以主键排序</param>
            <param name="pageIndex">页码</param>
            <param name="pageSize">页大小</param>
            <returns>T类型</returns>
        </member>
        <member name="M:DragonSource.Utils.SQLServerProvider.GetPageOfList``1(System.String,System.String,System.Data.SqlClient.SqlParameter[],System.String,System.String,System.Int32,System.Int32)">
            <summary>
            获取一个分页列表
            </summary>
            <typeparam name="T">T类型</typeparam>
            <param name="conn">数据库链接字符串名称</param>
            <param name="sqlstr">sql字符串</param>
            <param name="param">sql参数数组</param>
            <param name="primarykey">主键字段名称</param>
            <param name="orderby">排序字段名称</param>
            <param name="pageIndex">页码</param>
            <param name="pageSize">页面大小</param>
            <returns>分页列表对象</returns>
        </member>
        <member name="M:DragonSource.Utils.SQLServerProvider.GetIList``1(System.String,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            带约束列表
            </summary>
            <typeparam name="T">T类型</typeparam>
            <param name="conn">数据库链接字符串名称</param>
            <param name="sqlstr">sql字符串</param>
            <param name="param">sql参数数组</param>
            <returns>IList&lt;T&gt;</returns>
        </member>
        <member name="M:DragonSource.Utils.SQLServerProvider.Create``1(System.Data.IDataRecord)">
            <summary>
            创建对象
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dr"></param>
            <returns></returns>
        </member>
        <member name="M:DragonSource.Utils.SQLServerProvider.HasRows(System.String,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            是否包含记录
            </summary>
            <param name="conn"></param>
            <param name="sqlstr"></param>
            <param name="param"></param>
            <returns></returns>
        </member>
        <member name="M:DragonSource.Utils.SQLServerProvider.CreateObject``1(System.String,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            无类型约束创建对象
            </summary>
            <typeparam name="T"></typeparam>
            <param name="conn"></param>
            <param name="sqlstr"></param>
            <param name="param"></param>
            <returns></returns>
        </member>
        <member name="M:DragonSource.Utils.SQLServerProvider.CreateList``1(System.String,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            无类型约束创建列表
            </summary>
            <typeparam name="T"></typeparam>
            <param name="conn"></param>
            <param name="sqlstr"></param>
            <param name="param"></param>
            <returns></returns>
        </member>
        <member name="M:DragonSource.Utils.SQLServerProvider.CreatePage``1(System.String,System.String,System.Data.SqlClient.SqlParameter[],System.String,System.String,System.Int32,System.Int32)">
            <summary>
            无类型约束分页
            </summary>
            <typeparam name="T">返回值</typeparam>
            <param name="conn">连接字符串</param>
            <param name="sqlstr">查询字符串</param>
            <param name="param">参数数组</param>
            <param name="primarykey">主键,主键与排序字段至少要填写一项</param>
            <param name="orderby">排序字段,如果需要降序 后边跟 DESC,此项为空将默认按照主键排序</param>
            <param name="pageIndex">页码,从1开始</param>
            <param name="pageSize">页容量</param>
            <returns>T类型</returns>
            <exception cref="T:System.ArgumentException">查询语句末尾不能包含Order By 否则会引发异常</exception>
        </member>
        <member name="T:DragonSource.Utils.EnumDescription">
            <summary>
            把枚举值按照指定的文本显示
            </summary>
            <example>
            [EnumDescription("中文数字")]
            enum MyEnum
            {
                   [EnumDescription("数字一")]
                   One = 1, 
                   [EnumDescription("数字二")]
                   Two,
                   [EnumDescription("数字三")]
                   Three
            }
            EnumDescription.GetEnumText(typeof(MyEnum));
            EnumDescription.GetFieldText(MyEnum.Two);
            EnumDescription.GetFieldTexts(typeof(MyEnum)); 
            绑定到下拉框：
            comboBox1.DataSource = EnumDescription.GetFieldTexts(typeof(OrderStateEnum));
            comboBox1.ValueMember = "EnumValue";
            comboBox1.DisplayMember = "EnumDisplayText";
            comboBox1.SelectedValue = (int)OrderStateEnum.Finished;  //选中值
            </example>
            <remarks>
            一般通过枚举值的ToString()可以得到变量的文本，
            但是有时候需要的到与之对应的更充分的文本，
            这个类帮助达到此目的
            </remarks>
        </member>
        <member name="M:DragonSource.Utils.EnumDescription.#ctor(System.String,System.Int32)">
            <param name="enumRank">排列顺序</param>
        </member>
        <member name="M:DragonSource.Utils.EnumDescription.#ctor(System.String)">
            <param name="enumDisplayText">描述内容</param>
        </member>
        <member name="M:DragonSource.Utils.EnumDescription.GetEnumText(System.Type)">
            <returns></returns>
        </member>
        <member name="M:DragonSource.Utils.EnumDescription.GetFieldText(System.Object)">
            <returns>描述字符串</returns>
        </member>
        <member name="M:DragonSource.Utils.EnumDescription.GetFieldTexts(System.Type)">
            <returns>所有定义的文本</returns>
        </member>
        <member name="M:DragonSource.Utils.EnumDescription.GetFieldTexts(System.Type,DragonSource.Utils.EnumDescription.SortType)">
            <returns>所有定义的文本</returns>
        </member>
        <!-- 对于成员“T:DragonSource.Utils.EnumDescription.SortType”忽略有格式错误的 XML 注释 -->
        <!-- 对于成员“F:DragonSource.Utils.EnumDescription.SortType.Default”忽略有格式错误的 XML 注释 -->
        <!-- 对于成员“F:DragonSource.Utils.EnumDescription.SortType.DisplayText”忽略有格式错误的 XML 注释 -->
        <!-- 对于成员“F:DragonSource.Utils.EnumDescription.SortType.Rank”忽略有格式错误的 XML 注释 -->
        <member name="T:DragonSource.Utils.ConvertHelper">
            <summary>
            安全类型转换
            </summary>
        </member>
        <member name="M:DragonSource.Utils.ConvertHelper.ToString(System.Object)">
            <summary>
            返回对象obj的String值,obj为null时返回空值。
            </summary>
            <param name="obj">对象。</param>
            <returns>字符串。</returns>
        </member>
        <member name="M:DragonSource.Utils.ConvertHelper.ToString(System.Object,System.String)">
            <summary>
            返回对象obj的String值,obj为null时返回defaultValue
            </summary>
            <param name="obj">对象</param>
            <param name="defaultValue">默认返回值</param>
            <returns></returns>
        </member>
        <member name="M:DragonSource.Utils.ConvertHelper.ToInt(System.Object)">
            <summary>
            将对象转换为数值(Int32)类型,转换失败返回-1。
            </summary>
            <param name="obj">对象。</param>
            <returns>Int32数值。</returns>
        </member>
        <member name="M:DragonSource.Utils.ConvertHelper.ToInt(System.Object,System.Int32)">
            <summary>
            将对象转换为数值(Int32)类型。
            </summary>
            <param name="obj">对象。</param>
            <param name="returnValue">转换失败返回该值。</param>
            <returns>Int32数值。</returns>
        </member>
        <member name="M:DragonSource.Utils.ConvertHelper.ToLong(System.Object)">
            <summary>
            将对象转换为数值(Long)类型,转换失败返回-1。
            </summary>
            <param name="obj">对象。</param>
            <returns>Long数值。</returns>
        </member>
        <member name="M:DragonSource.Utils.ConvertHelper.ToLong(System.Object,System.Int64)">
            <summary>
            将对象转换为数值(Long)类型。
            </summary>
            <param name="obj">对象。</param>
            <param name="returnValue">转换失败返回该值。</param>
            <returns>Long数值。</returns>
        </member>
        <member name="M:DragonSource.Utils.ConvertHelper.ToDecimal(System.Object)">
            <summary>
            将对象转换为数值(Decimal)类型,转换失败返回-1。
            </summary>
            <param name="obj">对象。</param>
            <returns>Decimal数值。</returns>
        </member>
        <member name="M:DragonSource.Utils.ConvertHelper.ToDecimal(System.Object,System.Decimal)">
            <summary>
            将对象转换为数值(Decimal)类型。
            </summary>
            <param name="obj">对象。</param>
            <param name="returnValue">转换失败返回该值。</param>
            <returns>Decimal数值。</returns>
        </member>
        <member name="M:DragonSource.Utils.ConvertHelper.ToDouble(System.Object)">
            <summary>
            将对象转换为数值(Double)类型,转换失败返回-1。
            </summary>
            <param name="obj">对象。</param>
            <returns>Double数值。</returns>
        </member>
        <member name="M:DragonSource.Utils.ConvertHelper.ToDouble(System.Object,System.Double)">
            <summary>
            将对象转换为数值(Double)类型。
            </summary>
            <param name="obj">对象。</param>
            <param name="returnValue">转换失败返回该值。</param>
            <returns>Double数值。</returns>
        </member>
        <member name="M:DragonSource.Utils.ConvertHelper.ToFloat(System.Object)">
            <summary>
            将对象转换为数值(Float)类型,转换失败返回-1。
            </summary>
            <param name="obj">对象。</param>
            <returns>Float数值。</returns>
        </member>
        <member name="M:DragonSource.Utils.ConvertHelper.ToFloat(System.Object,System.Single)">
            <summary>
            将对象转换为数值(Float)类型。
            </summary>
            <param name="obj">对象。</param>
            <param name="returnValue">转换失败返回该值。</param>
            <returns>Float数值。</returns>
        </member>
        <member name="M:DragonSource.Utils.ConvertHelper.ToDateTime(System.Object)">
            <summary>
            将对象转换为数值(DateTime)类型,转换失败返回Now。
            </summary>
            <param name="obj">对象。</param>
            <returns>DateTime值。</returns>
        </member>
        <member name="M:DragonSource.Utils.ConvertHelper.ToDateTime(System.Object,System.DateTime)">
            <summary>
            将对象转换为数值(DateTime)类型。
            </summary>
            <param name="obj">对象。</param>
            <param name="returnValue">转换失败返回该值。</param>
            <returns>DateTime值。</returns>
        </member>
        <member name="M:DragonSource.Utils.ConvertHelper.ToBoolean(System.Object)">
            <summary>
            将obj转换成Boolean,转换失败返回false，所有非空值皆返回true,否则返回false
            </summary>
            <param name="obj">对象。</param>
            <returns>Boolean值。</returns>
        </member>
        <member name="M:DragonSource.Utils.ConvertHelper.ToBoolean(System.Object,System.Boolean)">
            <summary>
            将obj转换成Boolean,转换失败返回returnValue指定值，所有非空值皆返回true,否则返回false
            </summary>
            <param name="obj">对象。</param>
            <param name="returnValue">转换失败返回该值。</param>
            <returns>Boolean值。</returns>
        </member>
        <member name="M:DragonSource.Utils.ConvertHelper.GetRequestInt(System.String)">
            <summary>
            获取Request参数并将其转换为Int类型
            </summary>
            <param name="szKey">参数名称</param>
            <returns></returns>
        </member>
        <member name="M:DragonSource.Utils.ConvertHelper.GetRequestInt(System.String,System.Int32)">
            <summary>
            获取Request参数并将其转换为Int类型
            </summary>
            <param name="szKey">参数名称</param>
            <param name="nDefault">转换Int失败时，默认返回值</param>
            <returns></returns>
        </member>
        <member name="M:DragonSource.Utils.ConvertHelper.GetRequestString(System.String)">
            <summary>
            安全获取Request参数的值，说安全是因为对参数进行了XSS过滤
            </summary>
            <param name="szKey">参数名称</param>
            <returns></returns>
        </member>
        <member name="T:DragonUtility.IO.FileService.Contracts.CommonResult">
            <summary>
            服务操作通用返回结果,适用于返回一个布尔类型值和调用结果信息的操作
            </summary>
        </member>
        <member name="P:DragonUtility.IO.FileService.Contracts.CommonResult.IsSuccess">
            <summary>
            是否成功
            </summary>
        </member>
        <member name="P:DragonUtility.IO.FileService.Contracts.CommonResult.Message">
            <summary>
            成功或者失败信息
            </summary>
        </member>
        <member name="P:DragonUtility.Operate.Model.OperateDetail.ID">
            <summary>
            数据项编号
            </summary>
        </member>
        <member name="P:DragonUtility.Operate.Model.OperateDetail.OperateID">
            <summary>
            模块编号
            </summary>
        </member>
        <member name="P:DragonUtility.Operate.Model.OperateDetail.Icon">
            <summary>
            图标
            </summary>
        </member>
        <member name="P:DragonUtility.Operate.Model.OperateDetail.ResourceType">
            <summary>
            资源类型
            </summary>
        </member>
        <member name="P:DragonUtility.Operate.Model.OperateDetail.ResourceName">
            <summary>
            资源名称
            </summary>
        </member>
        <member name="P:DragonUtility.Operate.Model.OperateDetail.ResourceGuid">
            <summary>
            资源标识
            </summary>
        </member>
        <member name="P:DragonUtility.Operate.Model.OperateDetail.URL">
            <summary>
            链接
            </summary>
        </member>
        <member name="P:DragonUtility.Operate.Model.OperateDetail.Year">
            <summary>
            年份
            </summary>
        </member>
        <member name="P:DragonUtility.Operate.Model.OperateDetail.Issue">
            <summary>
            期号
            </summary>
        </member>
        <member name="P:DragonUtility.Operate.Model.OperateDetail.Price">
            <summary>
            价格
            </summary>
        </member>
        <member name="P:DragonUtility.Operate.Model.OperateDetail.DsPrice">
            <summary>
            龙源价格
            </summary>
        </member>
        <member name="P:DragonUtility.Operate.Model.OperateDetail.StartDate">
            <summary>
            开始时间
            </summary>
        </member>
        <member name="P:DragonUtility.Operate.Model.OperateDetail.EndDate">
            <summary>
            结束时间
            </summary>
        </member>
        <member name="P:DragonUtility.Operate.Model.OperateDetail.OrderNumber">
            <summary>
            排序
            </summary>
        </member>
        <member name="P:DragonUtility.Operate.Model.OperateDetail.IsTop">
            <summary>
            是否置顶
            </summary>
        </member>
        <member name="P:DragonUtility.Operate.Model.OperateDetail.Summary">
            <summary>
            说明
            </summary>
        </member>
        <member name="P:DragonUtility.Operate.Model.OperateDetail.Content">
            <summary>
            内容
            </summary>
        </member>
        <member name="P:DragonUtility.Operate.Model.OperateDetail.CreateDate">
            <summary>
            创建时间
            </summary>
        </member>
        <member name="P:DragonUtility.Operate.Model.OperateDetail.CodeName">
            <summary>
            期刊编码
            </summary>
        </member>
        <member name="F:DragonUtility.Operate.Model.OperateDetail.Columns.ID">
            <summary>
            数据项编号
            </summary>
        </member>
        <member name="F:DragonUtility.Operate.Model.OperateDetail.Columns.OperateID">
            <summary>
            模块编号
            </summary>
        </member>
        <member name="F:DragonUtility.Operate.Model.OperateDetail.Columns.Icon">
            <summary>
            图标
            </summary>
        </member>
        <member name="F:DragonUtility.Operate.Model.OperateDetail.Columns.ResourceType">
            <summary>
            资源类型
            </summary>
        </member>
        <member name="F:DragonUtility.Operate.Model.OperateDetail.Columns.ResourceName">
            <summary>
            资源名称
            </summary>
        </member>
        <member name="F:DragonUtility.Operate.Model.OperateDetail.Columns.ResourceGuid">
            <summary>
            资源标识
            </summary>
        </member>
        <member name="F:DragonUtility.Operate.Model.OperateDetail.Columns.URL">
            <summary>
            链接
            </summary>
        </member>
        <member name="F:DragonUtility.Operate.Model.OperateDetail.Columns.Year">
            <summary>
            年份
            </summary>
        </member>
        <member name="F:DragonUtility.Operate.Model.OperateDetail.Columns.Issue">
            <summary>
            期号
            </summary>
        </member>
        <member name="F:DragonUtility.Operate.Model.OperateDetail.Columns.Price">
            <summary>
            价格
            </summary>
        </member>
        <member name="F:DragonUtility.Operate.Model.OperateDetail.Columns.DsPrice">
            <summary>
            龙源价格
            </summary>
        </member>
        <member name="F:DragonUtility.Operate.Model.OperateDetail.Columns.StartDate">
            <summary>
            开始时间
            </summary>
        </member>
        <member name="F:DragonUtility.Operate.Model.OperateDetail.Columns.EndDate">
            <summary>
            结束时间
            </summary>
        </member>
        <member name="F:DragonUtility.Operate.Model.OperateDetail.Columns.OrderNumber">
            <summary>
            排序
            </summary>
        </member>
        <member name="F:DragonUtility.Operate.Model.OperateDetail.Columns.IsTop">
            <summary>
            是否置顶
            </summary>
        </member>
        <member name="F:DragonUtility.Operate.Model.OperateDetail.Columns.Summary">
            <summary>
            说明
            </summary>
        </member>
        <member name="F:DragonUtility.Operate.Model.OperateDetail.Columns.Content">
            <summary>
            内容
            </summary>
        </member>
        <member name="F:DragonUtility.Operate.Model.OperateDetail.Columns.CreateDate">
            <summary>
            创建时间
            </summary>
        </member>
        <member name="F:DragonUtility.Operate.Model.OperateDetail.Columns.CodeName">
            <summary>
            期刊编码
            </summary>
        </member>
        <member name="P:DragonUtility.Operate.Model.SearchOperateDetailModel.ID">
            <summary>
            数据项编号
            </summary>
        </member>
        <member name="P:DragonUtility.Operate.Model.SearchOperateDetailModel.OperateID">
            <summary>
            模块编号数组
            </summary>
        </member>
        <member name="P:DragonUtility.Operate.Model.SearchOperateDetailModel.Icon">
            <summary>
            图标
            </summary>
        </member>
        <member name="P:DragonUtility.Operate.Model.SearchOperateDetailModel.ResourceType">
            <summary>
            资源类型
            </summary>
        </member>
        <member name="P:DragonUtility.Operate.Model.SearchOperateDetailModel.ResourceName">
            <summary>
            资源名称
            </summary>
        </member>
        <member name="P:DragonUtility.Operate.Model.SearchOperateDetailModel.ResourceGuid">
            <summary>
            资源标识
            </summary>
        </member>
        <member name="P:DragonUtility.Operate.Model.SearchOperateDetailModel.URL">
            <summary>
            链接
            </summary>
        </member>
        <member name="P:DragonUtility.Operate.Model.SearchOperateDetailModel.Year">
            <summary>
            年份
            </summary>
        </member>
        <member name="P:DragonUtility.Operate.Model.SearchOperateDetailModel.Issue">
            <summary>
            期号
            </summary>
        </member>
        <member name="P:DragonUtility.Operate.Model.SearchOperateDetailModel.Price">
            <summary>
            价格
            </summary>
        </member>
        <member name="P:DragonUtility.Operate.Model.SearchOperateDetailModel.DsPrice">
            <summary>
            龙源价格
            </summary>
        </member>
        <member name="P:DragonUtility.Operate.Model.SearchOperateDetailModel.StartDate">
            <summary>
            开始时间
            </summary>
        </member>
        <member name="P:DragonUtility.Operate.Model.SearchOperateDetailModel.EndDate">
            <summary>
            结束时间
            </summary>
        </member>
        <member name="P:DragonUtility.Operate.Model.SearchOperateDetailModel.OrderNumber">
            <summary>
            排序
            </summary>
        </member>
        <member name="P:DragonUtility.Operate.Model.SearchOperateDetailModel.IsTop">
            <summary>
            是否置顶
            </summary>
        </member>
        <member name="P:DragonUtility.Operate.Model.SearchOperateDetailModel.Summary">
            <summary>
            说明
            </summary>
        </member>
        <member name="P:DragonUtility.Operate.Model.SearchOperateDetailModel.Content">
            <summary>
            内容
            </summary>
        </member>
        <member name="P:DragonUtility.Operate.Model.SearchOperateDetailModel.CreateDateStart">
            <summary>
            创建时间
            </summary>
        </member>
        <member name="P:DragonUtility.Operate.Model.SearchOperateDetailModel.CreateDateEnd">
            <summary>
            创建时间
            </summary>
        </member>
        <member name="T:DragonUtility.Operate.Enum.OperateDetail.ResourceType">
            <summary>
            资源类型
            </summary>
        </member>
        <member name="F:DragonUtility.Operate.Enum.OperateDetail.ResourceType.Magaizne">
            <summary>
            期刊
            </summary>
        </member>
        <member name="F:DragonUtility.Operate.Enum.OperateDetail.ResourceType.Book">
            <summary>
            图书
            </summary>
        </member>
        <member name="F:DragonUtility.Operate.Enum.OperateDetail.ResourceType.Feature">
            <summary>
            专题
            </summary>
        </member>
        <member name="T:DragonUtility.DragonCompilation.Model.FeatureListEntity">
            <summary>
            专题列表 实体
            </summary>
        </member>
        <member name="P:DragonUtility.DragonCompilation.Model.FeatureListEntity.Date">
            <summary>
            当前时间  月、日  格式： 01/22 
            </summary>
        </member>
        <member name="P:DragonUtility.DragonCompilation.Model.FeatureListEntity.Day">
            <summary>
            当前星期几
            </summary>
        </member>
        <member name="P:DragonUtility.DragonCompilation.Model.FeatureListEntity.ImageUrl">
            <summary>
            封面图片，该图片为专题列表集合中第1个专题的封面图片地址
            </summary>
        </member>
        <member name="P:DragonUtility.DragonCompilation.Model.FeatureListEntity.ItemCount">
            <summary>
            总记录数
            </summary>
        </member>
        <member name="P:DragonUtility.DragonCompilation.Model.FeatureListEntity.FeatureList">
            <summary>
            专题列表
            </summary>
        </member>
        <member name="T:DragonUtility.DragonCompilation.Model.FeatureEntity">
            <summary>
            专题信息 实体
            </summary>
        </member>
        <member name="P:DragonUtility.DragonCompilation.Model.FeatureEntity.RowID">
            <summary>
            行序号 如：1，2，3，4，5...
            </summary>
        </member>
        <member name="P:DragonUtility.DragonCompilation.Model.FeatureEntity.FeatureID">
            <summary>
            专题ID
            </summary>
        </member>
        <member name="P:DragonUtility.DragonCompilation.Model.FeatureEntity.FeatureName">
            <summary>
            专题标题
            </summary>
        </member>
        <member name="P:DragonUtility.DragonCompilation.Model.FeatureEntity.FeatureSubTitle">
            <summary>
            专题副标题
            </summary>
        </member>
        <member name="P:DragonUtility.DragonCompilation.Model.FeatureEntity.CategoryCode">
            <summary>
            专题分类编码
            </summary>
        </member>
        <member name="P:DragonUtility.DragonCompilation.Model.FeatureEntity.OrderNumber">
            <summary>
            专题排序值
            </summary>
        </member>
        <member name="P:DragonUtility.DragonCompilation.Model.FeatureEntity.CoverImg">
            <summary>
            专题封面图
            </summary>
        </member>
        <member name="P:DragonUtility.DragonCompilation.Model.FeatureEntity.Summary">
            <summary>
            专题导语
            </summary>
        </member>
        <member name="P:DragonUtility.DragonCompilation.Model.FeatureEntity.Tag">
            <summary>
            专题标签
            </summary>
        </member>
        <member name="P:DragonUtility.DragonCompilation.Model.FeatureEntity.ThumbnailImg">
            <summary>
            专题缩略图
            </summary>
        </member>
        <member name="P:DragonUtility.DragonCompilation.Model.FeatureEntity.Note">
            <summary>
            专题备注
            </summary>
        </member>
        <member name="P:DragonUtility.DragonCompilation.Model.FeatureEntity.FeatureType">
            <summary>
            专题列别 0、频道专题 1、专题 2、专家 3、期刊 4、图书
            </summary>
        </member>
        <member name="P:DragonUtility.DragonCompilation.Model.FeatureEntity.FromMagazine">
            <summary>
            专题来源
            </summary>
        </member>
        <member name="P:DragonUtility.DragonCompilation.Model.FeatureEntity.Status">
            <summary>
            专题状态 0、编辑中 1、已完成 2、已删除
            </summary>
        </member>
        <member name="P:DragonUtility.DragonCompilation.Model.FeatureEntity.Author">
            <summary>
            专题作者 
            </summary>
        </member>
        <member name="P:DragonUtility.DragonCompilation.Model.FeatureEntity.CreateDate">
            <summary>
            专题创建时间
            </summary>
        </member>
        <member name="P:DragonUtility.DragonCompilation.Model.FeatureEntity.CategoryName">
            <summary>
            专题分类名称
            </summary>
        </member>
        <member name="P:DragonUtility.DragonCompilation.Model.FeatureEntity.ArticleCount">
            <summary>
            专题中文章个数
            </summary>
        </member>
        <member name="P:DragonUtility.DragonCompilation.Model.FeatureEntity.AudioCount">
            <summary>
            专题中音频个数
            </summary>
        </member>
        <member name="P:DragonUtility.DragonCompilation.Model.FeatureEntity.BaiKeCount">
            <summary>
            专题中百科个数
            </summary>
        </member>
        <member name="P:DragonUtility.DragonCompilation.Model.FeatureEntity.BookCount">
            <summary>
            专题中图书个数
            </summary>
        </member>
        <member name="P:DragonUtility.DragonCompilation.Model.FeatureEntity.ImgCount">
            <summary>
            专题中组图个数
            </summary>
        </member>
        <member name="P:DragonUtility.DragonCompilation.Model.FeatureEntity.MagazineCount">
            <summary>
            专题中杂志个数
            </summary>
        </member>
        <member name="P:DragonUtility.DragonCompilation.Model.FeatureEntity.WeiBoCount">
            <summary>
            专题中微博个数
            </summary>
        </member>
        <member name="P:DragonUtility.DragonCompilation.Model.FeatureEntity.VideoCount">
            <summary>
            专题中视频个数
            </summary>
        </member>
        <member name="P:DragonUtility.DragonCompilation.Model.FeatureEntity.PinYin">
            <summary>
            专题名称拼音首字母
            </summary>
        </member>
        <member name="T:DragonUtility.DragonCompilation.Model.FeatureBasicEntity">
            <summary>
            专题基本信息
            </summary>
        </member>
        <member name="P:DragonUtility.DragonCompilation.Model.FeatureBasicEntity.RowID">
            <summary>
            RowID
            </summary>
        </member>
        <member name="P:DragonUtility.DragonCompilation.Model.FeatureBasicEntity.FeatureID">
            <summary>
            专题ID
            </summary>
        </member>
        <member name="P:DragonUtility.DragonCompilation.Model.FeatureBasicEntity.FeatureName">
            <summary>
            专题标题
            </summary>
        </member>
        <member name="P:DragonUtility.DragonCompilation.Model.FeatureBasicEntity.FeatureSubTitle">
            <summary>
            专题副标题
            </summary>
        </member>
        <member name="P:DragonUtility.DragonCompilation.Model.FeatureBasicEntity.CategoryCode">
            <summary>
            专题分类编码
            </summary>
        </member>
        <member name="P:DragonUtility.DragonCompilation.Model.FeatureBasicEntity.OrderNumber">
            <summary>
            专题排序值
            </summary>
        </member>
        <member name="P:DragonUtility.DragonCompilation.Model.FeatureBasicEntity.CoverImg">
            <summary>
            专题封面图
            </summary>
        </member>
        <member name="P:DragonUtility.DragonCompilation.Model.FeatureBasicEntity.Summary">
            <summary>
            专题导语
            </summary>
        </member>
        <member name="P:DragonUtility.DragonCompilation.Model.FeatureBasicEntity.Tag">
            <summary>
            专题标签
            </summary>
        </member>
        <member name="P:DragonUtility.DragonCompilation.Model.FeatureBasicEntity.ThumbnailImg">
            <summary>
            专题缩略图
            </summary>
        </member>
        <member name="P:DragonUtility.DragonCompilation.Model.FeatureBasicEntity.Note">
            <summary>
            专题备注
            </summary>
        </member>
        <member name="P:DragonUtility.DragonCompilation.Model.FeatureBasicEntity.FeatureType">
            <summary>
            专题列别 0、频道专题 1、专题 2、专家 3、期刊 4、图书
            </summary>
        </member>
        <member name="P:DragonUtility.DragonCompilation.Model.FeatureBasicEntity.FromMagazine">
            <summary>
            专题来源
            </summary>
        </member>
        <member name="P:DragonUtility.DragonCompilation.Model.FeatureBasicEntity.Status">
            <summary>
            专题状态 0、编辑中 1、已完成 2、已删除
            </summary>
        </member>
        <member name="P:DragonUtility.DragonCompilation.Model.FeatureBasicEntity.Author">
            <summary>
            专题作者 
            </summary>
        </member>
        <member name="P:DragonUtility.DragonCompilation.Model.FeatureBasicEntity.CreateDate">
            <summary>
            专题创建时间
            </summary>
        </member>
        <member name="P:DragonUtility.DragonCompilation.Model.FeatureBasicEntity.CategoryName">
            <summary>
            专题分类名称
            </summary>
        </member>
        <member name="P:DragonUtility.DragonCompilation.Model.FeatureBasicEntity.PinYin">
            <summary>
            专题名称拼音首字母
            </summary>
        </member>
        <member name="T:DragonUtility.DragonCompilation.Model.FeatureArticleEntity">
            <summary>
            专题文章列表 实体
            </summary>
        </member>
        <member name="P:DragonUtility.DragonCompilation.Model.FeatureArticleEntity.ItemCount">
            <summary>
            总记录数
            </summary>
        </member>
        <member name="P:DragonUtility.DragonCompilation.Model.FeatureArticleEntity.ArticleList">
            <summary>
            文章列表
            </summary>
        </member>
        <member name="T:DragonUtility.DragonCompilation.Model.ArticleEntity">
            <summary>
            专题文章信息 实体
            </summary>
        </member>
        <member name="P:DragonUtility.DragonCompilation.Model.ArticleEntity.RowID">
            <summary>
            RowID
            </summary>
        </member>
        <member name="P:DragonUtility.DragonCompilation.Model.ArticleEntity.ArticleGUID">
            <summary>
            文章GUID
            </summary>
        </member>
        <member name="P:DragonUtility.DragonCompilation.Model.ArticleEntity.FeatureID">
            <summary>
            文章所属编号
            </summary>
        </member>
        <member name="P:DragonUtility.DragonCompilation.Model.ArticleEntity.FeatureColumnID">
            <summary>
            文章所属栏目编号
            </summary>		
        </member>
        <member name="P:DragonUtility.DragonCompilation.Model.ArticleEntity.Title">
            <summary>
            文章标题
            </summary>
        </member>
        <member name="P:DragonUtility.DragonCompilation.Model.ArticleEntity.SubTitle">
            <summary>
            文章副标题
            </summary>
        </member>
        <member name="P:DragonUtility.DragonCompilation.Model.ArticleEntity.Author">
            <summary>
            文章作者
            </summary>
        </member>
        <member name="P:DragonUtility.DragonCompilation.Model.ArticleEntity.AuthorFrom">
            <summary>
            文章作者来源
            </summary>
        </member>
        <member name="P:DragonUtility.DragonCompilation.Model.ArticleEntity.Introduction">
            <summary>
            Introduction
            </summary>
        </member>
        <member name="P:DragonUtility.DragonCompilation.Model.ArticleEntity.Summary">
            <summary>
            文章摘要
            </summary>
        </member>
        <member name="P:DragonUtility.DragonCompilation.Model.ArticleEntity.CategoryCode">
            <summary>
            专题文章分类
            </summary>
        </member>
        <member name="P:DragonUtility.DragonCompilation.Model.ArticleEntity.CategoryName">
            <summary>
            专题文章名称
            </summary>
        </member>
        <member name="P:DragonUtility.DragonCompilation.Model.ArticleEntity.KeyWord">
            <summary>
            关键词
            </summary>
        </member>
        <member name="P:DragonUtility.DragonCompilation.Model.ArticleEntity.Content">
            <summary>
            文章内容
            </summary>
        </member>
        <member name="P:DragonUtility.DragonCompilation.Model.ArticleEntity.Language">
            <summary>
            语言
            </summary>
        </member>
        <member name="P:DragonUtility.DragonCompilation.Model.ArticleEntity.WordSize">
            <summary>
            字数
            </summary>
        </member>
        <member name="P:DragonUtility.DragonCompilation.Model.ArticleEntity.FromTitleID">
            <summary>
            来源文章ID
            </summary>
        </member>
        <member name="P:DragonUtility.DragonCompilation.Model.ArticleEntity.FromResourceType">
            <summary>
            来源类型
            </summary>
        </member>
        <member name="P:DragonUtility.DragonCompilation.Model.ArticleEntity.FromResourceGuid">
            <summary>
            来源编号/来源文章url
            </summary>
        </member>
        <member name="P:DragonUtility.DragonCompilation.Model.ArticleEntity.FromResourceName">
            <summary>
            来源名称/来源网站名称
            </summary>
        </member>
        <member name="P:DragonUtility.DragonCompilation.Model.ArticleEntity.FromYear">
            <summary>
            来源期刊的年属性
            </summary>
        </member>
        <member name="P:DragonUtility.DragonCompilation.Model.ArticleEntity.FromIssue">
            <summary>
            来源期刊的期属性
            </summary>
        </member>
        <member name="P:DragonUtility.DragonCompilation.Model.ArticleEntity.PubStartDate">
            <summary>
            发布开始时间
            </summary>
        </member>
        <member name="P:DragonUtility.DragonCompilation.Model.ArticleEntity.PubEndDate">
            <summary>
            发布结束时间
            </summary>
        </member>
        <member name="P:DragonUtility.DragonCompilation.Model.ArticleEntity.CreateDate">
            <summary>
            创建时间
            </summary>
        </member>
        <member name="P:DragonUtility.DragonCompilation.Model.ArticleEntity.UpdateDate">
            <summary>
            更新时间
            </summary>
        </member>
        <member name="P:DragonUtility.DragonCompilation.Model.ArticleEntity.Status">
            <summary>
            状态 0编辑 1完成(审核通过) 2待审 3审核不通过
            </summary>
        </member>
        <member name="P:DragonUtility.DragonCompilation.Model.ArticleEntity.Note">
            <summary>
            审核意见
            </summary>
        </member>
        <member name="P:DragonUtility.DragonCompilation.Model.ArticleEntity.ReadCount">
            <summary>
            ReadCount
            </summary>
        </member>
        <member name="P:DragonUtility.DragonCompilation.Model.ArticleEntity.EditorCharge">
            <summary>
            责任编辑
            </summary>
        </member>
        <member name="P:DragonUtility.DragonCompilation.Model.ArticleEntity.HasImage">
            <summary>
            是否有图片 0无 1有
            </summary>
        </member>
        <member name="P:DragonUtility.DragonCompilation.Model.ArticleEntity.HasBaike">
            <summary>
            是否有百科 0无 1有
            </summary>
        </member>
        <member name="P:DragonUtility.DragonCompilation.Model.ArticleEntity.HasVideo">
            <summary>
            是否有音频 0无 1有
            </summary>
        </member>
        <member name="P:DragonUtility.DragonCompilation.Model.ArticleEntity.OrderNumber">
            <summary>
            排序编号
            </summary>
        </member>
        <member name="P:DragonUtility.DragonCompilation.Model.ArticleEntity.BigImgName">
            <summary>
            文章大图名称
            </summary>
        </member>
        <member name="P:DragonUtility.DragonCompilation.Model.ArticleEntity.SmallImgName">
            <summary>
            文章小图名称
            </summary>
        </member>
        <member name="P:DragonUtility.DragonCompilation.Model.ArticleEntity.EsitmateReadTime">
            <summary>
            预计阅读时间，wordsize/100, 其中100为1分能阅读多少字数
            </summary>
        </member>
        <member name="P:DragonUtility.DragonCompilation.Model.ArticleEntity.FeatureColumnName">
            <summary>
            文章所属栏目名称
            </summary>		
        </member>
        <member name="P:DragonUtility.DragonCompilation.Model.ArticleEntity.PreArticle">
            <summary>
            上一篇
            </summary>		
        </member>
        <member name="P:DragonUtility.DragonCompilation.Model.ArticleEntity.NextArticle">
            <summary>
            下一篇
            </summary>		
        </member>
        <member name="P:DragonUtility.DragonCompilation.Model.ArticleEntity.IsRecommend">
            <summary>
            是否推荐 0未推荐 1已推荐
            </summary>
        </member>
        <member name="T:DragonUtility.DragonCompilation.Model.ArticleBaseEntity">
            <summary>
            专题文章基本信息 实体
            </summary>
        </member>
        <member name="P:DragonUtility.DragonCompilation.Model.ArticleBaseEntity.RowID">
            <summary>
            RowID
            </summary>
        </member>
        <member name="P:DragonUtility.DragonCompilation.Model.ArticleBaseEntity.ArticleGUID">
            <summary>
            文章GUID
            </summary>
        </member>
        <member name="P:DragonUtility.DragonCompilation.Model.ArticleBaseEntity.FeatureID">
            <summary>
            文章所属编号
            </summary>
        </member>
        <member name="P:DragonUtility.DragonCompilation.Model.ArticleBaseEntity.FeatureColumnID">
            <summary>
            文章所属栏目编号
            </summary>		
        </member>
        <member name="P:DragonUtility.DragonCompilation.Model.ArticleBaseEntity.Title">
            <summary>
            文章标题
            </summary>
        </member>
        <member name="P:DragonUtility.DragonCompilation.Model.ArticleBaseEntity.SubTitle">
            <summary>
            文章副标题
            </summary>
        </member>
        <member name="P:DragonUtility.DragonCompilation.Model.ArticleBaseEntity.Author">
            <summary>
            文章作者
            </summary>
        </member>
        <member name="P:DragonUtility.DragonCompilation.Model.ArticleBaseEntity.AuthorFrom">
            <summary>
            文章作者来源
            </summary>
        </member>
        <member name="P:DragonUtility.DragonCompilation.Model.ArticleBaseEntity.Introduction">
            <summary>
            Introduction
            </summary>
        </member>
        <member name="P:DragonUtility.DragonCompilation.Model.ArticleBaseEntity.Summary">
            <summary>
            文章摘要
            </summary>
        </member>
        <member name="P:DragonUtility.DragonCompilation.Model.ArticleBaseEntity.CategoryCode">
            <summary>
            专题文章分类
            </summary>
        </member>
        <member name="P:DragonUtility.DragonCompilation.Model.ArticleBaseEntity.CategoryName">
            <summary>
            专题文章名称
            </summary>
        </member>
        <member name="P:DragonUtility.DragonCompilation.Model.ArticleBaseEntity.KeyWord">
            <summary>
            关键词
            </summary>
        </member>
        <member name="P:DragonUtility.DragonCompilation.Model.ArticleBaseEntity.Content">
            <summary>
            文章内容
            </summary>
        </member>
        <member name="P:DragonUtility.DragonCompilation.Model.ArticleBaseEntity.Language">
            <summary>
            语言
            </summary>
        </member>
        <member name="P:DragonUtility.DragonCompilation.Model.ArticleBaseEntity.WordSize">
            <summary>
            字数
            </summary>
        </member>
        <member name="P:DragonUtility.DragonCompilation.Model.ArticleBaseEntity.FromTitleID">
            <summary>
            来源文章ID
            </summary>
        </member>
        <member name="P:DragonUtility.DragonCompilation.Model.ArticleBaseEntity.FromResourceType">
            <summary>
            来源类型
            </summary>
        </member>
        <member name="P:DragonUtility.DragonCompilation.Model.ArticleBaseEntity.FromResourceGuid">
            <summary>
            来源编号/来源文章url
            </summary>
        </member>
        <member name="P:DragonUtility.DragonCompilation.Model.ArticleBaseEntity.FromResourceName">
            <summary>
            来源名称/来源网站名称
            </summary>
        </member>
        <member name="P:DragonUtility.DragonCompilation.Model.ArticleBaseEntity.FromYear">
            <summary>
            来源期刊的年属性
            </summary>
        </member>
        <member name="P:DragonUtility.DragonCompilation.Model.ArticleBaseEntity.FromIssue">
            <summary>
            来源期刊的期属性
            </summary>
        </member>
        <member name="P:DragonUtility.DragonCompilation.Model.ArticleBaseEntity.PubStartDate">
            <summary>
            发布开始时间
            </summary>
        </member>
        <member name="P:DragonUtility.DragonCompilation.Model.ArticleBaseEntity.PubEndDate">
            <summary>
            发布结束时间
            </summary>
        </member>
        <member name="P:DragonUtility.DragonCompilation.Model.ArticleBaseEntity.CreateDate">
            <summary>
            创建时间
            </summary>
        </member>
        <member name="P:DragonUtility.DragonCompilation.Model.ArticleBaseEntity.UpdateDate">
            <summary>
            更新时间
            </summary>
        </member>
        <member name="P:DragonUtility.DragonCompilation.Model.ArticleBaseEntity.Status">
            <summary>
            状态 0编辑 1完成(审核通过) 2待审 3审核不通过
            </summary>
        </member>
        <member name="P:DragonUtility.DragonCompilation.Model.ArticleBaseEntity.Note">
            <summary>
            审核意见
            </summary>
        </member>
        <member name="P:DragonUtility.DragonCompilation.Model.ArticleBaseEntity.ReadCount">
            <summary>
            ReadCount
            </summary>
        </member>
        <member name="P:DragonUtility.DragonCompilation.Model.ArticleBaseEntity.EditorCharge">
            <summary>
            责任编辑
            </summary>
        </member>
        <member name="P:DragonUtility.DragonCompilation.Model.ArticleBaseEntity.HasImage">
            <summary>
            是否有图片 0无 1有
            </summary>
        </member>
        <member name="P:DragonUtility.DragonCompilation.Model.ArticleBaseEntity.HasBaike">
            <summary>
            是否有百科 0无 1有
            </summary>
        </member>
        <member name="P:DragonUtility.DragonCompilation.Model.ArticleBaseEntity.HasVideo">
            <summary>
            是否有音频 0无 1有
            </summary>
        </member>
        <member name="P:DragonUtility.DragonCompilation.Model.ArticleBaseEntity.OrderNumber">
            <summary>
            排序编号
            </summary>
        </member>
        <member name="P:DragonUtility.DragonCompilation.Model.ArticleBaseEntity.BigImgName">
            <summary>
            文章大图名称
            </summary>
        </member>
        <member name="P:DragonUtility.DragonCompilation.Model.ArticleBaseEntity.SmallImgName">
            <summary>
            文章小图名称
            </summary>
        </member>
        <member name="P:DragonUtility.DragonCompilation.Model.ArticleBaseEntity.EsitmateReadTime">
            <summary>
            预计阅读时间，wordsize/100, 其中100为1分能阅读多少字数
            </summary>
        </member>
        <member name="P:DragonUtility.DragonCompilation.Model.ArticleBaseEntity.FeatureColumnName">
            <summary>
            文章所属栏目名称
            </summary>		
        </member>
        <member name="P:DragonUtility.DragonCompilation.Model.ArticleBaseEntity.IsRecommend">
            <summary>
            是否推荐 0未推荐 1已推荐
            </summary>
        </member>
        <member name="T:DragonUtility.DragonCompilation.Model.FeatureAudioEntity">
            <summary>
            专题音频列表 实体
            </summary>
        </member>
        <member name="P:DragonUtility.DragonCompilation.Model.FeatureAudioEntity.ItemCount">
            <summary>
            总记录数
            </summary>
        </member>
        <member name="P:DragonUtility.DragonCompilation.Model.FeatureAudioEntity.AudioList">
            <summary>
            音频列表
            </summary>
        </member>
        <member name="T:DragonUtility.DragonCompilation.Model.AudioEntity">
            <summary>
            专题音频信息 实体
            </summary>
        </member>
        <member name="P:DragonUtility.DragonCompilation.Model.AudioEntity.RowID">
            <summary>
            RowID
            </summary>
        </member>
        <member name="P:DragonUtility.DragonCompilation.Model.AudioEntity.AudioID">
            <summary>
            序号
            </summary>
        </member>
        <member name="P:DragonUtility.DragonCompilation.Model.AudioEntity.AudioName">
            <summary>
            音频名称
            </summary>
        </member>
        <member name="P:DragonUtility.DragonCompilation.Model.AudioEntity.FeatureID">
            <summary>
            专题ID
            </summary>
        </member>
        <member name="P:DragonUtility.DragonCompilation.Model.AudioEntity.AudioFileName">
            <summary>
            音频文件名称
            </summary>
        </member>
        <member name="P:DragonUtility.DragonCompilation.Model.AudioEntity.AudioUrl">
            <summary>
            音频url
            </summary>
        </member>
        <member name="P:DragonUtility.DragonCompilation.Model.AudioEntity.OrderNumber">
            <summary>
            排序值
            </summary>
        </member>
        <member name="P:DragonUtility.DragonCompilation.Model.AudioEntity.CreateDate">
            <summary>
            添加时间
            </summary>
        </member>
        <member name="P:DragonUtility.DragonCompilation.Model.AudioEntity.Summary">
            <summary>
            简介
            </summary>
        </member>
        <member name="T:DragonUtility.DragonCompilation.Model.FeatureBaiKeEntity">
            <summary>
            专题百科列表 实体
            </summary>
        </member>
        <member name="P:DragonUtility.DragonCompilation.Model.FeatureBaiKeEntity.ItemCount">
            <summary>
            总记录数
            </summary>
        </member>
        <member name="P:DragonUtility.DragonCompilation.Model.FeatureBaiKeEntity.BaiKeList">
            <summary>
            百科列表
            </summary>
        </member>
        <member name="T:DragonUtility.DragonCompilation.Model.BaiKeEntity">
            <summary>
            专题百科信息 实体
            </summary>
        </member>
        <member name="P:DragonUtility.DragonCompilation.Model.BaiKeEntity.RowID">
            <summary>
            RowID
            </summary>
        </member>
        <member name="P:DragonUtility.DragonCompilation.Model.BaiKeEntity.BaiKeID">
            <summary>
            百科编号
            </summary>
        </member>
        <member name="P:DragonUtility.DragonCompilation.Model.BaiKeEntity.FeatureID">
            <summary>
            专题ID
            </summary>
        </member>
        <member name="P:DragonUtility.DragonCompilation.Model.BaiKeEntity.BaiKeName">
            <summary>
            百科词条
            </summary>
        </member>
        <member name="P:DragonUtility.DragonCompilation.Model.BaiKeEntity.BaiKeContent">
            <summary>
            百科内容
            </summary>
        </member>
        <member name="P:DragonUtility.DragonCompilation.Model.BaiKeEntity.BaiKeUrl">
            <summary>
            百科地址
            </summary>
        </member>
        <member name="P:DragonUtility.DragonCompilation.Model.BaiKeEntity.OrderNumber">
            <summary>
            排序值
            </summary>
        </member>
        <member name="P:DragonUtility.DragonCompilation.Model.BaiKeEntity.CreateDate">
            <summary>
            创建时间
            </summary>
        </member>
        <member name="P:DragonUtility.DragonCompilation.Model.BaiKeEntity.Summary">
            <summary>
            简介
            </summary>
        </member>
        <member name="T:DragonUtility.DragonCompilation.Model.FeatureBookEntity">
            <summary>
            专题图书列表 实体
            </summary>
        </member>
        <member name="P:DragonUtility.DragonCompilation.Model.FeatureBookEntity.ItemCount">
            <summary>
            总记录数
            </summary>
        </member>
        <member name="P:DragonUtility.DragonCompilation.Model.FeatureBookEntity.BookList">
            <summary>
            图书列表
            </summary>
        </member>
        <member name="T:DragonUtility.DragonCompilation.Model.BookEntity">
            <summary>
            专题图书信息 实体
            </summary>
        </member>
        <member name="P:DragonUtility.DragonCompilation.Model.BookEntity.RowID">
            <summary>
            RowID
            </summary>
        </member>
        <member name="P:DragonUtility.DragonCompilation.Model.BookEntity.FeatureBookID">
            <summary>
            图书序号
            </summary>
        </member>
        <member name="P:DragonUtility.DragonCompilation.Model.BookEntity.BookGUID">
            <summary>
            图书编号
            </summary>
        </member>
        <member name="P:DragonUtility.DragonCompilation.Model.BookEntity.FeatureID">
            <summary>
            专题ID
            </summary>
        </member>
        <member name="P:DragonUtility.DragonCompilation.Model.BookEntity.BookName">
            <summary>
            图书名称
            </summary>
        </member>
        <member name="P:DragonUtility.DragonCompilation.Model.BookEntity.BookAuthor">
            <summary>
            图书作者
            </summary>
        </member>
        <member name="P:DragonUtility.DragonCompilation.Model.BookEntity.BookCoverImg">
            <summary>
            图书封面图
            </summary>
        </member>
        <member name="P:DragonUtility.DragonCompilation.Model.BookEntity.OrderNumber">
            <summary>
            排序值
            </summary>
        </member>
        <member name="P:DragonUtility.DragonCompilation.Model.BookEntity.CreateDate">
            <summary>
            创建时间
            </summary>
        </member>
        <member name="P:DragonUtility.DragonCompilation.Model.BookEntity.Summary">
            <summary>
            简介
            </summary>
        </member>
        <member name="T:DragonUtility.DragonCompilation.Model.FeatureImgEntity">
            <summary>
            专题组图信息 实体
            </summary>
        </member>
        <member name="P:DragonUtility.DragonCompilation.Model.FeatureImgEntity.ItemCount">
            <summary>
            总记录数
            </summary>
        </member>
        <member name="P:DragonUtility.DragonCompilation.Model.FeatureImgEntity.ImgList">
            <summary>
            组图列表
            </summary>
        </member>
        <member name="T:DragonUtility.DragonCompilation.Model.ImgEntity">
            <summary>
            专题组图信息 实体
            </summary>
        </member>
        <member name="P:DragonUtility.DragonCompilation.Model.ImgEntity.RowID">
            <summary>
            RowID
            </summary>
        </member>
        <member name="P:DragonUtility.DragonCompilation.Model.ImgEntity.FeatureImgID">
            <summary>
            序号
            </summary>
        </member>
        <member name="P:DragonUtility.DragonCompilation.Model.ImgEntity.FeatureID">
            <summary>
            专题ID
            </summary>
        </member>
        <member name="P:DragonUtility.DragonCompilation.Model.ImgEntity.FeatureImgTitle">
            <summary>
            图片标题
            </summary>
        </member>
        <member name="P:DragonUtility.DragonCompilation.Model.ImgEntity.ImgFileName">
            <summary>
            图片文件名称
            </summary>
        </member>
        <member name="P:DragonUtility.DragonCompilation.Model.ImgEntity.ImgName">
            <summary>
            图片名称
            </summary>
        </member>
        <member name="P:DragonUtility.DragonCompilation.Model.ImgEntity.Summary">
            <summary>
            简介
            </summary>
        </member>
        <member name="P:DragonUtility.DragonCompilation.Model.ImgEntity.Height">
            <summary>
            高度
            </summary>
        </member>
        <member name="P:DragonUtility.DragonCompilation.Model.ImgEntity.Width">
            <summary>
            宽度
            </summary>
        </member>
        <member name="P:DragonUtility.DragonCompilation.Model.ImgEntity.OrderNumber">
            <summary>
            排序值
            </summary>
        </member>
        <member name="P:DragonUtility.DragonCompilation.Model.ImgEntity.CreateDate">
            <summary>
            添加时间
            </summary>
        </member>
        <member name="P:DragonUtility.DragonCompilation.Model.ImgEntity.UpdateDate">
            <summary>
            更新时间
            </summary>
        </member>
        <member name="T:DragonUtility.DragonCompilation.Model.FeatureMagazineEntity">
            <summary>
            专题期刊列表 实体
            </summary>
        </member>
        <member name="P:DragonUtility.DragonCompilation.Model.FeatureMagazineEntity.ItemCount">
            <summary>
            总记录数
            </summary>
        </member>
        <member name="P:DragonUtility.DragonCompilation.Model.FeatureMagazineEntity.MagazineList">
            <summary>
            期刊列表
            </summary>
        </member>
        <member name="T:DragonUtility.DragonCompilation.Model.MagazineEntity">
            <summary>
            专题期刊信息 实体
            </summary>
        </member>
        <member name="P:DragonUtility.DragonCompilation.Model.MagazineEntity.RowID">
            <summary>
            RowID
            </summary>
        </member>
        <member name="P:DragonUtility.DragonCompilation.Model.MagazineEntity.MagazineID">
            <summary>
            序号
            </summary>
        </member>
        <member name="P:DragonUtility.DragonCompilation.Model.MagazineEntity.MagazineName">
            <summary>
            专题名称
            </summary>
        </member>
        <member name="P:DragonUtility.DragonCompilation.Model.MagazineEntity.FeatureID">
            <summary>
            专题ID
            </summary>
        </member>
        <member name="P:DragonUtility.DragonCompilation.Model.MagazineEntity.MagazineCoverImg">
            <summary>
            期刊封面图
            </summary>
        </member>
        <member name="P:DragonUtility.DragonCompilation.Model.MagazineEntity.MagazineGUID">
            <summary>
            期刊编号
            </summary>
        </member>
        <member name="P:DragonUtility.DragonCompilation.Model.MagazineEntity.CodeName">
            <summary>
            编号名称
            </summary>
        </member>
        <member name="P:DragonUtility.DragonCompilation.Model.MagazineEntity.Year">
            <summary>
            年
            </summary>
        </member>
        <member name="P:DragonUtility.DragonCompilation.Model.MagazineEntity.Issue">
            <summary>
            期
            </summary>
        </member>
        <member name="P:DragonUtility.DragonCompilation.Model.MagazineEntity.Summary">
            <summary>
            简介
            </summary>
        </member>
        <member name="P:DragonUtility.DragonCompilation.Model.MagazineEntity.OrderNumber">
            <summary>
            排序值
            </summary>
        </member>
        <member name="P:DragonUtility.DragonCompilation.Model.MagazineEntity.CreateDate">
            <summary>
            创建时间
            </summary>
        </member>
        <member name="T:DragonUtility.DragonCompilation.Model.FeatureVideoEntity">
            <summary>
            专题视频列表 实体
            </summary>
        </member>
        <member name="P:DragonUtility.DragonCompilation.Model.FeatureVideoEntity.ItemCount">
            <summary>
            总记录数
            </summary>
        </member>
        <member name="P:DragonUtility.DragonCompilation.Model.FeatureVideoEntity.VideoList">
            <summary>
            视频列表
            </summary>
        </member>
        <member name="T:DragonUtility.DragonCompilation.Model.VideoEntity">
            <summary>
            专题视频信息 实体
            </summary>
        </member>
        <member name="P:DragonUtility.DragonCompilation.Model.VideoEntity.RowID">
            <summary>
            RowID
            </summary>
        </member>
        <member name="P:DragonUtility.DragonCompilation.Model.VideoEntity.VideoID">
            <summary>
            视频序号
            </summary>
        </member>
        <member name="P:DragonUtility.DragonCompilation.Model.VideoEntity.VideoName">
            <summary>
            视频名称
            </summary>
        </member>
        <member name="P:DragonUtility.DragonCompilation.Model.VideoEntity.FeatureID">
            <summary>
            专题ID
            </summary>
        </member>
        <member name="P:DragonUtility.DragonCompilation.Model.VideoEntity.VideoFileName">
            <summary>
            视频文件名称
            </summary>
        </member>
        <member name="P:DragonUtility.DragonCompilation.Model.VideoEntity.VideoUrl">
            <summary>
            视频链接
            </summary>
        </member>
        <member name="P:DragonUtility.DragonCompilation.Model.VideoEntity.VideoImgFileName">
            <summary>
            视频封面
            </summary>
        </member>
        <member name="P:DragonUtility.DragonCompilation.Model.VideoEntity.OrderNumber">
            <summary>
            排序值
            </summary>
        </member>
        <member name="P:DragonUtility.DragonCompilation.Model.VideoEntity.CreateDate">
            <summary>
            创建时间
            </summary>
        </member>
        <member name="P:DragonUtility.DragonCompilation.Model.VideoEntity.Summary">
            <summary>
            视频简介
            </summary>
        </member>
        <member name="T:DragonUtility.DragonCompilation.Model.FeatureWeiboEntity">
            <summary>
            专题微博列表 实体
            </summary>
        </member>
        <member name="P:DragonUtility.DragonCompilation.Model.FeatureWeiboEntity.ItemCount">
            <summary>
            总记录数
            </summary>
        </member>
        <member name="P:DragonUtility.DragonCompilation.Model.FeatureWeiboEntity.WeiboList">
            <summary>
            微博列表
            </summary>
        </member>
        <member name="T:DragonUtility.DragonCompilation.Model.WeiboEntity">
            <summary>
            专题微博信息 实体
            </summary>
        </member>
        <member name="P:DragonUtility.DragonCompilation.Model.WeiboEntity.RowID">
            <summary>
            RowID
            </summary>
        </member>
        <member name="P:DragonUtility.DragonCompilation.Model.WeiboEntity.WeiboID">
            <summary>
            微博序号
            </summary>
        </member>
        <member name="P:DragonUtility.DragonCompilation.Model.WeiboEntity.FeatureID">
            <summary>
            专题ID
            </summary>
        </member>
        <member name="P:DragonUtility.DragonCompilation.Model.WeiboEntity.WeiboUser">
            <summary>
            微博用户
            </summary>
        </member>
        <member name="P:DragonUtility.DragonCompilation.Model.WeiboEntity.WeiboContent">
            <summary>
            微博内容
            </summary>
        </member>
        <member name="P:DragonUtility.DragonCompilation.Model.WeiboEntity.WeiboUrl">
            <summary>
            微博url
            </summary>
        </member>
        <member name="P:DragonUtility.DragonCompilation.Model.WeiboEntity.OrderNumber">
            <summary>
            排序值
            </summary>
        </member>
        <member name="P:DragonUtility.DragonCompilation.Model.WeiboEntity.CreateDate">
            <summary>
            创建时间
            </summary>
        </member>
        <member name="P:DragonUtility.DragonCompilation.Model.WeiboEntity.Summary">
            <summary>
            简介
            </summary>
        </member>
        <member name="T:DragonUtility.DragonCompilation.Model.FeatureRelevantArticleEntity">
            <summary>
            专题或文章相关文章列表 实体
            </summary>
        </member>
        <member name="P:DragonUtility.DragonCompilation.Model.FeatureRelevantArticleEntity.ItemCount">
            <summary>
            总记录数
            </summary>
        </member>
        <member name="P:DragonUtility.DragonCompilation.Model.FeatureRelevantArticleEntity.ResourceRelevantList">
            <summary>
            相关文章列表
            </summary>
        </member>
        <member name="T:DragonUtility.DragonCompilation.Model.RelevantArticleEntity">
            <summary>
            专题或文章相关文章信息 实体
            </summary>
        </member>
        <member name="P:DragonUtility.DragonCompilation.Model.RelevantArticleEntity.RowID">
            <summary>
            RowID
            </summary>
        </member>
        <member name="P:DragonUtility.DragonCompilation.Model.RelevantArticleEntity.ResourceRelevantID">
            <summary>
            序号
            </summary>
        </member>
        <member name="P:DragonUtility.DragonCompilation.Model.RelevantArticleEntity.ResourceGUID">
            <summary>
            资源ID(专题ID或者文章ID)
            </summary>
        </member>
        <member name="P:DragonUtility.DragonCompilation.Model.RelevantArticleEntity.ArticleGUID">
            <summary>
            相关文章的文章ID
            </summary>
        </member>
        <member name="P:DragonUtility.DragonCompilation.Model.RelevantArticleEntity.Title">
            <summary>
            标题
            </summary>
        </member>
        <member name="P:DragonUtility.DragonCompilation.Model.RelevantArticleEntity.Summary">
            <summary>
            引言
            </summary>
        </member>
        <member name="P:DragonUtility.DragonCompilation.Model.RelevantArticleEntity.Url">
            <summary>
            文章URL
            </summary>
        </member>
        <member name="P:DragonUtility.DragonCompilation.Model.RelevantArticleEntity.CreateDate">
            <summary>
            创建时间
            </summary>
        </member>
        <member name="T:DragonUtility.DragonCompilation.Model.BaseCategoryEntity">
            <summary>
            分类 实体
            </summary>
        </member>
        <member name="P:DragonUtility.DragonCompilation.Model.BaseCategoryEntity.CategoryCode">
            <summary>
            分类编码
            </summary>
        </member>
        <member name="P:DragonUtility.DragonCompilation.Model.BaseCategoryEntity.CategoryName">
            <summary>
            分类名称
            </summary>
        </member>
        <member name="P:DragonUtility.DragonCompilation.Model.BaseCategoryEntity.ParentCategoryCode">
            <summary>
            父级分类编码
            </summary>
        </member>
        <member name="P:DragonUtility.DragonCompilation.Model.BaseCategoryEntity.OrderNumber">
            <summary>
            排序值
            </summary>
        </member>
        <member name="P:DragonUtility.DragonCompilation.Model.BaseCategoryEntity.CreateDate">
            <summary>
            创建时间
            </summary>
        </member>
        <member name="T:DragonUtility.DragonCompilation.Model.FeatureColumnEntity">
            <summary>
            专题栏目信息 实体
            </summary>
        </member>
        <member name="P:DragonUtility.DragonCompilation.Model.FeatureColumnEntity.FeatureColumnID">
            <summary>
            栏目序号
            </summary>
        </member>
        <member name="P:DragonUtility.DragonCompilation.Model.FeatureColumnEntity.FeatureColumnName">
            <summary>
            栏目名称
            </summary>
        </member>
        <member name="P:DragonUtility.DragonCompilation.Model.FeatureColumnEntity.FeatureID">
            <summary>
            专题ID
            </summary>
        </member>
        <member name="P:DragonUtility.DragonCompilation.Model.FeatureColumnEntity.OrderNumber">
            <summary>
            排序值
            </summary>
        </member>
        <member name="P:DragonUtility.DragonCompilation.Model.FeatureColumnEntity.CreateDate">
            <summary>
            创建时间
            </summary>
        </member>
        <member name="T:DragonUtility.DragonCompilation.Model.FeatureSearchEntity">
            <summary>
            专题搜索 实体
            </summary>
        </member>
        <member name="P:DragonUtility.DragonCompilation.Model.FeatureSearchEntity.FeatureName">
            <summary>
            专题标题
            </summary>
        </member>
        <member name="P:DragonUtility.DragonCompilation.Model.FeatureSearchEntity.CategoryCode">
            <summary>
            专题分类编码
            </summary>
        </member>
        <member name="P:DragonUtility.DragonCompilation.Model.FeatureSearchEntity.Tag">
            <summary>
            专题标签
            </summary>
        </member>
        <member name="P:DragonUtility.DragonCompilation.Model.FeatureSearchEntity.CreateDateStart">
            <summary>
            专题创建时间
            </summary>
        </member>
        <member name="P:DragonUtility.DragonCompilation.Model.FeatureSearchEntity.CreateDateEnd">
            <summary>
            专题创建时间
            </summary>
        </member>
        <member name="P:DragonUtility.DragonCompilation.Model.FeatureSearchEntity.PinYin">
            <summary>
            专题名称拼音首字母
            </summary>
        </member>
        <member name="T:DragonUtility.DataTypes.ExtensionMethods.TypeConversionExtensions">
            <summary>
            Extensions converting between types, checking if something is null, etc.
            </summary>
        </member>
        <member name="M:DragonUtility.DataTypes.ExtensionMethods.TypeConversionExtensions.FormatToString(System.Object,System.String)">
            <summary>
            Calls the object's ToString function passing in the formatting
            </summary>
            <param name="Input">Input object</param>
            <param name="Format">Format of the output string</param>
            <returns>The formatted string</returns>
        </member>
        <member name="M:DragonUtility.DataTypes.ExtensionMethods.TypeConversionExtensions.IsNotDefault``1(``0,System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Determines if the object is not null
            </summary>
            <typeparam name="T">Object type</typeparam>
            <param name="Object">The object to check</param>
            <param name="EqualityComparer">Equality comparer used to determine if the object is equal to default</param>
            <returns>False if it is null, true otherwise</returns>
        </member>
        <member name="M:DragonUtility.DataTypes.ExtensionMethods.TypeConversionExtensions.IsDefault``1(``0,System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Determines if the object is null
            </summary>
            <typeparam name="T">Object type</typeparam>
            <param name="Object">The object to check</param>
            <param name="EqualityComparer">Equality comparer used to determine if the object is equal to default</param>
            <returns>True if it is null, false otherwise</returns>
        </member>
        <member name="M:DragonUtility.DataTypes.ExtensionMethods.TypeConversionExtensions.IsNotNull(System.Object)">
            <summary>
            Determines if the object is not null
            </summary>
            <param name="Object">The object to check</param>
            <returns>False if it is null, true otherwise</returns>
        </member>
        <member name="M:DragonUtility.DataTypes.ExtensionMethods.TypeConversionExtensions.IsNull(System.Object)">
            <summary>
            Determines if the object is null
            </summary>
            <param name="Object">The object to check</param>
            <returns>True if it is null, false otherwise</returns>
        </member>
        <member name="M:DragonUtility.DataTypes.ExtensionMethods.TypeConversionExtensions.IsNotNullOrDBNull(System.Object)">
            <summary>
            Determines if the object is not null or DBNull
            </summary>
            <param name="Object">The object to check</param>
            <returns>False if it is null/DBNull, true otherwise</returns>
        </member>
        <member name="M:DragonUtility.DataTypes.ExtensionMethods.TypeConversionExtensions.IsNullOrDBNull(System.Object)">
            <summary>
            Determines if the object is null or DBNull
            </summary>
            <param name="Object">The object to check</param>
            <returns>True if it is null/DBNull, false otherwise</returns>
        </member>
        <member name="M:DragonUtility.DataTypes.ExtensionMethods.TypeConversionExtensions.NullCheck``1(``0,``0)">
            <summary>
            Does a null check and either returns the default value (if it is null) or the object
            </summary>
            <typeparam name="T">Object type</typeparam>
            <param name="Object">Object to check</param>
            <param name="DefaultValue">Default value to return in case it is null</param>
            <returns>The default value if it is null, the object otherwise</returns>
        </member>
        <member name="M:DragonUtility.DataTypes.ExtensionMethods.TypeConversionExtensions.ThrowIfDefault``1(``0,System.String,System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Determines if the object is equal to default value and throws an ArgumentNullException if it is
            </summary>
            <param name="Item">The object to check</param>
            <param name="EqualityComparer">Equality comparer used to determine if the object is equal to default</param>
            <param name="Name">Name of the argument</param>
        </member>
        <member name="M:DragonUtility.DataTypes.ExtensionMethods.TypeConversionExtensions.ThrowIfNull(System.Object,System.String)">
            <summary>
            Determines if the object is null and throws an ArgumentNullException if it is
            </summary>
            <param name="Item">The object to check</param>
            <param name="Name">Name of the argument</param>
        </member>
        <member name="M:DragonUtility.DataTypes.ExtensionMethods.TypeConversionExtensions.ThrowIfNullOrEmpty``1(System.Collections.Generic.IEnumerable{``0},System.String)">
            <summary>
            Determines if the IEnumerable is null or empty and throws an ArgumentNullException if it is
            </summary>
            <typeparam name="T">Item type</typeparam>
            <param name="Item">The object to check</param>
            <param name="Name">Name of the argument</param>
        </member>
        <member name="M:DragonUtility.DataTypes.ExtensionMethods.TypeConversionExtensions.ThrowIfNullOrDBNull(System.Object,System.String)">
            <summary>
            Determines if the object is null or DbNull and throws an ArgumentNullException if it is
            </summary>
            <param name="Item">The object to check</param>
            <param name="Name">Name of the argument</param>
        </member>
        <member name="M:DragonUtility.DataTypes.ExtensionMethods.TypeConversionExtensions.ToSQLDbType(System.Type)">
            <summary>
            Converts a .Net type to SQLDbType value
            </summary>
            <param name="Type">.Net Type</param>
            <returns>The corresponding SQLDbType</returns>
        </member>
        <member name="M:DragonUtility.DataTypes.ExtensionMethods.TypeConversionExtensions.ToSqlDbType(System.Data.DbType)">
            <summary>
            Converts a DbType to a SqlDbType
            </summary>
            <param name="Type">Type to convert</param>
            <returns>The corresponding SqlDbType (if it exists)</returns>
        </member>
        <member name="M:DragonUtility.DataTypes.ExtensionMethods.TypeConversionExtensions.ToDbType(System.Type)">
            <summary>
            Converts a .Net type to DbType value
            </summary>
            <param name="Type">.Net Type</param>
            <returns>The corresponding DbType</returns>
        </member>
        <member name="M:DragonUtility.DataTypes.ExtensionMethods.TypeConversionExtensions.ToDbType(System.Data.SqlDbType)">
            <summary>
            Converts SqlDbType to DbType
            </summary>
            <param name="Type">Type to convert</param>
            <returns>The corresponding DbType (if it exists)</returns>
        </member>
        <member name="M:DragonUtility.DataTypes.ExtensionMethods.TypeConversionExtensions.ToType(System.Data.SqlDbType)">
            <summary>
            Converts a SQLDbType value to .Net type
            </summary>
            <param name="Type">SqlDbType Type</param>
            <returns>The corresponding .Net type</returns>
        </member>
        <member name="M:DragonUtility.DataTypes.ExtensionMethods.TypeConversionExtensions.ToType(System.Data.DbType)">
            <summary>
            Converts a DbType value to .Net type
            </summary>
            <param name="Type">DbType</param>
            <returns>The corresponding .Net type</returns>
        </member>
        <member name="M:DragonUtility.DataTypes.ExtensionMethods.TypeConversionExtensions.TryTo``2(``0,``1)">
            <summary>
            Attempts to convert the object to another type and returns the value
            </summary>
            <typeparam name="T">Type to convert from</typeparam>
            <typeparam name="R">Return type</typeparam>
            <param name="Object">Object to convert</param>
            <param name="DefaultValue">Default value to return if there is an issue or it can't be converted</param>
            <returns>The object converted to the other type or the default value if there is an error or can't be converted</returns>
        </member>
        <member name="M:DragonUtility.DataTypes.ExtensionMethods.TypeConversionExtensions.CallMethod(System.String,System.Object,System.Object[])">
            <summary>
            Calls a method on an object
            </summary>
            <param name="MethodName">Method name</param>
            <param name="Object">Object to call the method on</param>
            <param name="InputVariables">(Optional)input variables for the method</param>
            <returns>The returned value of the method</returns>
        </member>
        <member name="T:DragonUtility.DataTypes.ExtensionMethods.EnumExtensions">
            <summary>
            枚举帮助类
            </summary>
        </member>
        <member name="M:DragonUtility.DataTypes.ExtensionMethods.EnumExtensions.GetItems``1">
            <summary>
            获取一个枚举中所有的子项，并将其转换为可枚举集合类型（IEnumerable）
            </summary>
            <typeparam name="T">枚举类型</typeparam>
            <returns>可枚举集合</returns>
        </member>
        <member name="T:DragonSource.Utils.ScriptHelper">
            <summary>
            用于在页面或者Web控件中输出脚本的类
            </summary>
        </member>
        <member name="M:DragonSource.Utils.ScriptHelper.ShowAlertScript(System.Web.UI.Page,System.String)">
            <summary>
            弹出消息提示对话框
            </summary>
            <param name="page">当前页面指针，一般为this</param>
            <param name="msg">提示信息</param>
        </member>
        <member name="M:DragonSource.Utils.ScriptHelper.ShowAlertScript(System.String)">
            <summary>
            弹出消息提示对话框，并跳转回上一页面，无须指定Page对象
            </summary>
            <param name="msg">显示的消息</param>
        </member>
        <member name="M:DragonSource.Utils.ScriptHelper.ShowAlertScriptAndContinue(System.String)">
            <summary>
            弹出消息提示对话框，无须指定Page对象
            </summary>
            <param name="msg">显示的消息</param>
        </member>
        <member name="M:DragonSource.Utils.ScriptHelper.ShowAlertAndRedirectScript(System.Web.UI.Page,System.String,System.String)">
            <summary>
            弹出消息提示对话框，并进行页面跳转。当URL为BACK时，页面将退到上一页，当URL为CLOSE时，则关闭窗口。
            </summary>
            <param name="page">当前页面指针，一般为this</param>
            <param name="msg">提示信息</param>
            <param name="url">跳转的目标URL。当URL为BACK时，页面将退到上一页，当URL为CLOSE时，则关闭窗口。</param>
        </member>
        <member name="M:DragonSource.Utils.ScriptHelper.ShowAlertAndRedirectScript(System.String,System.String)">
            <summary>
            弹出消息提示对话框，并进行页面跳转。当URL为BACK时，页面将退到上一页，当URL为CLOSE时，则关闭窗口。
            </summary>
            <param name="msg">提示信息</param>
            <param name="url">提示信息后要跳转的页面.，当URL为BACK时，页面将退到上一页，当URL为CLOSE时，则关闭窗口。</param>
        </member>
        <member name="M:DragonSource.Utils.ScriptHelper.ShowConfirmAndRedirectScript(System.Web.UI.Page,System.String,System.String)">
            <summary>
            弹出确认消息提示对话框，点击确认后页面跳转
            </summary>
            <param name="page">当前页面指针，一般为this</param>
            <param name="msg">提示信息</param>
            <param name="url">跳转的目标URL。当URL为BACK时，页面将退到上一页，当URL为CLOSE时，则关闭窗口。</param>
        </member>
        <member name="M:DragonSource.Utils.ScriptHelper.ShowConfirmAndRedirectScript(System.Web.UI.Page,System.String,System.String,System.String)">
            <summary>
            弹出确认消息提示对话框，点击确认或取消后页面跳转
            </summary>
            <param name="page">当前页面指针，一般为this</param>
            <param name="msg">提示信息</param>
            <param name="url1">点击确定时，跳转的目标URL。当URL为BACK时，页面将退到上一页，当URL为CLOSE时，则关闭窗口。</param>
            <param name="url2">点击取消时，跳转的目标URL。当URL为BACK时，页面将退到上一页，当URL为CLOSE时，则关闭窗口。</param>
        </member>
        <member name="M:DragonSource.Utils.ScriptHelper.ShowConfirmScript(System.Web.UI.WebControls.WebControl,System.String)">
            <summary>
            控件点击消息确认提示框
            </summary>
            <param name="Control">目标控件</param>
            <param name="msg">提示信息</param>
        </member>
        <member name="M:DragonSource.Utils.ScriptHelper.ShowOpenScript(System.Web.UI.WebControls.WebControl,System.String)">
            <summary>
            控件点击打开窗体
            </summary>
            <param name="Control">目标控件</param>
            <param name="url">打开页面的地址</param>
        </member>
        <member name="M:DragonSource.Utils.ScriptHelper.ShowOpenScript(System.Web.UI.WebControls.WebControl,System.String,System.Int32,System.Int32)">
            <summary>
            控件点击打开窗体
            </summary>
            <param name="Control">目标控件</param>
            <param name="url">打开页面的地址</param>
            <param name="width">打开页面的宽度</param>
            <param name="height">打开页面的高度</param>
        </member>
        <member name="M:DragonSource.Utils.ScriptHelper.ShowOpenMaxScript(System.Web.UI.WebControls.WebControl,System.String)">
            <summary>
            控件点击打开最大化窗体
            </summary>
            <param name="Control">目标控件</param>
            <param name="url">打开页面的地址</param>
        </member>
        <member name="M:DragonSource.Utils.ScriptHelper.ShowCloseScript(System.Web.UI.WebControls.WebControl)">
            <summary>
            控件点击关闭窗体
            </summary>
            <param name="Control">目标控件</param>
        </member>
        <member name="M:DragonSource.Utils.ScriptHelper.ShowAlertAndCloseScript(System.Web.UI.WebControls.WebControl,System.String)">
            <summary>
            控件点击消息确认提示框
            </summary>
            <param name="Control">目标控件</param>
            <param name="msg">提示信息</param>
        </member>
        <member name="M:DragonSource.Utils.ScriptHelper.ShowAlertAndCloseScript(System.Web.UI.WebControls.WebControl,System.String,System.String)">
            <summary>
            控件点击消息确认提示框
            </summary>
            <param name="Control">目标控件</param>
            <param name="msg">提示信息</param>
            <param name="url">父窗体地址</param>
        </member>
        <member name="M:DragonSource.Utils.ScriptHelper.ShowCustomScript(System.Web.UI.Page,System.String)">
            <summary>
            输出自定义脚本信息
            </summary>
            <param name="page">当前页面指针，一般为this</param>
            <param name="script">输出脚本</param>
        </member>
        <member name="T:DragonSource.Utils.ConfigHelper">
            <summary>
            web.config文件帮助类
            </summary>
        </member>
        <member name="M:DragonSource.Utils.ConfigHelper.GetAppSettingValue(System.String)">
            <summary>
            取得AppSettings中配置的值，当不存在配置的值时会抛出异常
            </summary>
            <param name="configKey">配置的Key</param>
            <returns>configKey对应的配置值</returns>
        </member>
        <member name="M:DragonSource.Utils.ConfigHelper.GetAppSettingValue(System.String,System.Boolean)">
            <summary>
            取得AppSettings中配置的值
            </summary>
            <param name="configKey">配置的Key</param>
            <param name="isThrowExceptionIfNotExist">当配置的值不存在时是否抛出异常</param>
            <returns>configKey对应的配置值</returns>
        </member>
        <member name="M:DragonSource.Utils.ConfigHelper.GetConnectionString(System.String)">
            <summary>
            取得ConnectionStrings中配置的值，当不存在配置的值时会抛出异常
            </summary>
            <param name="configName">配置的连接字符串的名字</param>
            <param name="isThrowExceptionIfNotExist">当配置的值不存在时是否抛出异常</param>
            <returns>configName对应的配置值</returns>
        </member>
        <member name="M:DragonSource.Utils.ConfigHelper.GetConnectionString(System.String,System.Boolean)">
            <summary>
            取得ConnectionStrings中配置的值
            </summary>
            <param name="configName">配置的连接字符串的名字</param>
            <param name="isThrowExceptionIfNotExist">当配置的值不存在时是否抛出异常</param>
            <returns>configName对应的配置值</returns>
        </member>
        <member name="M:DragonSource.Utils.ConfigHelper.GetConfigBool(System.String)">
            <summary>
            获取appSetting键key的值，并将其安全转换为Boolean类型
            </summary>
            <param name="key">appSetting键名</param>
            <returns></returns>
        </member>
        <member name="M:DragonSource.Utils.ConfigHelper.GetConfigDecimal(System.String)">
            <summary>
            获取appSetting键key的值，并将其安全转换为decimal类型
            </summary>
            <param name="key">appSetting键名</param>
            <returns></returns>
        </member>
        <member name="M:DragonSource.Utils.ConfigHelper.GetConfigInt(System.String)">
            <summary>
            获取appSetting键key的值，并将其安全转换为decimal类型
            </summary>
            <param name="key">appSetting键名</param>
            <returns></returns>
        </member>
        <member name="T:DragonSource.Utils.CacheHelper">
             <summary>
            本类设计了一个缓存封装器
             <para>即封装了System.Web.Caching.Cache类，并提供了一些方便方法</para>
             </summary>
        </member>
        <member name="M:DragonSource.Utils.CacheHelper.Add(System.String,System.Object)">
            <summary>
            把对象加载到Cache, 缓存策略:绝对过期
            </summary>
            <param name="key">键</param>
            <param name="obj">对象</param>
        </member>
        <member name="M:DragonSource.Utils.CacheHelper.Add(System.String,System.Object,System.Web.Caching.CacheDependency)">
            <summary>
            把对象加载到Cache,附加缓存依赖信息, 缓存策略:绝对过期
            </summary>
            <param name="key">键</param>
            <param name="obj">对象</param>
            <param name="dep">缓存依赖</param>
        </member>
        <member name="M:DragonSource.Utils.CacheHelper.Add(System.String,System.Object,System.Double)">
            <summary>
            把对象加载到Cache,附加过期时间信息, 缓存策略:绝对过期
            </summary>
            <param name="key">键值</param>
            <param name="obj">对象</param>
            <param name="seconds">缓存时间(秒)</param>
        </member>
        <member name="M:DragonSource.Utils.CacheHelper.Add(System.String,System.Object,System.Double,System.Web.Caching.CacheItemPriority)">
            <summary>
            把对象加载到Cache,附加过期时间信息和优先级, 缓存策略:绝对过期
            </summary>
            <param name="key">键值</param>
            <param name="obj">对象</param>
            <param name="seconds">缓存时间(秒)</param>
            <param name="priority">优先级</param>
        </member>
        <member name="M:DragonSource.Utils.CacheHelper.Add(System.String,System.Object,System.Double,System.Web.Caching.CacheDependency)">
             <summary>
             把对象加载到Cache,附加缓存依赖和过期时间(多少秒后过期), 缓存策略:绝对过期
             (默认优先级为Normal)
             </summary>
             <param name="key">键值</param>
             <param name="obj">对象</param>
             <param name="seconds">缓存时间(秒)</param>
            <param name="dep">缓存依赖</param>
        </member>
        <member name="M:DragonSource.Utils.CacheHelper.Add(DragonSource.Utils.CachePolicyEnum,System.String,System.Object,System.Web.Caching.CacheDependency,System.Double,System.Web.Caching.CacheItemPriority)">
            <summary>
            添加对象加载到Cache,附加缓存策略，缓存依赖和过期时间(多少秒后过期)及优先级
            </summary>
            <param name="cachePolicyEnum">缓存过期策略</param>
            <param name="key">键值</param>
            <param name="obj">对象</param>
            <param name="dep">缓存依赖</param>
            <param name="seconds">缓存时间(秒)</param>
            <param name="priority">优先级</param>
        </member>
        <member name="M:DragonSource.Utils.CacheHelper.Add(DragonSource.Utils.CachePolicyEnum,System.String,System.Object,System.Web.Caching.CacheDependency,System.DateTime,System.Web.Caching.CacheItemPriority)">
            <summary>
            添加对象加载到Cache,附加缓存策略，缓存依赖和过期时间(具体指定时间<c>DateTime</c>类型)及优先级
            </summary>
            <param name="cachePolicyEnum">缓存过期策略</param>
            <param name="key">键值</param>
            <param name="obj">对象</param>
            <param name="dep">缓存依赖</param>
            <param>缓存时间(秒)</param>
            <param name="dtExpireTime">缓存过期的具体时间</param>
            <param name="priority">优先级</param>
        </member>
        <member name="M:DragonSource.Utils.CacheHelper.Get(System.String)">
            <summary>
            根据键获取被缓存的对象
            </summary>
            <param name="key">键值</param>
            <returns></returns>
        </member>
        <member name="M:DragonSource.Utils.CacheHelper.Remove(System.String)">
            <summary>
            根据键名移除Cache
            </summary>
            <param name="key">键</param>
        </member>
        <member name="M:DragonSource.Utils.CacheHelper.RemoveByPattern(System.String)">
            <summary>
            根据正则表达式的模式移除Cache
            </summary>
            <param name="pattern">模式</param>
        </member>
        <member name="M:DragonSource.Utils.CacheHelper.Clear">
            <summary>
            清空Cache对象，即清空所有缓存项
            </summary>
        </member>
        <member name="T:DragonSource.Utils.CachePolicyEnum">
            <summary>
            缓存策略
            </summary>
        </member>
        <member name="F:DragonSource.Utils.CachePolicyEnum.Absolute">
            <summary>
            绝对过期
            </summary>
        </member>
        <member name="F:DragonSource.Utils.CachePolicyEnum.Slide">
            <summary>
            滑动过期
            </summary>
        </member>
        <member name="T:DragonSource.Utils.SerializationHelper">
            <summary>
            序列化操作类
            </summary>
        </member>
        <member name="M:DragonSource.Utils.SerializationHelper.ToBinary(System.Object,System.String)">
            <summary>
            将一个对象序列化字节数组
            </summary>
            <param name="Object">要序列化的对象</param>
            <param name="FileToSaveTo">要将序列化的结果存放的路径地址（可选）,但务必为正确的全路径形式，否则会报错</param>
            <returns>序列化后的字节数组</returns>
        </member>
        <member name="M:DragonSource.Utils.SerializationHelper.ToJSON(System.Object,System.String,System.Text.Encoding)">
            <summary>
            将一个对象序列化为Json字符串，返回此Json字符串,如果不指定编码格式将使用JavaScriptSerializer的方式进行序列化，否则将使用DataContractJsonSerializer的方式来进行序列化；当使用DataContractJsonSerializer序列化时，为确保生成干净的Json字符串，请对要序列的类，对象属性分别使用DataContract和DataMember等相关特性来标记
            </summary>
            <param name="Object">要序列化的对象</param>
            <param name="FileToSaveTo">要将序列化的结果存放的路径地址（可选）,但务必为正确的全路径形式，否则会报错</param>
            <param name="EncodingUsing">编码格式</param>
            <returns>转化后的Json字符串，如果</returns>
        </member>
        <member name="M:DragonSource.Utils.SerializationHelper.ToXML(System.Object,System.String,System.Text.Encoding)">
            <summary>
            将对象序列化为XML格式，并返回序列化后的Xml字符串
            </summary>
            <param name="Object">要序列化的对象</param>
            <param name="FileToSaveTo">要将序列化的结果存放的路径地址（可选）,但务必为正确的全路径形式，否则会报错</param>
            <param name="EncodingUsing">使用的编码格式,默认为UTF-8</param>
            <returns>序列化后的XML字符串</returns>
        </member>
        <member name="M:DragonSource.Utils.SerializationHelper.ToCDataXml(System.Object,System.String,System.Text.Encoding)">
            <summary>
            序列化为使用CDATA包裹节点内容的XML
            </summary>
            <param name="Object">将要转化为CDataXml的对象</param>
            <param name="FileToSaveTo">要将序列化的结果存放的路径地址（可选）,但务必为正确的全路径形式，否则会报错</param>
            <param name="EncodingUsing">使用的编码格式,默认为UTF-8</param>
            <returns></returns>
        </member>
        <member name="M:DragonSource.Utils.SerializationHelper.ToObject``1(System.Byte[])">
            <summary>
            将序列化的byte数组反序列化为对象
            </summary>
            <param name="Content">要反列化的byte数组</param>
            <typeparam name="T">要转化的对象类型</typeparam>
            <returns></returns>
        </member>
        <member name="M:DragonSource.Utils.SerializationHelper.ToObject(System.Byte[],System.Type)">
            <summary>
            将序列化的byte数组反序列化为对象
            </summary>
            <param name="Content">要反列化的byte数组</param>
            <param name="ObjectType">要转化的对象类型</param>
            <returns></returns>
        </member>
        <member name="M:DragonSource.Utils.SerializationHelper.ToObject``1(System.Xml.XmlDocument,System.Text.Encoding)">
            <summary>
            将XmlDocument对象反序列为对象的泛型方法
            </summary>
            <param name="Content">将要反序列化的XmlDoucment对象</param>
            <param name="EncodingUsing">使用的编码格式，默认为UTF-8</param>
            <typeparam name="T">序列化的对象T</typeparam>
            <returns></returns>
        </member>
        <member name="M:DragonSource.Utils.SerializationHelper.ToObject(System.Xml.XmlDocument,System.Type,System.Text.Encoding)">
            <summary>
            将序列化的XmlDocument内容反序列为指定的对象类型
            </summary>
            <param name="Content">将要反序列化的XmlDoucment对象</param>
            <param name="EncodingUsing">使用的编码格式，默认为UTF-8</param>
            <param name="ObjectType">要反序列化成的类型</param>
            <returns></returns>
        </member>
        <member name="M:DragonSource.Utils.SerializationHelper.ToObject``1(System.IO.FileInfo)">
            <summary>
            将存储序列化的二进制字节数组文件反序列化为指定类型的对象
            </summary>
            <typeparam name="T">指定类型的对象</typeparam>
            <param name="Content">要反序列化的文件</param>
            <returns></returns>
        </member>
        <member name="M:DragonSource.Utils.SerializationHelper.JSONToObject``1(System.String,System.Text.Encoding)">
            <summary>
            将Json字符串反序列化为指定类型T的对象
            </summary>
            <typeparam name="T">指定的返回类型T</typeparam>
            <param name="Content">要转化为的Json字符串</param>
            <param name="EncodingUsing">编码格式，默认为UTF-8</param>
            <returns>指定类型T的对象</returns>
        </member>
        <member name="M:DragonSource.Utils.SerializationHelper.JSONToObject``1(System.IO.FileInfo,System.Text.Encoding)">
            <summary>
            将存储Json信息的文件转化为指定类型T的对象
            </summary>
            <typeparam name="T">指定的返回类型T</typeparam>
            <param name="Content">存储Json信息的文件</param>
            <param name="EncodingUsing">编码格式，默认为UTF-8</param>
            <returns>指定类型T的对象</returns>
        </member>
        <member name="M:DragonSource.Utils.SerializationHelper.JSONToObject(System.IO.FileInfo,System.Type,System.Text.Encoding)">
             <summary>
            将存储Json信息的文件转化为指定类型ObjectType的对象
             </summary>
             <param name="ObjectType">指定的返回类型ObjectType</param>
             <param name="Content">存储Json信息的文件</param>
             <param name="EncodingUsing">编码格式，默认为UTF-8</param>
             <returns>>指定类型ObjectType的对象</returns>
        </member>
        <member name="M:DragonSource.Utils.SerializationHelper.JSONToObject(System.String,System.Type,System.Text.Encoding)">
            <summary>
            将序列化的Json字符串反序列化为指定类型ObjectType的对象
            </summary>
            <param name="ObjectType">指定的返回类型ObjectType</param>
            <param name="Content">序列化的Json字符串</param>
            <param name="EncodingUsing">编码格式，默认为UTF-8</param>
            <returns>指定类型ObjectType的对象</returns>
        </member>
        <member name="M:DragonSource.Utils.SerializationHelper.XMLToObject``1(System.String,System.Text.Encoding)">
            <summary>
            将序列化的字符串转化为指定类型T的对象
            </summary>
            <typeparam name="T">要反序列化成的类型</typeparam>
            <param name="Content">要反序列化的字符串</param>
            <param name="EncodingUsing">编码格式,默认UTF-8</param>
            <returns></returns>
        </member>
        <member name="M:DragonSource.Utils.SerializationHelper.XMLToObject``1(System.IO.FileInfo,System.Text.Encoding)">
            <summary>
            将指定的序列化文件反序列化成指定的类型T对象
            </summary>
            <typeparam name="T">要反序列化成的类型</typeparam>
            <param name="Content">要反序列化的FileInfo</param>
            <param name="EncodingUsing">编码格式,默认UTF-8</param>
            <returns></returns>
        </member>
        <member name="M:DragonSource.Utils.SerializationHelper.XMLToObject(System.IO.FileInfo,System.Type,System.Text.Encoding)">
            <summary>
            将指定的序列化文件反序列化成指定的类型T对象
            </summary>
            <param name="ObjectType">要反序列化成的类型</param>
            <param name="Content">要反序列化的FileInfo</param>
            <param name="EncodingUsing">编码格式,默认UTF-8</param>
            <returns></returns>
        </member>
        <member name="M:DragonSource.Utils.SerializationHelper.XMLToObject(System.String,System.Type,System.Text.Encoding)">
            <summary>
            将序列化的字符串转化为指定类型的对象
            </summary>
            <param name="ObjectType">要反序列化成的类型</param>
            <param name="Content">要反序列化的字符串</param>
            <param name="EncodingUsing">编码格式,默认UTF-8</param>
            <returns></returns>
        </member>
        <member name="M:DragonSource.Utils.MyXMLWriter.ReplaceLowOrderASCIICharacters(System.String)">
            <summary>
            处理低位字符
            </summary>
            <param name="tmp"></param>
            <returns></returns>
        </member>
        <member name="T:DragonSource.Utils.Config.Log.LogConfig">
            <summary>
            日志配置类
            </summary>
        </member>
        <member name="P:DragonSource.Utils.Config.Log.LogConfig.LogDir">
            <summary>
            全局日志记录路径
            </summary>
        </member>
        <member name="F:DragonUtility.Validate.Express.IDCARD">
            <summary>
            身份证验证
            </summary>
        </member>
        <member name="F:DragonUtility.Validate.Express.HANDSET">
            <summary>
            手机验证(不包含小录通)
            </summary>
        </member>
        <member name="F:DragonUtility.Validate.Express.IP">
            <summary>
            IP验证
            </summary>
        </member>
        <member name="F:DragonUtility.Validate.Express.NUMBER">
            <summary>
            是否为数字
            </summary>
        </member>
        <member name="F:DragonUtility.Validate.Express.ENGLISH">
            <summary>
            是否为英文
            </summary>
        </member>
        <member name="F:DragonUtility.Validate.Express.LOWER">
            <summary>
            是否为英文小写
            </summary>
        </member>
        <member name="F:DragonUtility.Validate.Express.UPPER">
            <summary>
            是否为英文大写
            </summary>
        </member>
        <member name="F:DragonUtility.Validate.Express.CHINESE">
            <summary>
            是否为中文
            </summary>
        </member>
        <member name="F:DragonUtility.Validate.Express.ENGLISHORDIGITAL">
            <summary>
            是否为英文或数字
            </summary>
        </member>
        <member name="F:DragonUtility.Validate.Express.EMAIL">
            <summary>
            是否为正确的电子邮件格式
            </summary>
        </member>
        <member name="F:DragonUtility.Validate.Express.FY_IN">
            <summary>
            防止sql注入
            </summary>
        </member>
        <member name="T:DragonUtility.ResourcePopedom.Authorize">
            <summary>
            后台权限管理类
            </summary>
        </member>
        <member name="M:DragonUtility.ResourcePopedom.Authorize.GetAuth(System.Int32,System.String,System.String,System.String,System.String)">
            <summary>
            获取后台管理用户权限
            </summary>
            <param name="usercode"></param>
            <param name="pwd"></param>
            <param name="rolCode"></param>
            <param name="projectCode"></param>
            <param name="authmenu"></param>
            <returns></returns>
        </member>
        <member name="M:DragonUtility.ResourcePopedom.Authorize.UserInfoProject(System.String)">
            <summary>
            获取所有的当前用户所有的项目
            </summary>
            <param name="usercode"></param>
            <returns></returns>
        </member>
        <member name="M:DragonUtility.ResourcePopedom.Authorize.UserNameByCode(System.Int32)">
            <summary>
            获取用户名
            </summary>
            <param name="userCode"></param>
            <returns></returns>
        </member>
        <member name="M:DragonUtility.ResourcePopedom.Authorize.RoleNameByCode(System.String)">
            <summary>
            获取角色编码对应的编码名称
            </summary>
            <param name="userCode"></param>
            <returns></returns>
        </member>
        <member name="M:DragonUtility.ResourcePopedom.Authorize.CompanyDeptByDeptCode(System.String)">
            <summary>
            根据部门编号获取部门信息
            </summary>
            <param name="DeptCode"></param>
            <returns></returns>
        </member>
        <member name="M:DragonUtility.ResourcePopedom.Authorize.CompanyNameByCode(System.String)">
            <summary>
            根据公司编码获取公司名称
            </summary>
            <param name="companyCode"></param>
            <returns></returns>
        </member>
        <member name="M:DragonUtility.ResourcePopedom.Authorize.RequestbyGet(System.String)">
            <summary>
             Get方式请求页面
            </summary>
            <param name="url"></param>
            <returns></returns>
        </member>
        <member name="M:DragonUtility.ResourcePopedom.Authorize.GetStringResponse(System.Net.HttpWebResponse)">
            <summary>
            发送请求，返回字符串
            </summary>
            <param name="resp"></param>
            <returns></returns>
        </member>
        <member name="P:DragonUtility.ResourcePopedom.Authorize.BP_PopedomUserentity">
            <summary>
            
            </summary>
        </member>
        <member name="T:DragonUtility.ResourcePopedom.PopedomUserEntity">
            <summary>
            
            </summary>
        </member>
        <member name="P:DragonUtility.ResourcePopedom.PopedomUserEntity.userCode">
            <summary>
            //用户编码
            </summary>
        </member>
        <member name="P:DragonUtility.ResourcePopedom.PopedomUserEntity.pwd">
            <summary>
            //用户密码
            </summary>
        </member>
        <member name="P:DragonUtility.ResourcePopedom.PopedomUserEntity.roleCode">
            <summary>
            //角色编码
            </summary>
        </member>
        <member name="P:DragonUtility.ResourcePopedom.PopedomUserEntity.roleName">
            <summary>
            //角色名称
            </summary>
        </member>
        <member name="P:DragonUtility.ResourcePopedom.PopedomUserEntity.deptName">
            <summary>
            //所在部门
            </summary>
        </member>
        <member name="P:DragonUtility.ResourcePopedom.PopedomUserEntity.companyName">
            <summary>
            //公司名称
            </summary>
        </member>
        <member name="P:DragonUtility.ResourcePopedom.PopedomUserEntity.projectDt">
            <summary>
            //所有项目列表
            </summary>
        </member>
        <member name="P:DragonUtility.ResourcePopedom.PopedomUserEntity.projectName">
            <summary>
            //当前项目名称
            </summary>
        </member>
        <member name="P:DragonUtility.ResourcePopedom.PopedomUserEntity.projectCode">
            <summary>
            //当前项目编号
            </summary>
        </member>
        <member name="P:DragonUtility.ResourcePopedom.PopedomUserEntity.projectColumnList">
            <summary>
            //当前项目的菜单列表
            </summary>
        </member>
        <member name="P:DragonUtility.ResourcePopedom.PopedomUserEntity.LoginTime">
            <summary>
            登录时间
            </summary>
        </member>
        <member name="T:DragonUtility.Encryption.DES">
            <summary>
            DES加密算法
            </summary>
        </member>
        <member name="M:DragonUtility.Encryption.DES.#ctor">
            <summary>
            默认构造函数 默认KEY=qikancom
            </summary>
        </member>
        <member name="M:DragonUtility.Encryption.DES.#ctor(System.String)">
            <summary>
            构造函数
            </summary>
            <param name="keyString">密钥,长度必须为8位</param>
        </member>
        <member name="M:DragonUtility.Encryption.DES.#ctor(System.Byte[])">
            <summary>
            构造函数
            </summary>
            <param name="key">密钥,数组长度必须为8位</param>
        </member>
        <member name="M:DragonUtility.Encryption.DES.#ctor(System.Byte[],System.Byte[])">
            <summary>
            构造函数
            </summary>
            <param name="key">密钥,数组长度必须为8位</param>
            <param name="iv">向量,数组长度必须为8位</param>
        </member>
        <member name="M:DragonUtility.Encryption.DES.Encrypt(System.String)">
            <summary>
            加密字符串
            </summary>
            <param name="input">要加密的字符串</param>
            <returns>加密后的字符串</returns>
        </member>
        <member name="M:DragonUtility.Encryption.DES.EncryptUrl(System.String)">
            <summary>
            加密字符串(url加密中加号的‘+’处理)
            </summary>
            <param name="input">要加密的字符串</param>
            <returns>加密后的字符串</returns>
        </member>
        <member name="M:DragonUtility.Encryption.DES.Decrypt(System.String)">
            <summary>
            解密字符串
            </summary>
            <param name="input">要解密字符串的字符串</param>
            <returns>解密字符串后的字符串</returns>
        </member>
        <member name="M:DragonUtility.Encryption.DES.DecryptUrl(System.String)">
            <summary>
            解密字符串(url加密中加号的‘+’处理)
            </summary>
            <param name="input">要解密字符串的字符串</param>
            <returns>解密字符串后的字符串</returns>
        </member>
        <member name="P:DragonUtility.Encryption.DES.Instance">
            <summary>
            当前实例
            </summary>
        </member>
        <member name="T:DragonUtility.DragonCompilation.Feature">
            <summary>
            专题接口
            </summary>
        </member>
        <member name="F:DragonUtility.DragonCompilation.Feature.strConn">
            <summary>
            数据库连接串
            </summary>
        </member>
        <member name="F:DragonUtility.DragonCompilation.Feature.strImgPath">
            <summary>
            图片网址
            </summary>
        </member>
        <member name="M:DragonUtility.DragonCompilation.Feature.#cctor">
            <summary>
            静态构造函数
            </summary>
        </member>
        <member name="M:DragonUtility.DragonCompilation.Feature.GetFeature(System.Int32)">
            <summary>
            获取单一专题信息(包含专题基本信息以及专题下各种资源的数量)
            </summary>
            <param name="FeatureID">专题ID</param>
            <returns></returns>
        </member>
        <member name="M:DragonUtility.DragonCompilation.Feature.GetFeatureList(DragonUtility.DragonCompilation.Model.FeatureSearchEntity,System.Int32,System.Int32)">
            <summary>
            获取专题列表(包含专题基本信息以及专题下各种资源的数量)
            </summary>
            <param name="model">专题模版实例</param>
            <param name="startIndex">开始索引</param>
            <param name="endIndex">结束索引</param>
            <returns></returns>
        </member>
        <member name="M:DragonUtility.DragonCompilation.Feature.GetFeatureBasic(System.Int32)">
            <summary>
            获取单一专题信息(只包含专题的基本信息)
            </summary>
            <param name="FeatureID">专题ID</param>
            <returns></returns>
        </member>
        <member name="M:DragonUtility.DragonCompilation.Feature.GetFeatureBasicList(DragonUtility.DragonCompilation.Model.FeatureSearchEntity,System.Int32,System.Int32)">
            <summary>
            获取专题列表(只包含专题的基本信息)
            </summary>
            <param name="model">专题模版实例</param>
            <param name="startIndex">开始索引</param>
            <param name="endIndex">结束索引</param>
            <returns></returns>
        </member>
        <member name="M:DragonUtility.DragonCompilation.Feature.GetFeatureArticleList(System.Int32,System.Int32,System.Int32)">
            <summary>
            获取专题文章列表
            </summary>
            <param name="FeatureID">专题ID</param>
            <param name="startIndex">开始索引</param>
            <param name="endIndex">结束索引</param>
            <returns></returns>
        </member>
        <member name="M:DragonUtility.DragonCompilation.Feature.GetMoreFeatureArticleList(System.Collections.Generic.List{System.Int32},System.Int32,System.Int32)">
            <summary>
            获取多个专题下的文章列表
            </summary>
            <param name="featureIDList">专题ID数组</param>
            <param name="startIndex">开始索引</param>
            <param name="endIndex">结束索引</param>
            <returns></returns>
        </member>
        <member name="M:DragonUtility.DragonCompilation.Feature.GetRecommendArticleList(System.Collections.Generic.List{System.Int32},System.Int32,System.Int32)">
            <summary>
            获取多个专题下的推荐文章列表
            </summary>
            <param name="featureIDList">专题ID数组</param>
            <param name="startIndex">开始索引</param>
            <param name="endIndex">结束索引</param>
            <returns></returns>
        </member>
        <member name="M:DragonUtility.DragonCompilation.Feature.GetFeatureArticle(System.String)">
            <summary>
            获取单一专题文章
            </summary>
            <param name="ArticleGUID">专题文章GUID</param>
            <returns></returns>
        </member>
        <member name="M:DragonUtility.DragonCompilation.Feature.GetFeatureAudioList(System.Int32,System.Int32,System.Int32)">
            <summary>
            获取专题音频列表
            </summary>
            <param name="FeatureID">专题ID</param>
            <param name="startIndex">开始索引</param>
            <param name="endIndex">结束索引</param>
            <returns></returns>
        </member>
        <member name="M:DragonUtility.DragonCompilation.Feature.GetFeatureBaiKeList(System.Int32,System.Int32,System.Int32)">
            <summary>
            获取专题百科列表
            </summary>
            <param name="FeatureID">专题ID</param>
            <param name="startIndex">开始索引</param>
            <param name="endIndex">结束索引</param>
            <returns></returns>
        </member>
        <member name="M:DragonUtility.DragonCompilation.Feature.GetFeatureBookList(System.Int32,System.Int32,System.Int32)">
            <summary>
            获取专题图书列表
            </summary>
            <param name="FeatureID">专题ID</param>
            <param name="startIndex">开始索引</param>
            <param name="endIndex">结束索引</param>
            <returns></returns>
        </member>
        <member name="M:DragonUtility.DragonCompilation.Feature.GetFeatureImgList(System.Int32,System.Int32,System.Int32)">
            <summary>
            获取专题组图列表
            </summary>
            <param name="FeatureID">专题ID</param>
            <param name="startIndex">开始索引</param>
            <param name="endIndex">结束索引</param>
            <returns></returns>
        </member>
        <member name="M:DragonUtility.DragonCompilation.Feature.GetFeatureMagazineList(System.Int32,System.Int32,System.Int32)">
            <summary>
            获取专题期刊列表
            </summary>
            <param name="FeatureID">专题ID</param>
            <param name="startIndex">开始索引</param>
            <param name="endIndex">结束索引</param>
            <returns></returns>
        </member>
        <member name="M:DragonUtility.DragonCompilation.Feature.GetFeatureVideoList(System.Int32,System.Int32,System.Int32)">
            <summary>
            获取专题视频列表
            </summary>
            <param name="FeatureID">专题ID</param>
            <param name="startIndex">开始索引</param>
            <param name="endIndex">结束索引</param>
            <returns></returns>
        </member>
        <member name="M:DragonUtility.DragonCompilation.Feature.GetFeatureVideo(System.Int32)">
            <summary>
            获取单一视频信息
            </summary>
            <param name="VideoID">视频ID</param>
            <returns></returns>
        </member>
        <member name="M:DragonUtility.DragonCompilation.Feature.GetFeatureWeiBoList(System.Int32,System.Int32,System.Int32)">
            <summary>
            获取专题微博列表
            </summary>
            <param name="FeatureID">专题ID</param>
            <param name="startIndex">开始索引</param>
            <param name="endIndex">结束索引</param>
            <returns></returns>
        </member>
        <member name="M:DragonUtility.DragonCompilation.Feature.GetFeatureRelevantArticleList(System.String,System.Int32,System.Int32)">
            <summary>
            获取专题或专题文章的相关文章列表
            </summary>
            <param name="ResourceGUID">专题ID或者专题文章编号</param>
            <param name="startIndex">开始索引</param>
            <param name="endIndex">结束索引</param>
            <returns></returns>
        </member>
        <member name="M:DragonUtility.DragonCompilation.Feature.GetAllCategory">
            <summary>
            获取所有专题分类
            </summary>
            <returns></returns>
        </member>
        <member name="M:DragonUtility.DragonCompilation.Feature.GetCategoryList(System.String)">
            <summary>
            获取指定分类下的N级子分类信息
            </summary>
            <param name="categorycode">分类编号</param>
            <returns></returns>
        </member>
        <member name="M:DragonUtility.DragonCompilation.Feature.GetCategoryByParent(System.String)">
            <summary>
            获取指定父类下的分类信息
            </summary>
            <param name="categorycode">分类编号</param>
            <returns></returns>
        </member>
        <member name="M:DragonUtility.DragonCompilation.Feature.GetCategory(System.String)">
            <summary>
            获取单一分类的信息
            </summary>
            <param name="categorycode">分类编号</param>
            <returns></returns>
        </member>
        <member name="M:DragonUtility.DragonCompilation.Feature.GetFeatureColumnList(System.Int32)">
            <summary>
            获取指定专题下的栏目信息
            </summary>
            <param name="FeatureID">专题ID</param>
            <returns></returns>
        </member>
        <member name="M:DragonUtility.DragonCompilation.Feature.GetFeatureColumnList">
            <summary>
            获取所有栏目信息
            </summary>
            <returns></returns>
        </member>
        <member name="T:DragonUtility.DataProvider.SQLServerProvider">
            <summary>
            该类可以用作提供数据的公共方法类
            </summary>
        </member>
        <member name="M:DragonUtility.DataProvider.SQLServerProvider.CreateModel``1(System.Data.IDataRecord)">
            <summary>
            请注意Model程序集中EntityBase类需要保留，这里为动态创建类型实例提供类类型约束,需要在创建实体时实现SQLDATAREADER的构造
            </summary>
            <typeparam name="T">T类型</typeparam>
            <param name="dr"><c>IDataRecord</c>对象</param>
            <returns>T类型对象</returns>
        </member>
        <member name="M:DragonUtility.DataProvider.SQLServerProvider.GetRowCount(System.String,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            获取记录集总数
            </summary>
            <param name="conn"></param>
            <param name="sqlstr"></param>
            <param name="param"></param>
            <returns></returns>
        </member>
        <member name="M:DragonUtility.DataProvider.SQLServerProvider.GetData(System.String,System.String,System.Data.SqlClient.SqlParameter[],System.String,System.String,System.Int32,System.Int32)">
            <summary>
            返回可以应用分页的Reader,仅试用于2005以上版本的库
            </summary>
            <param name="conn">连接字符串</param>
            <param name="sqlstr">查询字符串</param>
            <param name="param">参数</param>
            <param name="primarykey">不允许为空</param>
            <param name="orderby">如果传递空字符串,将会以主键排序</param>
            <param name="pageIndex">页码</param>
            <param name="pageSize">页大小</param>
            <returns>T类型</returns>
        </member>
        <member name="M:DragonUtility.DataProvider.SQLServerProvider.GetPageOfList``1(System.String,System.String,System.Data.SqlClient.SqlParameter[],System.String,System.String,System.Int32,System.Int32)">
            <summary>
            获取一个分页列表
            </summary>
            <typeparam name="T">T类型</typeparam>
            <param name="conn">数据库链接字符串名称</param>
            <param name="sqlstr">sql字符串</param>
            <param name="param">sql参数数组</param>
            <param name="primarykey">主键字段名称</param>
            <param name="orderby">排序字段名称</param>
            <param name="pageIndex">页码</param>
            <param name="pageSize">页面大小</param>
            <returns>分页列表对象</returns>
        </member>
        <member name="M:DragonUtility.DataProvider.SQLServerProvider.GetIList``1(System.String,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            带约束列表
            </summary>
            <typeparam name="T">T类型</typeparam>
            <param name="conn">数据库链接字符串名称</param>
            <param name="sqlstr">sql字符串</param>
            <param name="param">sql参数数组</param>
            <returns>IList&lt;T&gt;</returns>
        </member>
        <member name="M:DragonUtility.DataProvider.SQLServerProvider.Create``1(System.Data.IDataRecord)">
            <summary>
            创建对象
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dr"></param>
            <returns></returns>
        </member>
        <member name="M:DragonUtility.DataProvider.SQLServerProvider.HasRows(System.String,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            是否包含记录
            </summary>
            <param name="conn"></param>
            <param name="sqlstr"></param>
            <param name="param"></param>
            <returns></returns>
        </member>
        <member name="M:DragonUtility.DataProvider.SQLServerProvider.CreateObject``1(System.String,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            无类型约束创建对象
            </summary>
            <typeparam name="T"></typeparam>
            <param name="conn"></param>
            <param name="sqlstr"></param>
            <param name="param"></param>
            <returns></returns>
        </member>
        <member name="M:DragonUtility.DataProvider.SQLServerProvider.CreateList``1(System.String,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            无类型约束创建列表
            </summary>
            <typeparam name="T"></typeparam>
            <param name="conn"></param>
            <param name="sqlstr"></param>
            <param name="param"></param>
            <returns></returns>
        </member>
        <member name="M:DragonUtility.DataProvider.SQLServerProvider.CreatePage``1(System.String,System.String,System.Data.SqlClient.SqlParameter[],System.String,System.String,System.Int32,System.Int32)">
            <summary>
            无类型约束分页
            </summary>
            <typeparam name="T">返回值</typeparam>
            <param name="conn">连接字符串</param>
            <param name="sqlstr">查询字符串</param>
            <param name="param">参数数组</param>
            <param name="primarykey">主键,主键与排序字段至少要填写一项</param>
            <param name="orderby">排序字段,如果需要降序 后边跟 DESC,此项为空将默认按照主键排序</param>
            <param name="pageIndex">页码,从1开始</param>
            <param name="pageSize">页容量</param>
            <returns>T类型</returns>
            <exception cref="T:System.ArgumentException">查询语句末尾不能包含Order By 否则会引发异常</exception>
        </member>
        <member name="T:DragonUtility.Rand.RandomMaker">
            <summary>
            Utility class for handling random
            information.
            </summary>
        </member>
        <member name="M:DragonUtility.Rand.RandomMaker.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:DragonUtility.Rand.RandomMaker.#ctor(System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="Seed">Seed value</param>
        </member>
        <member name="M:DragonUtility.Rand.RandomMaker.NextDate(System.DateTime,System.DateTime)">
            <summary>
            returns a random date/time for a specific date range.
            </summary>
            <param name="Start">Start time</param>
            <param name="End">End time</param>
            <returns>A random date/time between the start and end times</returns>
        </member>
        <member name="M:DragonUtility.Rand.RandomMaker.NextString(System.Int32,System.String,System.Int32)">
            <summary>
            Returns a randomly generated string of a specified length, containing
            only a set of characters, and at max a specified number of non alpha numeric characters.
            </summary>
            <param name="Length">Length of the string</param>
            <param name="AllowedCharacters">Characters allowed in the string</param>
            <param name="NumberOfNonAlphaNumericsAllowed">Number of non alpha numeric characters allowed.</param>
            <returns>A randomly generated string of a specified length, containing only a set of characters, and at max a specified number of non alpha numeric characters.</returns>
        </member>
        <member name="M:DragonUtility.Rand.RandomMaker.NextLoremIpsum(System.Int32)">
            <summary>
            Creates a Lorem Ipsum sentence.
            </summary>
            <param name="NumberOfWords">Number of words for the sentence</param>
            <returns>A string containing Lorem Ipsum text</returns>
        </member>
        <member name="M:DragonUtility.Rand.RandomMaker.NextLoremIpsum(System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Creates a Lorem Ipsum paragraph.
            </summary>
            <param name="NumberOfParagraphs">Number of paragraphs</param>
            <param name="MaxSentenceLength">Maximum sentence length</param>
            <param name="MinSentenceLength">Minimum sentence length</param>
            <param name="NumberOfSentences">Number of sentences per paragraph</param>
            <param name="HTMLFormatting">Determines if this should use HTML formatting or not</param>
            <returns>A string containing Lorem Ipsum text</returns>
        </member>
        <member name="M:DragonUtility.Rand.RandomMaker.NextBool">
            <summary>
            Returns a random boolean value
            </summary>
            <returns>returns a boolean</returns>
        </member>
        <member name="M:DragonUtility.Rand.RandomMaker.NextEnum``1">
            <summary>
            Gets a random enum value
            </summary>
            <typeparam name="T">The enum type</typeparam>
            <returns>A random value from an enum</returns>
        </member>
        <member name="M:DragonUtility.Rand.RandomMaker.NextTimeSpan(System.TimeSpan,System.TimeSpan)">
            <summary>
            Randomly generates a new time span
            </summary>
            <param name="Start">Start time span</param>
            <param name="End">End time span</param>
            <returns>A time span between the start and end</returns>
        </member>
        <member name="M:DragonUtility.Rand.RandomMaker.NextColor(System.Drawing.Color,System.Drawing.Color)">
            <summary>
            Returns a random color within a range
            </summary>
            <param name="MinColor">The inclusive minimum color (minimum for A, R, G, and B values). Defaults to Black.</param>
            <param name="MaxColor">The inclusive maximum color (max for A, R, G, and B values). Defaults to White</param>
            <returns>A random color between the min and max values</returns>
        </member>
        <member name="T:DragonUtility.Web.ExtensionMethods.UriExtensions">
            <summary>
            Uri Extension methods
            </summary>
        </member>
        <member name="M:DragonUtility.Web.ExtensionMethods.UriExtensions.Read(System.Uri,System.DateTime@,System.String,System.String)">
            <summary>
            Reads the text content of a URL
            </summary>
            <param name="URL">Uri to read the content of</param>
            <param name="UpdateDate">最后更新时间</param>
            <param name="UserName">User name used in network credentials</param>
            <param name="Password">Password used in network credentials</param>
            <returns>String representation of the content of the URL</returns>
        </member>
        <member name="M:DragonUtility.Web.ExtensionMethods.UriExtensions.Read(System.Uri,System.String,System.String)">
            <summary>
            Reads the text content of a URL
            </summary>
            <param name="URL">Uri to read the content of</param>
            <param name="UserName">User name used in network credentials</param>
            <param name="Password">Password used in network credentials</param>
            <returns>String representation of the content of the URL</returns>
        </member>
        <member name="M:DragonUtility.Web.ExtensionMethods.UriExtensions.Read(System.Uri,System.Net.WebClient,System.String,System.String)">
            <summary>
            Reads the text content of a URL
            </summary>
            <param name="URL">The Uri to read the content of</param>
            <param name="Client">WebClient used to load the data</param>
            <param name="UserName">User name used in network credentials</param>
            <param name="Password">Password used in network credentials</param>
            <returns>Stream containing the content of the URL</returns>
        </member>
        <member name="M:DragonUtility.Web.ExtensionMethods.UriExtensions.ReadBinary(System.Uri,System.String,System.String)">
            <summary>
            Reads the content of a URL
            </summary>
            <param name="URL">Uri to read the content of</param>
            <param name="UserName">User name used in network credentials</param>
            <param name="Password">Password used in network credentials</param>
            <returns>Byte array representation of the content of the URL</returns>
        </member>
        <member name="T:DragonUtility.IO.ExtensionMethods.Enums.CopyOptions">
            <summary>
            Options used in directory copying
            </summary>
        </member>
        <member name="F:DragonUtility.IO.ExtensionMethods.Enums.CopyOptions.CopyIfNewer">
            <summary>
            
            </summary>
        </member>
        <member name="F:DragonUtility.IO.ExtensionMethods.Enums.CopyOptions.CopyAlways">
            <summary>
            
            </summary>
        </member>
        <member name="F:DragonUtility.IO.ExtensionMethods.Enums.CopyOptions.DoNotOverwrite">
            <summary>
            
            </summary>
        </member>
        <member name="T:DragonUtility.IO.FileService.Client.UploadHandler">
            <summary>
            
            </summary>
        </member>
        <member name="M:DragonUtility.Encryption.MD5.Encrypt(System.String)">
            <summary>
            加密字符串
            </summary>
            <param name="input">要加密的字符串</param>
            <returns>加密后的字符串</returns>
        </member>
        <member name="M:DragonUtility.Encryption.MD5.Decrypt(System.String)">
            <summary>
            解密字符串
            </summary>
            <param name="input">要解密字符串的字符串</param>
            <returns>解密字符串后的字符串</returns>
        </member>
        <member name="P:DragonUtility.Encryption.MD5.Instance">
            <summary>
            当前实例
            </summary>
        </member>
        <member name="T:DragonUtility.DragonNavigation.Enums.ImageDisplayMode">
            <summary>
            表示图片显示模式
            </summary>
        </member>
        <member name="T:DragonUtility.DragonNavigation.Enums.OpenMode">
            <summary>
            表示连接的打开模式
            </summary>
        </member>
        <member name="T:DragonUtility.DragonNavigation.Enums.NavigationState">
            <summary>
            表示导航状态（支持位运算）
            </summary>
        </member>
        <member name="T:DragonUtility.DragonNavigation.Enums.MoveDirection">
            <summary>
            表示移动方向
            </summary>
        </member>
        <member name="F:DragonUtility.DragonNavigation.Enums.MoveDirection.Backward">
            <summary>
            向后
            </summary>
        </member>
        <member name="F:DragonUtility.DragonNavigation.Enums.MoveDirection.Onward">
            <summary>
            向前
            </summary>
        </member>
        <member name="T:DragonUtility.DataTypes.Patterns.BaseClasses.Singleton`1">
            <summary>
            Base class used for singletons
            </summary>
            <typeparam name="T">The class type</typeparam>
        </member>
        <member name="M:DragonUtility.DataTypes.Patterns.BaseClasses.Singleton`1.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="P:DragonUtility.DataTypes.Patterns.BaseClasses.Singleton`1.Instance">
            <summary>
            Gets the instance of the singleton
            </summary>
        </member>
        <member name="T:DragonUtility.DataTypes.ExtensionMethods.IComparableExtensions">
            <summary>
            IComparable extensions
            </summary>
        </member>
        <member name="M:DragonUtility.DataTypes.ExtensionMethods.IComparableExtensions.Between``1(``0,``0,``0,System.Collections.Generic.IComparer{``0})">
            <summary>
            Checks if an item is between two values
            </summary>
            <typeparam name="T">Type of the value</typeparam>
            <param name="Value">Value to check</param>
            <param name="Min">Minimum value</param>
            <param name="Max">Maximum value</param>
            <param name="Comparer">Comparer used to compare the values (defaults to GenericComparer)"</param>
            <returns>True if it is between the values, false otherwise</returns>
        </member>
        <member name="T:DragonUtility.DataTypes.ExtensionMethods.ICollectionExtensions">
            <summary>
            ICollection extensions
            </summary>
        </member>
        <member name="M:DragonUtility.DataTypes.ExtensionMethods.ICollectionExtensions.AddAndReturn``1(System.Collections.Generic.ICollection{``0},``0)">
            <summary>
            Adds an item to a list and returns the item
            </summary>
            <typeparam name="T">Item type</typeparam>
            <param name="Collection">Collection to add to</param>
            <param name="Item">Item to add to the collection</param>
            <returns>The original item</returns>
        </member>
        <member name="M:DragonUtility.DataTypes.ExtensionMethods.ICollectionExtensions.AddRange``1(System.Collections.Generic.ICollection{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Adds a list of items to the collection
            </summary>
            <typeparam name="T">The type of the items in the collection</typeparam>
            <param name="Collection">Collection</param>
            <param name="Items">Items to add</param>
            <returns>The collection with the added items</returns>
        </member>
        <member name="M:DragonUtility.DataTypes.ExtensionMethods.ICollectionExtensions.AddIf``1(System.Collections.Generic.ICollection{``0},``0,System.Predicate{``0})">
            <summary>
            Adds an item to the collection if it isn't already in the collection
            </summary>
            <typeparam name="T">Collection type</typeparam>
            <param name="Collection">Collection to add to</param>
            <param name="Item">Item to add to the collection</param>
            <param name="Predicate">Predicate that an item needs to satisfy in order to be added</param>
            <returns>True if it is added, false otherwise</returns>
        </member>
        <member name="M:DragonUtility.DataTypes.ExtensionMethods.ICollectionExtensions.AddIf``1(System.Collections.Generic.ICollection{``0},System.Collections.Generic.IEnumerable{``0},System.Predicate{``0})">
            <summary>
            Adds an item to the collection if it isn't already in the collection
            </summary>
            <typeparam name="T">Collection type</typeparam>
            <param name="Collection">Collection to add to</param>
            <param name="Items">Items to add to the collection</param>
            <param name="Predicate">Predicate that an item needs to satisfy in order to be added</param>
            <returns>True if it is added, false otherwise</returns>
        </member>
        <member name="M:DragonUtility.DataTypes.ExtensionMethods.ICollectionExtensions.AddIfUnique``1(System.Collections.Generic.ICollection{``0},``0)">
            <summary>
            Adds an item to the collection if it isn't already in the collection
            </summary>
            <typeparam name="T">Collection type</typeparam>
            <param name="Collection">Collection to add to</param>
            <param name="Item">Item to add to the collection</param>
            <returns>True if it is added, false otherwise</returns>
        </member>
        <member name="M:DragonUtility.DataTypes.ExtensionMethods.ICollectionExtensions.AddIfUnique``1(System.Collections.Generic.ICollection{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Adds an item to the collection if it isn't already in the collection
            </summary>
            <typeparam name="T">Collection type</typeparam>
            <param name="Collection">Collection to add to</param>
            <param name="Items">Items to add to the collection</param>
            <returns>True if it is added, false otherwise</returns>
        </member>
        <member name="M:DragonUtility.DataTypes.ExtensionMethods.ICollectionExtensions.Remove``1(System.Collections.Generic.ICollection{``0},System.Func{``0,System.Boolean})">
            <summary>
            Removes all items that fit the predicate passed in
            </summary>
            <typeparam name="T">The type of the items in the collection</typeparam>
            <param name="Collection">Collection to remove items from</param>
            <param name="Predicate">Predicate used to determine what items to remove</param>
        </member>
        <member name="M:DragonUtility.DataTypes.ExtensionMethods.ICollectionExtensions.RemoveRange``1(System.Collections.Generic.ICollection{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Removes all items in the list from the collection
            </summary>
            <typeparam name="T">The type of the items in the collection</typeparam>
            <param name="Collection">Collection</param>
            <param name="Items">Items to remove</param>
            <returns>The collection with the items removed</returns>
        </member>
        <member name="T:DragonSource.Utils.PageHelper">
            <summary>
            页面辅助类
            </summary>
        </member>
        <member name="M:DragonSource.Utils.PageHelper.AddScriptFile(System.Web.UI.Page,System.IO.FileInfo)">
            <summary>
            向的页面Body部分引用脚本文件
            </summary>
            <param name="Page">页面</param>
            <param name="File">文件</param>
        </member>
        <member name="M:DragonSource.Utils.PageHelper.CSS(System.String,System.Web.UI.Page)">
            <summary>
            返回一个css引用字符串
            </summary>
            <param name="cssPath">css路径地址</param>
            <param name="p">要加载css的页面对象</param>
            <returns></returns>
            <remarks>
            处理时会对路径地址做Page.ResolveUrl处理
            </remarks>
        </member>
        <member name="M:DragonSource.Utils.PageHelper.JS(System.String,System.Web.UI.Page)">
            <summary>
            返回一个脚本引用字符串
            </summary>
            <param name="jsPath">js路径地址</param>
            <param name="p">要加载js的页面对象</param>
            <returns></returns>
            <remarks>
            处理时会对路径地址做Page.ResolveUrl处理
            </remarks>
        </member>
        <member name="M:DragonSource.Utils.PageHelper.LogOperate(System.Web.UI.Page,System.String,System.String,System.Exception)">
            <summary>
            添加操作日志,条用该方法前请确认配置文件中connectionStrings节点包含有OperateLog的配置项
            </summary>
            <param name="page">页面对象</param>
            <param name="User">操作人员姓名</param>
            <param name="message">操作信息</param>
            <param name="exception">异常对象</param>
        </member>
        <member name="M:DragonSource.Utils.PageHelper.UploadFileScripts(System.Web.UI.Page,System.String,System.String)">
            <summary>
            注册文件上传脚本,需要添加配置文件UpLoadHost
            </summary>
            <param name="page">要注册文件上传脚本的页面</param>
            <param name="folder">文件夹名称</param>
            <param name="newname">新名称</param>
        </member>
        <member name="T:DragonSource.Utils.Logging.LoggingManager">
            <summary>
            日志对象管理器
            </summary>
        </member>
        <member name="F:DragonSource.Utils.Logging.LoggingManager.Logs">
            <summary>
            Logs
            </summary>
        </member>
        <member name="M:DragonSource.Utils.Logging.LoggingManager.GetLog``1(System.String)">
            <summary>
            获取具体的一个Log对象的泛型实现方法
            </summary>
            <param name="Name">Log对象名称</param>
            <typeparam name="LogType">对象类型，如: FileLog</typeparam>
            <returns>一个Log对象实例</returns>
        </member>
        <member name="M:DragonSource.Utils.Logging.LoggingManager.GetLog(System.String)">
            <summary>
            获取具体的一个Log对象
            </summary>
            <param name="Name">Log对象名称</param>
            <returns>一个Log对象实例</returns>
        </member>
        <member name="M:DragonSource.Utils.Logging.LoggingManager.AddLog``1(System.String)">
            <summary>
            添加或者替换一个日志对象
            </summary>
            <param name="Name">日志对象名称</param>
            <typeparam name="LogType">要添加的日志对象的类型</typeparam>
        </member>
        <member name="M:DragonSource.Utils.Logging.LoggingManager.AddLog(DragonSource.Utils.Logging.ILog,System.String)">
            <summary>
            添加或者替换一个日志对象到日志对象容器中
            </summary>
            <param name="Log">要添加或者替换的日志对象</param>
            <param name="Name">要添加或者替换的日志对象名称</param>
        </member>
        <member name="M:DragonSource.Utils.Logging.LoggingManager.Destroy">
            <summary>
            清除所有Log对象并释放所其所占资源
            </summary>
        </member>
        <member name="T:DragonSource.Utils.IPageOfList`1">
            <summary>
             分页列表接口类
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:DragonSource.Utils.IPageOfList`1.ItemCount">
            <summary>
            集合记录总数
            </summary>
        </member>
        <member name="P:DragonSource.Utils.IPageOfList`1.PageCount">
            <summary>
            页数
            </summary>
        </member>
        <member name="P:DragonSource.Utils.IPageOfList`1.PageIndex">
            <summary>
            当前页码
            </summary>
        </member>
        <member name="P:DragonSource.Utils.IPageOfList`1.PageSize">
            <summary>
            页面大小，即每页需要显示的记录个数
            </summary>
        </member>
        <member name="T:DragonSource.Utils.PageOfList`1">
            <summary>
            分页列表 实现类
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:DragonSource.Utils.PageOfList`1.#ctor(System.Collections.Generic.IEnumerable{`0},System.Int32,System.Int32,System.Int32)">
            <summary>
            构造函数
            </summary>
            <param name="items">T的一个可枚举集合</param>
            <param name="pageIndex">当前页码</param>
            <param name="pageSize">页面大小</param>
            <param name="itemCount">记录总数</param>
        </member>
        <member name="P:DragonSource.Utils.PageOfList`1.ItemCount">
            <summary>
            集合记录总数
            </summary>
        </member>
        <member name="P:DragonSource.Utils.PageOfList`1.PageCount">
            <summary>
            页数
            </summary>
        </member>
        <member name="P:DragonSource.Utils.PageOfList`1.PageIndex">
            <summary>
            当前页码
            </summary>
        </member>
        <member name="P:DragonSource.Utils.PageOfList`1.PageSize">
            <summary>
            页面大小，即每页需要显示的记录个数
            </summary>
        </member>
        <member name="T:DragonSource.Utils.Config.Validatecode.ValidatecodesConfig">
            <summary>
            验证码集合元素配置类
            </summary>
        </member>
        <member name="T:DragonSource.Utils.Config.Validatecode.ValidatecodeConfigRoot">
            <summary>
            验证码配置类
            </summary>
        </member>
        <member name="T:DragonSource.Utils.Config.CommonPlatformConfiurationSectionHandler">
            <summary>
            公用平台自定义配置处理类
            </summary>
        </member>
        <member name="P:DragonSource.Utils.Config.CommonPlatformConfiurationSectionHandler.CommonConfig">
            <summary>
            Gets the providers.
            </summary>
            <value>The providers.</value>
        </member>
        <member name="T:DragonUtility.ValidateImg.ValidateImg">
            <summary>
            
            </summary>
        </member>
        <member name="M:DragonUtility.ValidateImg.ValidateImg.#ctor">
            <summary>
            无参构造
            </summary>
        </member>
        <member name="M:DragonUtility.ValidateImg.ValidateImg.#ctor(System.Int32)">
            <summary>
            带有生成字符个数的构造
            </summary>
            <param name="charNum">The char num.验证码中包含随机字符的个数</param>
        </member>
        <member name="M:DragonUtility.ValidateImg.ValidateImg.#ctor(System.Int32,System.Int32)">
            <summary>
            带有验证码图片宽度和高度的构造
            </summary>
            <param name="width">The width.验证码图片宽度</param>
            <param name="height">The height.验证码图片高度</param>
        </member>
        <member name="M:DragonUtility.ValidateImg.ValidateImg.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            带有生成字符个数，验证码图片宽度和高度的构造
            </summary>
            <param name="charNum">The char num.验证码中包含随机字符的个数</param>
            <param name="width">The width.验证码图片宽度</param>
            <param name="height">The height.验证码图片高度</param>
        </member>
        <member name="F:DragonUtility.ValidateImg.ValidateImg.charNum">
            <summary>
            验证码中字符个数
            </summary>
        </member>
        <member name="F:DragonUtility.ValidateImg.ValidateImg.fontSize">
            <summary>
            字号
            </summary>
        </member>
        <member name="F:DragonUtility.ValidateImg.ValidateImg.width">
            <summary>
            图片宽度
            </summary>
        </member>
        <member name="F:DragonUtility.ValidateImg.ValidateImg.height">
            <summary>
            图片高度
            </summary>
        </member>
        <member name="F:DragonUtility.ValidateImg.ValidateImg.validStr">
            <summary>
            随机生成的字符串
            </summary>
        </member>
        <member name="M:DragonUtility.ValidateImg.ValidateImg.GetValidateCode">
            <summary>
            产生指定个数的随机字符串，默认字符个数为5
            </summary>
        </member>
        <member name="M:DragonUtility.ValidateImg.ValidateImg.GetImgWithValidateCode">
            <summary>
            由随机字符串，随即颜色背景，和随机线条产生的Image
            返回 MemoryStream
            </summary>
            <returns>MemoryStream</returns>
        </member>
        <member name="M:DragonUtility.ValidateImg.ValidateImg.GetControllableColor(System.Int32)">
            <summary>
            产生一种 R,G,B 均大于 colorBase 随机颜色，以确保颜色不会过深
            </summary>
            <param name="colorBase">The color base.</param>
            <returns>背景色</returns>
        </member>
        <member name="M:DragonUtility.ValidateImg.ValidateImg.TwistImage(System.Drawing.Bitmap,System.Boolean,System.Double,System.Double)">
            <summary>
            扭曲图片
            </summary>
            <param name="srcBmp">The SRC BMP.</param>
            <param name="bXDir">if set to <c>true</c> [b X dir].</param>
            <param name="dMultValue">The d mult value.</param>
            <param name="dPhase">The d phase.</param>
            <returns></returns>
        </member>
        <member name="M:DragonUtility.ValidateImg.ValidateImg.IsRight(System.String)">
            <summary>
            判断验证码是否正确
            </summary>
            <param name="inputValCode">待判断的验证码</param>
            <returns>正确返回 true,错误返回 false</returns>
        </member>
        <member name="P:DragonUtility.ValidateImg.ValidateImg.CharNum">
            默认字符个数为5
             <summary>
             字数
             </summary>
        </member>
        <member name="P:DragonUtility.ValidateImg.ValidateImg.FontSize">
            <summary>
            字号
            </summary>
        </member>
        <member name="P:DragonUtility.ValidateImg.ValidateImg.Width">
            <summary>
            Gets the width.
            </summary>
            <value>The width.</value>
        </member>
        <member name="P:DragonUtility.ValidateImg.ValidateImg.Height">
            <summary>
            Gets or sets the height.
            </summary>
            <value>The height.</value>
        </member>
        <member name="P:DragonUtility.ValidateImg.ValidateImg.ValidStr">
            <summary>
            随机生成的字符串
            </summary>
            <value>The valid STR.</value>
        </member>
        <member name="T:DragonUtility.DataProvider.IPageOfList`1">
            <summary>
             分页列表接口类
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:DragonUtility.DataProvider.IPageOfList`1.ItemCount">
            <summary>
            集合记录总数
            </summary>
        </member>
        <member name="P:DragonUtility.DataProvider.IPageOfList`1.PageCount">
            <summary>
            页数
            </summary>
        </member>
        <member name="P:DragonUtility.DataProvider.IPageOfList`1.PageIndex">
            <summary>
            当前页码
            </summary>
        </member>
        <member name="P:DragonUtility.DataProvider.IPageOfList`1.PageSize">
            <summary>
            页面大小，即每页需要显示的记录个数
            </summary>
        </member>
        <member name="T:DragonUtility.DataProvider.PageOfList`1">
            <summary>
            分页列表 实现类
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:DragonUtility.DataProvider.PageOfList`1.#ctor(System.Collections.Generic.IEnumerable{`0},System.Int32,System.Int32,System.Int32)">
            <summary>
            构造函数
            </summary>
            <param name="items">T的一个可枚举集合</param>
            <param name="pageIndex">当前页码</param>
            <param name="pageSize">页面大小</param>
            <param name="itemCount">记录总数</param>
        </member>
        <member name="P:DragonUtility.DataProvider.PageOfList`1.ItemCount">
            <summary>
            集合记录总数
            </summary>
        </member>
        <member name="P:DragonUtility.DataProvider.PageOfList`1.PageCount">
            <summary>
            页数
            </summary>
        </member>
        <member name="P:DragonUtility.DataProvider.PageOfList`1.PageIndex">
            <summary>
            当前页码
            </summary>
        </member>
        <member name="P:DragonUtility.DataProvider.PageOfList`1.PageSize">
            <summary>
            页面大小，即每页需要显示的记录个数
            </summary>
        </member>
        <member name="T:DragonSource.Utils.DateTimeHelper">
            <summary>
            系统数据类型 “时间”扩展方法类
            </summary>
        </member>
        <member name="M:DragonSource.Utils.DateTimeHelper.DaysInMonth(System.DateTime)">
            <summary>
            获取日期时间所在月份总共有多少天
            </summary>
            <param name="Date">日期时间</param>
            <returns><c>int</c></returns>
        </member>
        <member name="M:DragonSource.Utils.DateTimeHelper.DaysLeftInMonth(System.DateTime)">
            <summary>
            获取日期时间所在月份还剩余多少天
            </summary>
            <param name="Date">The date to check against</param>
            <returns>The number of days left in a month</returns>
        </member>
        <member name="M:DragonSource.Utils.DateTimeHelper.GetDaysOfYear(System.DateTime)">
            <summary>获取一个日期所在年份共有多少天</summary>
            <param name="Date">要查看的日期</param>
            <returns>日期时间所在年份拥有的天数</returns>
        </member>
        <member name="M:DragonSource.Utils.DateTimeHelper.DaysLeftInYear(System.DateTime)">
            <summary> 
            获取日期时间所在年份还剩余多少天
            </summary>
            <param name="Date">传入时间</param>
            <returns>时间所在年份剩余的天数</returns>
        </member>
        <member name="M:DragonSource.Utils.DateTimeHelper.DaysLeftInWeek(System.DateTime)">
            <summary>
            获取日期时间所在周份还剩余的天数
            </summary>
            <param name="Date">传入时间</param>
            <returns>时间所在周份还剩余的天数</returns>
        </member>
        <member name="M:DragonSource.Utils.DateTimeHelper.FirstDayOfMonth(System.DateTime)">
            <summary>
            根据日期时间获取获取其所在月份的第一天
            </summary>
            <param name="Date">传入时间</param>
            <returns>第1天的时间<c>DateTime</c></returns>
        </member>
        <member name="M:DragonSource.Utils.DateTimeHelper.FirstDayOfWeek(System.DateTime,System.Globalization.CultureInfo)">
            <summary>
            获取一周中的第一天的具体日期时间
            </summary>
            <param name="Date">传入参数</param>
            <param name="CultureInfo">本地化信息</param>
            <returns>第一天的具体日期时间</returns>
        </member>
        <member name="M:DragonSource.Utils.DateTimeHelper.LastDayOfMonth(System.DateTime)">
            <summary>
            获取一个时间所在月份的最后一天
            </summary>
            <param name="Date">要获取其所在月份最后一天的时间</param>
            <returns>最后一天的日期时间</returns>
        </member>
        <member name="M:DragonSource.Utils.DateTimeHelper.LastDayOfWeek(System.DateTime,System.Globalization.CultureInfo)">
            <summary>
            获取一个时间所在周份的最后一天
            </summary>
            <param name="Date">要获取其所在周份最后一天的时间</param>
            <param name="CultureInfo">本地化信息</param>
            <returns>最后一天的日期时间</returns>
        </member>
        <member name="M:DragonSource.Utils.DateTimeHelper.FromUnixTime(System.Int32)">
            <summary>
            转化Unix时间为.net中的时间类型
            </summary>
            <param name="Date">Unix时间</param>
            <returns><c>DataTime</c>格式的时间表示类型</returns>
        </member>
        <member name="M:DragonSource.Utils.DateTimeHelper.FromUnixTime(System.Int64)">
            <summary>
            转化Unix时间为.net中的时间类型
            </summary>
            <param name="Date">要转化Unix时间</param>
            <returns><c>DataTime</c>格式的时间表示类型</returns>
        </member>
        <member name="M:DragonSource.Utils.DateTimeHelper.ToUnix(System.DateTime)">
            <summary>
            将.net中的日期时间转化为Unix时间格式
            </summary>
            <param name="Date">要转化的.net日期时间</param>
            <returns>为Unix时间<c>int</c></returns>
        </member>
        <member name="M:DragonSource.Utils.DateTimeHelper.IsInFuture(System.DateTime)">
            <summary>
            检查一个时间是否为将来时间
            </summary>
            <param name="Date">要检查的时间</param>
            <returns>True if it is, false otherwise</returns>
        </member>
        <member name="M:DragonSource.Utils.DateTimeHelper.IsInPast(System.DateTime)">
            <summary>
            检查一个时间是否为过去时间
            </summary>
            <param name="Date">要检查的时间</param>
            <returns>True if it is, false otherwise</returns>
        </member>
        <member name="M:DragonSource.Utils.DateTimeHelper.IsWeekDay(System.DateTime)">
            <summary>
            检查一个时间是否为工作时(即周一至周五)
            </summary>
            <param name="Date">要检查的时间</param>
            <returns>是则返回true,否则返回false</returns>
        </member>
        <member name="M:DragonSource.Utils.DateTimeHelper.IsWeekEnd(System.DateTime)">
            <summary>
            检查一个时间是否为双休日
            </summary>
            <param name="Date">要检查的时间</param>
            <returns>是则返回true,否则返回false</returns>
        </member>
        <member name="M:DragonSource.Utils.DateTimeHelper.GetWeekNameOfDay(System.DateTime)">
            <summary>获取日期时间是星期几</summary>
            <param name="idt">日期</param>
            <returns>星期名称</returns>
            <remarks>
            返回如：星期一，星期二，星期三..星期日的表示形式
            </remarks>
        </member>
        <member name="M:DragonSource.Utils.DateTimeHelper.GetWeekNumberOfDay(System.DateTime)">
            <summary>返回日期时间的星期编号</summary>
            <param name="idt">日期</param>
            <returns>星期数字编号</returns>
            <remarks>
            返回 1，2，3，4，5，6，7的表示形式
            </remarks>
        </member>
        <member name="M:DragonSource.Utils.DateTimeHelper.GetFormatDate(System.DateTime,System.Char)">
            <summary>
            将时间格式化成 年月日 的形式,如果时间为null，返回当前系统时间
            </summary>
            <param name="dt">要格式化的日期</param>
            <param name="Separator">年月日分隔符,如：“-”，“/"，“：”等等..</param>
            <returns>格式化后的日期字符串</returns>
        </member>
        <member name="M:DragonSource.Utils.DateTimeHelper.GetFormatTime(System.DateTime,System.Char)">
            <summary>
            将时间格式化成 时分秒 的形式,如果时间为null，返回当前系统时间
            </summary>
            <param name="dt">要格式化的日期时间</param>
            <param name="Separator">年月日分隔符,如：“：”等等..</param>
            <returns>格式化的时间格式</returns>
            <example>
            
             </example>
        </member>
        <member name="M:DragonSource.Utils.DateTimeHelper.SecondToMinute(System.Int32)">
            <summary>
            把秒转换成分钟
            </summary>
            <returns>转换后的分钟数</returns>
        </member>
        <member name="M:DragonSource.Utils.DateTimeHelper.GetMonthLastDate(System.Int32,System.Int32)">
            <summary>
            返回某年某月最后一天
            </summary>
            <param name="year">年份</param>
            <param name="month">月份</param>
            <returns>日</returns>
        </member>
        <member name="M:DragonSource.Utils.DateTimeHelper.DateDiff(System.DateTime,System.DateTime)">
            <summary>
            返回时间差中的字符串表示形式
            <remarks>
            原理：<para>如果时间差大于等于1天则返回形如:“5月19日”即 M月D日的形式</para>
            <para>如果时间差大于1小时，则返回形如：“12小时前“的形式</para>
            <para>否则返回“｛分钟数｝分钟前”的形式，如：5分钟前</para>
            </remarks>
            </summary>
            <param name="DateTime1"></param>
            <param name="DateTime2"></param>
            <returns></returns>
        </member>
        <member name="M:DragonSource.Utils.DateTimeHelper.DateDiff2(System.DateTime,System.DateTime)">
            <summary>
            获得两个日期的间隔
            </summary>
            <param name="DateTime1">日期一。</param>
            <param name="DateTime2">日期二。</param>
            <returns>日期间隔TimeSpan。</returns>
        </member>
        <member name="M:DragonSource.Utils.DateTimeHelper.FormatDate(System.DateTime,System.String)">
            <summary>
            格式化日期时间
            </summary>
            <param name="dateTime1">日期时间</param>
            <param name="dateMode">显示模式</param>
            <returns>0-9种模式的日期</returns>
            <remarks>
            0: "yyyy-MM-dd"
            1:"yyyy-MM-dd HH:mm:ss"
            2:"yyyy/MM/dd"
            3:"yyyy年MM月dd日"
            4:"MM-dd"
            5:"MM/dd"
            6:"MM月dd日"
            7:"yyyy-MM"
            8:"yyyy/MM"
            9:"yyyy年MM月"
            </remarks>
        </member>
        <member name="M:DragonSource.Utils.DateTimeHelper.GetRandomTime(System.DateTime,System.DateTime)">
            <summary>
            得到随机日期
            </summary>
            <param name="time1">起始日期</param>
            <param name="time2">结束日期</param>
            <returns>间隔日期之间的 随机日期</returns>
        </member>
        <member name="M:DragonSource.Utils.DateTimeHelper.IsRuYear(System.Int32)">
            <summary>判断当前年份是否是闰年，私有函数</summary>
            <param name="iYear">年份</param>
            <returns>是闰年：True ，不是闰年：False</returns>
        </member>
        <member name="T:DragonSource.Utils.CompressionHelper">
            <summary>
            压缩、解压缩帮助类,使用此类请确保服务器已安装有WinRAR.exe软件，或者在web.config文件appSetting节指定rar软件的exe程序地址，键名为: "rarPath"
            </summary>
        </member>
        <member name="M:DragonSource.Utils.CompressionHelper.RunWinRAR(System.String,System.String)">
            <summary>
            运行WinRAR
            </summary>
            <param name="argCmd">命令</param>
            <param name="rarpath">要压缩或者解压缩的路径</param>
        </member>
        <member name="M:DragonSource.Utils.CompressionHelper.CompressRAR(System.String,System.String,System.String)">
            <summary>
            压缩目录或文件
            </summary>
            <param name="Path">待压缩的目录</param>
            <param name="rarPath">压缩后的Zip包目录</param>
            <param name="rarName">Zip包名称</param>
        </member>
        <member name="M:DragonSource.Utils.CompressionHelper.UnCompressRAR(System.String,System.String,System.String)">
            <summary>
            解压缩到指定文件夹
            </summary>
            <param name="Path">待解压目录</param>
            <param name="rarPath">Zip包目录</param>
            <param name="rarName">Zip包名称</param>
        </member>
        <member name="T:DragonSource.Utils.GenericComparer`1">
            <summary>
            泛型参数排序 实现类
            </summary>
            <typeparam name="T">引用类类型</typeparam>
        </member>
        <member name="M:DragonSource.Utils.GenericComparer`1.Compare(`0,`0)">
            <summary>
            接口方法实现
            </summary>
            <param name="x">参数 x</param>
            <param name="y">参数 y</param>
            <returns>当返回一个大于0的int时，即(x>y).返回一个小于0的int时即(x小于y).当返回0时即表示(x==y)</returns>
        </member>
        <member name="T:DragonUtility.FileFormats.Excel.Excel">
            <summary>
            集合对象生成EXCEL
            </summary>
        </member>
        <member name="M:DragonUtility.FileFormats.Excel.Excel.CreateExcel``1(System.Collections.Generic.IList{``0})">
            <summary>
            创建EXCEL
            </summary>
            <typeparam name="T"></typeparam>
            <param name="list"></param>
            <returns></returns>
        </member>
        <member name="M:DragonUtility.FileFormats.Excel.Excel.ResponseExcel``1(System.Collections.Generic.IList{``0})">
            <summary>
            输出
            </summary>
            <typeparam name="T"></typeparam>
            <param name="list"></param>
        </member>
        <member name="T:DragonUtility.DataTypes.Patterns.Factory`2">
            <summary>
            Factory class
            </summary>
            <typeparam name="Key">The "message" type</typeparam>
            <typeparam name="T">The class type that you want created</typeparam>
        </member>
        <member name="M:DragonUtility.DataTypes.Patterns.Factory`2.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:DragonUtility.DataTypes.Patterns.Factory`2.Register(`0,`1)">
            <summary>
            Registers an item
            </summary>
            <param name="Key">Item to register</param>
            <param name="Result">The object to be returned</param>
        </member>
        <member name="M:DragonUtility.DataTypes.Patterns.Factory`2.Register(`0,System.Func{`1})">
            <summary>
            Registers an item
            </summary>
            <param name="Key">Item to register</param>
            <param name="Constructor">The function to call when creating the item</param>
        </member>
        <member name="M:DragonUtility.DataTypes.Patterns.Factory`2.Create(`0)">
            <summary>
            Creates an instance associated with the key
            </summary>
            <param name="Key">Registered item</param>
            <returns>The type returned by the initializer</returns>
        </member>
        <member name="M:DragonUtility.DataTypes.Patterns.Factory`2.Exists(`0)">
            <summary>
            Determines if a key has been registered
            </summary>
            <param name="Key">Key to check</param>
            <returns>True if it exists, false otherwise</returns>
        </member>
        <member name="P:DragonUtility.DataTypes.Patterns.Factory`2.Constructors">
            <summary>
            List of constructors/initializers
            </summary>
        </member>
        <member name="T:DragonUtility.DataTypes.Formatters.GenericStringFormatter">
            <summary>
            Generic string formatter
            </summary>
        </member>
        <member name="M:DragonUtility.DataTypes.Formatters.GenericStringFormatter.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:DragonUtility.DataTypes.Formatters.GenericStringFormatter.Format(System.String,System.String)">
            <summary>
            Formats the string based on the pattern
            </summary>
            <param name="Input">Input string</param>
            <param name="FormatPattern">Format pattern</param>
            <returns>The formatted string</returns>
        </member>
        <member name="M:DragonUtility.DataTypes.Formatters.GenericStringFormatter.GetMatchingInput(System.String,System.Char,System.Char@)">
            <summary>
            Gets matching input
            </summary>
            <param name="Input">Input string</param>
            <param name="FormatChar">Current format character</param>
            <param name="MatchChar">The matching character found</param>
            <returns>The remainder of the input string left</returns>
        </member>
        <member name="M:DragonUtility.DataTypes.Formatters.GenericStringFormatter.IsValid(System.String)">
            <summary>
            Checks if the format pattern is valid
            </summary>
            <param name="FormatPattern">Format pattern</param>
            <returns>Returns true if it's valid, otherwise false</returns>
        </member>
        <member name="P:DragonUtility.DataTypes.Formatters.GenericStringFormatter.DigitChar">
            <summary>
            Represents digits (defaults to #)
            </summary>
        </member>
        <member name="P:DragonUtility.DataTypes.Formatters.GenericStringFormatter.AlphaChar">
            <summary>
            Represents alpha characters (defaults to @)
            </summary>
        </member>
        <member name="P:DragonUtility.DataTypes.Formatters.GenericStringFormatter.EscapeChar">
            <summary>
            Represents the escape character (defaults to \)
            </summary>
        </member>
        <member name="T:DragonUtility.DataTypes.ExtensionMethods.StringExtensions">
            <summary>
            String extensions
            </summary>
        </member>
        <member name="M:DragonUtility.DataTypes.ExtensionMethods.StringExtensions.Encode(System.String,System.Text.Encoding,System.Text.Encoding)">
            <summary>
            编码转换,把字符串从一种编码转换到另一种编码
            </summary>
            <param name="Input">input string</param>
            <param name="OriginalEncodingUsing">The type of encoding the string is currently using (defaults to ASCII)</param>
            <param name="EncodingUsing">The type of encoding the string is converted into (defaults to UTF8)</param>
            <returns>string of the byte array</returns>
        </member>
        <member name="M:DragonUtility.DataTypes.ExtensionMethods.StringExtensions.FromBase64(System.String,System.Text.Encoding)">
            <summary>
            Converts base 64 string based on the encoding passed in
            </summary>
            <param name="Input">Input string</param>
            <param name="EncodingUsing">The type of encoding the string is using (defaults to UTF8)</param>
            <returns>string in the encoding format</returns>
        </member>
        <member name="M:DragonUtility.DataTypes.ExtensionMethods.StringExtensions.FromBase64(System.String)">
            <summary>
            Converts base 64 string to a byte array
            </summary>
            <param name="Input">Input string</param>
            <returns>A byte array equivalent of the base 64 string</returns>
        </member>
        <member name="M:DragonUtility.DataTypes.ExtensionMethods.StringExtensions.Left(System.String,System.Int32)">
            <summary>
            Gets the first x number of characters from the left hand side
            </summary>
            <param name="Input">Input string</param>
            <param name="Length">x number of characters to return</param>
            <returns>The resulting string</returns>
        </member>
        <member name="M:DragonUtility.DataTypes.ExtensionMethods.StringExtensions.Right(System.String,System.Int32)">
            <summary>
            Gets the last x number of characters from the right hand side
            </summary>
            <param name="Input">Input string</param>
            <param name="Length">x number of characters to return</param>
            <returns>The resulting string</returns>
        </member>
        <member name="M:DragonUtility.DataTypes.ExtensionMethods.StringExtensions.ToBase64(System.String,System.Text.Encoding)">
            <summary>
            Converts from the specified encoding to a base 64 string
            </summary>
            <param name="Input">Input string</param>
            <param name="OriginalEncodingUsing">The type of encoding the string is using (defaults to UTF8)</param>
            <returns>Bas64 string</returns>
        </member>
        <member name="M:DragonUtility.DataTypes.ExtensionMethods.StringExtensions.ToByteArray(System.String,System.Text.Encoding)">
            <summary>
            Converts a string to a byte array
            </summary>
            <param name="Input">input string</param>
            <param name="EncodingUsing">The type of encoding the string is using (defaults to UTF8)</param>
            <returns>the byte array representing the string</returns>
        </member>
        <member name="M:DragonUtility.DataTypes.ExtensionMethods.StringExtensions.ToFirstCharacterUpperCase(System.String)">
            <summary>
            Takes the first character of an input string and makes it uppercase
            </summary>
            <param name="Input">Input string</param>
            <returns>String with the first character capitalized</returns>
        </member>
        <member name="M:DragonUtility.DataTypes.ExtensionMethods.StringExtensions.ToSentenceCapitalize(System.String)">
            <summary>
            Capitalizes each sentence within the string
            </summary>
            <param name="Input">Input string</param>
            <returns>String with each sentence capitalized</returns>
        </member>
        <member name="M:DragonUtility.DataTypes.ExtensionMethods.StringExtensions.ToTitleCase(System.String)">
            <summary>
            Capitalizes the first character of each word
            </summary>
            <param name="Input">Input string</param>
            <returns>String with each word capitalized</returns>
        </member>
        <member name="M:DragonUtility.DataTypes.ExtensionMethods.StringExtensions.NumberTimesOccurs(System.String,System.String)">
            <summary>
            returns the number of times a string occurs within the text
            </summary>
            <param name="Input">input text</param>
            <param name="Match">The string to match (can be regex)</param>
            <returns>The number of times the string occurs</returns>
        </member>
        <member name="M:DragonUtility.DataTypes.ExtensionMethods.StringExtensions.Reverse(System.String)">
            <summary>
            Reverses a string
            </summary>
            <param name="Input">Input string</param>
            <returns>The reverse of the input string</returns>
        </member>
        <member name="M:DragonUtility.DataTypes.ExtensionMethods.StringExtensions.FilterOutText(System.String,System.String)">
            <summary>
            Removes the filter text from the input.
            </summary>
            <param name="Input">Input text</param>
            <param name="Filter">Regex expression of text to filter out</param>
            <returns>The input text minus the filter text.</returns>
        </member>
        <member name="M:DragonUtility.DataTypes.ExtensionMethods.StringExtensions.KeepFilterText(System.String,System.String)">
            <summary>
            Removes everything that is not in the filter text from the input.
            </summary>
            <param name="Input">Input text</param>
            <param name="Filter">Regex expression of text to keep</param>
            <returns>The input text minus everything not in the filter text.</returns>
        </member>
        <member name="M:DragonUtility.DataTypes.ExtensionMethods.StringExtensions.AlphaNumericOnly(System.String)">
            <summary>
            Keeps only alphanumeric characters
            </summary>
            <param name="Input">Input string</param>
            <returns>the string only containing alphanumeric characters</returns>
        </member>
        <member name="M:DragonUtility.DataTypes.ExtensionMethods.StringExtensions.AlphaCharactersOnly(System.String)">
            <summary>
            Keeps only alpha characters
            </summary>
            <param name="Input">Input string</param>
            <returns>the string only containing alpha characters</returns>
        </member>
        <member name="M:DragonUtility.DataTypes.ExtensionMethods.StringExtensions.NumericOnly(System.String,System.Boolean)">
            <summary>
            Keeps only numeric characters
            </summary>
            <param name="Input">Input string</param>
            <param name="KeepNumericPunctuation">Determines if decimal places should be kept</param>
            <returns>the string only containing numeric characters</returns>
        </member>
        <member name="M:DragonUtility.DataTypes.ExtensionMethods.StringExtensions.IsUnicode(System.String)">
            <summary>
            Determines if a string is unicode
            </summary>
            <param name="Input">Input string</param>
            <returns>True if it's unicode, false otherwise</returns>
        </member>
        <member name="M:DragonUtility.DataTypes.ExtensionMethods.StringExtensions.FormatString(System.String,System.String)">
            <summary>
            Formats a string based on a format string passed in:
            # = digits
            @ = alpha characters
            \ = escape char
            </summary>
            <param name="Input">Input string</param>
            <param name="Format">Format of the output string</param>
            <returns>The formatted string</returns>
        </member>
        <member name="M:DragonUtility.DataTypes.ExtensionMethods.StringExtensions.RegexFormat(System.String,System.String,System.String,System.Text.RegularExpressions.RegexOptions)">
            <summary>
            Uses a regex to format the input string
            </summary>
            <param name="Input">Input string</param>
            <param name="Format">Regex string used to</param>
            <param name="OutputFormat">Output format</param>
            <param name="Options">Regex options</param>
            <returns>The input string formatted by using the regex string</returns>
        </member>
        <member name="M:DragonUtility.DataTypes.ExtensionMethods.StringExtensions.Narrow(System.String)">
            <summary>
            全角转半角
            </summary>
            <param name="input">要转换的字符串</param>
            <returns>转换完的字符串</returns>
        </member>
        <member name="M:DragonUtility.DataTypes.ExtensionMethods.StringExtensions.Wide(System.String)">
            <summary>
            半角转全角
            </summary>
            <param name="input">要转换的字符串</param>
            <returns>转换完的字符串</returns>
        </member>
        <member name="M:DragonUtility.DataTypes.ExtensionMethods.StringExtensions.TraditionalChinese(System.String)">
            <summary>
            简体转繁体
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:DragonUtility.DataTypes.ExtensionMethods.StringExtensions.SimplifiedChinese(System.String)">
            <summary>
            繁体转简体
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:DragonUtility.DataTypes.ExtensionMethods.StringExtensions.ProperCase(System.String)">
            <summary>
            将每个单词首字母大写
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="T:DragonSource.Utils.Logic.E_NPState">
            <summary>
            报纸签约状态 枚举
            </summary>
        </member>
        <member name="F:DragonSource.Utils.Logic.E_NPState.签约">
            <summary>
            签约 = 1
            </summary>
        </member>
        <member name="F:DragonSource.Utils.Logic.E_NPState.改刊">
            <summary>
            改刊 = 2
            </summary>
        </member>
        <member name="F:DragonSource.Utils.Logic.E_NPState.隐藏">
            <summary>
            隐藏 = 3
            </summary>
        </member>
        <member name="F:DragonSource.Utils.Logic.E_NPState.休刊">
            <summary>
            休刊 = 4
            </summary>
        </member>
        <member name="F:DragonSource.Utils.Logic.E_NPState.停刊">
            <summary>
            停刊 = 5
            </summary>
        </member>
        <member name="F:DragonSource.Utils.Logic.E_NPState.续约中">
            <summary>
            续约中 = 6
            </summary>
        </member>
        <member name="F:DragonSource.Utils.Logic.E_NPState.停止合作">
            <summary>
            停止合作 = 7
            </summary>
        </member>
        <member name="F:DragonSource.Utils.Logic.E_NPState.默认合作">
            <summary>
            默认合作 = 8
            </summary>
        </member>
        <member name="T:DragonSource.Utils.Logic.E_NPCycle">
            <summary>
            报纸类型 枚举
            </summary>
        </member>
        <member name="F:DragonSource.Utils.Logic.E_NPCycle.日报">
            <summary>
            日报 =1
            </summary>
        </member>
        <member name="F:DragonSource.Utils.Logic.E_NPCycle.周一报">
            <summary>
            
            </summary>
        </member>
        <member name="F:DragonSource.Utils.Logic.E_NPCycle.周二报">
            <summary>
            
            </summary>
        </member>
        <member name="F:DragonSource.Utils.Logic.E_NPCycle.周三报">
            <summary>
            
            </summary>
        </member>
        <member name="F:DragonSource.Utils.Logic.E_NPCycle.周四报">
            <summary>
            
            </summary>
        </member>
        <member name="F:DragonSource.Utils.Logic.E_NPCycle.周五报">
            <summary>
            
            </summary>
        </member>
        <member name="F:DragonSource.Utils.Logic.E_NPCycle.周六报">
            <summary>
            
            </summary>
        </member>
        <member name="F:DragonSource.Utils.Logic.E_NPCycle.半月报">
            <summary>
            
            </summary>
        </member>
        <member name="F:DragonSource.Utils.Logic.E_NPCycle.双周报">
            <summary>
            
            </summary>
        </member>
        <member name="F:DragonSource.Utils.Logic.E_NPCycle.月报">
            <summary>
            
            </summary>
        </member>
        <member name="T:DragonSource.Utils.Logic.E_NPType">
            <summary>
            报纸内容类型枚举
            </summary>
        </member>
        <member name="F:DragonSource.Utils.Logic.E_NPType.文本版">
            <summary>
            文本版 = 1
            </summary>
        </member>
        <member name="T:DragonSource.Utils.Logic.E_NPExtension">
            <summary>
            报纸扩展类型
            </summary>
        </member>
        <member name="F:DragonSource.Utils.Logic.E_NPExtension.邮发代号">
            <summary>
            邮发代号 = 1
            </summary>
        </member>
        <member name="T:DragonUtility.Web.ExtensionMethods.HttpRequestExtensions">
            <summary>
            
            </summary>
        </member>
        <member name="M:DragonUtility.Web.ExtensionMethods.HttpRequestExtensions.GetParam``1(System.Web.HttpRequest,System.String)">
            <summary>
            获取URL参数值
            </summary>
            <typeparam name="T"></typeparam>
            <param name="request"></param>
            <param name="paramName"></param>
            <returns></returns>
        </member>
        <member name="M:DragonUtility.Web.ExtensionMethods.HttpRequestExtensions.IsUrlExists(System.String)">
            <summary>
            判断http地址是否存在
            </summary>
            <param name="Url"></param>
            <returns></returns>
        </member>
        <member name="M:DragonUtility.Web.ExtensionMethods.HttpRequestExtensions.BuildUrl(System.Web.HttpRequest,System.String)">
            <summary>
            剔除Url中指定的参数
            </summary>
            <param name="request"></param>
            <param name="param">参数名称</param>
            <returns></returns>
        </member>
        <member name="M:DragonUtility.Web.ExtensionMethods.HttpRequestExtensions.InvokeWebservice(System.String,System.String,System.String,System.String,System.Object[],System.Object[])">
            <summary>
            调用远程WebService方法
            </summary>
            <param name="url">WebService的http形式的地址</param>
            <param name="namespace">欲调用的WebService的命名空间 </param>
            <param name="classname">欲调用的WebService的类名（不包括命名空间前缀）</param>
            <param name="methodname">欲调用的WebService的方法名</param>
            <param name="args">参数列表 </param>
            <param name="args1">参数列表 </param>
            如果调用失败，将会抛出Exception。请调用的时候，适当截获异常。 
            异常信息可能会发生在两个地方： 
            1、动态构造WebService的时候，CompileAssembly失败。 
            2、WebService本身执行失败。
            object obj = InvokeWebservice("http://localhost/GSP_WorkflowWebservice/common.asmx","Genersoft.Platform.Service.Workflow","Common","GetToolType",new object[]{"1"}); 
            传递参数为实体对象时，需要设置实体对象名及属性，赋给参数args1.例如：object o = InvokeWebservice(validateUrl, @namespace, classname, methodname, new object[] { uid, pwd, sourcetype }, "UserLogin1", "uid", "pwd", "requestApp");
            <returns></returns>
        </member>
        <member name="T:DragonUtility.DataTypes.Patterns.IFluentInterface">
            <summary>
            Helps in fluent interface design to hide
            ToString, Equals, and GetHashCode
            </summary>
        </member>
        <member name="T:DragonUtility.DataTypes.ExtensionMethods.ValueTypeExtensions">
            <summary>
            Value type extension methods
            </summary>
        </member>
        <member name="M:DragonUtility.DataTypes.ExtensionMethods.ValueTypeExtensions.ToBool(System.Int32)">
            <summary>
            Turns an int into a bool
            </summary>
            <param name="Input">Int value</param>
            <returns>bool equivalent</returns>
        </member>
        <member name="M:DragonUtility.DataTypes.ExtensionMethods.ValueTypeExtensions.ToInt(System.Boolean)">
            <summary>
            Converts the bool to an integer
            </summary>
            <param name="Value">Value to convert</param>
            <returns>The integer equivalent</returns>
        </member>
        <member name="M:DragonUtility.DataTypes.ExtensionMethods.ValueTypeExtensions.ToBase64String(System.Byte[])">
            <summary>
            Converts a byte array into a base 64 string
            </summary>
            <param name="Input">Input array</param>
            <returns>The equivalent byte array in a base 64 string</returns>
        </member>
        <member name="M:DragonUtility.DataTypes.ExtensionMethods.ValueTypeExtensions.ToEncodedString(System.Byte[],System.Text.Encoding,System.Int32,System.Int32)">
            <summary>
            将Byte数组转换成字符串
            </summary>
            <param name="Input">比特数组</param>
            <param name="EncodingUsing">编码</param>
            <param name="Index">起始位置</param>
            <param name="Count">长度</param>
            <returns>合并后的字符串</returns>
        </member>
        <member name="M:DragonUtility.DataTypes.ExtensionMethods.ValueTypeExtensions.IsUnicode(System.Byte[])">
            <summary>
            Determines if a byte array is unicode
            </summary>
            <param name="Input">Input array</param>
            <returns>True if it's unicode, false otherwise</returns>
        </member>
        <member name="T:DragonUtility.DataTypes.ExtensionMethods.IEnumerableExtensions">
            <summary>
            IEnumerable extensions
            </summary>
        </member>
        <member name="M:DragonUtility.DataTypes.ExtensionMethods.IEnumerableExtensions.Exists``1(System.Collections.Generic.IEnumerable{``0},System.Predicate{``0})">
            <summary>
            Used to determine if an item in the IEnumerable matches a predicate
            </summary>
            <typeparam name="T">Object type</typeparam>
            <param name="List">List to search</param>
            <param name="Match">The predicate used to check if something exists</param>
            <returns>True if at least one item matches the predicate, false otherwise</returns>
        </member>
        <member name="M:DragonUtility.DataTypes.ExtensionMethods.IEnumerableExtensions.For``1(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Int32,System.Action{``0})">
            <summary>
            Does an action for each item in the IEnumerable between the start and end indexes
            </summary>
            <typeparam name="T">Object type</typeparam>
            <param name="List">IEnumerable to iterate over</param>
            <param name="Start">Item to start with</param>
            <param name="End">Item to end with</param>
            <param name="Action">Action to do</param>
            <returns>The original list</returns>
        </member>
        <member name="M:DragonUtility.DataTypes.ExtensionMethods.IEnumerableExtensions.For``2(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Int32,System.Func{``0,``1})">
            <summary>
            Does a function for each item in the IEnumerable between the start and end indexes and returns an IEnumerable of the results
            </summary>
            <typeparam name="T">Object type</typeparam>
            <typeparam name="R">Return type</typeparam>
            <param name="List">IEnumerable to iterate over</param>
            <param name="Start">Item to start with</param>
            <param name="End">Item to end with</param>
            <param name="Function">Function to do</param>
            <returns>The resulting list</returns>
        </member>
        <member name="M:DragonUtility.DataTypes.ExtensionMethods.IEnumerableExtensions.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})">
            <summary>
            Does an action for each item in the IEnumerable
            </summary>
            <typeparam name="T">Object type</typeparam>
            <param name="List">IEnumerable to iterate over</param>
            <param name="Action">Action to do</param>
            <returns>The original list</returns>
        </member>
        <member name="M:DragonUtility.DataTypes.ExtensionMethods.IEnumerableExtensions.ForEach``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
            <summary>
            Does a function for each item in the IEnumerable, returning a list of the results
            </summary>
            <typeparam name="T">Object type</typeparam>
            <typeparam name="R">Return type</typeparam>
            <param name="List">IEnumerable to iterate over</param>
            <param name="Function">Function to do</param>
            <returns>The resulting list</returns>
        </member>
        <member name="M:DragonUtility.DataTypes.ExtensionMethods.IEnumerableExtensions.IsNullOrEmpty``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Determines if a list is null or empty
            </summary>
            <typeparam name="T">Data type</typeparam>
            <param name="Value">List to check</param>
            <returns>True if it is null or empty, false otherwise</returns>
        </member>
        <member name="M:DragonUtility.DataTypes.ExtensionMethods.IEnumerableExtensions.RemoveDefaults``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Removes default values from a list
            </summary>
            <typeparam name="T">Value type</typeparam>
            <param name="Value">List to cull items from</param>
            <param name="EqualityComparer">Equality comparer used (defaults to GenericEqualityComparer)</param>
            <returns>An IEnumerable with the default values removed</returns>
        </member>
        <member name="M:DragonUtility.DataTypes.ExtensionMethods.IEnumerableExtensions.ToArray``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
            <summary>
            Converts a list to an array
            </summary>
            <typeparam name="Source">Source type</typeparam>
            <typeparam name="Target">Target type</typeparam>
            <param name="List">List to convert</param>
            <param name="ConvertingFunction">Function used to convert each item</param>
            <returns>The array containing the items from the list</returns>
        </member>
        <member name="M:DragonUtility.DataTypes.ExtensionMethods.IEnumerableExtensions.ToString``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.String},System.String)">
            <summary>
            Converts the list to a string where each item is seperated by the Seperator
            </summary>
            <typeparam name="T">Item type</typeparam>
            <param name="List">List to convert</param>
            <param name="ItemOutput">Used to convert the item to a string (defaults to calling ToString)</param>
            <param name="Seperator">Seperator to use between items (defaults to ,)</param>
            <returns>The string version of the list</returns>
        </member>
        <member name="M:DragonUtility.DataTypes.ExtensionMethods.IEnumerableExtensions.TrueForAll``1(System.Collections.Generic.IEnumerable{``0},System.Predicate{``0})">
            <summary>
            Determines if a predicate is true for each item in a list
            </summary>
            <typeparam name="T">The type of the items in the list</typeparam>
            <param name="List">IEnumerable to look through</param>
            <param name="Predicate">Predicate to use to check the IEnumerable</param>
            <returns>True if they all pass the predicate, false otherwise</returns>
        </member>
        <member name="M:DragonUtility.DataTypes.ExtensionMethods.IEnumerableExtensions.TryAll``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0},System.Action{``0})">
            <summary>
            Tries to do the action on each item in the list. If an exception is thrown,
            it does the catch action on the item (if it is not null).
            </summary>
            <typeparam name="T">The type of the items in the list</typeparam>
            <param name="List">IEnumerable to look through</param>
            <param name="Action">Action to run on each item</param>
            <param name="CatchAction">Catch action (defaults to null)</param>
            <returns>The list after the action is run on everything</returns>
        </member>
        <member name="T:DragonUtility.Caching.WebCache">
            <summary>
            通用应用程序缓存
            </summary>
        </member>
        <member name="M:DragonUtility.Caching.WebCache.GetCache``1(System.String,System.Func{``0})">
            <summary>
            通用应用程序缓存方法,缓存数据10分钟永不过期
            </summary>
            <typeparam name="T">委托getdata的返回值</typeparam>
            <param name="key">缓存Key</param>
            <param name="getdata">获取值得基本方法</param>
            <returns>T</returns>
        </member>
        <member name="M:DragonUtility.Caching.WebCache.RemoveCache(System.String)">
            <summary>
            移除应用程序缓存
            </summary>
            <param name="key">键</param>
        </member>
        <member name="T:DragonSource.Utils.Logic.ServerHost">
            <summary>
            公共域名
            </summary>
        </member>
        <member name="P:DragonSource.Utils.Logic.ServerHost.BookHost">
            <summary>
            图书服务器
            </summary>
        </member>
        <member name="P:DragonSource.Utils.Logic.ServerHost.XmlHost">
            <summary>
            Xml服务器
            </summary>
        </member>
        <member name="P:DragonSource.Utils.Logic.ServerHost.ImageHost">
            <summary>
            图片服务器
            </summary>
        </member>
        <member name="P:DragonSource.Utils.Logic.ServerHost.OriginalHost">
            <summary>
            原貌服务器
            </summary>
        </member>
        <member name="P:DragonSource.Utils.Logic.ServerHost.TTSHost">
            <summary>
            TTs服务器
            </summary>
        </member>
        <member name="P:DragonSource.Utils.Logic.ServerHost.PeopleVoiceHost">
            <summary>
            人生语音服务器
            </summary>
        </member>
        <member name="P:DragonSource.Utils.Logic.ServerHost.VideoHost">
            <summary>
            视频服务器
            </summary>
        </member>
        <member name="P:DragonSource.Utils.Logic.ServerHost.BlogHost">
            <summary>
            博客服务器
            </summary>
        </member>
        <member name="P:DragonSource.Utils.Logic.ServerHost.UpLoadHost">
            <summary>
            上传服务器
            </summary>
        </member>
        <member name="P:DragonSource.Utils.Logic.ServerHost.Big5Gate">
            <summary>
            Big5网关
            </summary>
        </member>
        <member name="P:DragonSource.Utils.Logic.ServerHost.UDNGate">
            <summary>
            UDN网关
            </summary>
        </member>
        <member name="P:DragonSource.Utils.Logic.ServerHost.DownLoadHost">
            <summary>
            下载服务器
            </summary>
        </member>
        <member name="T:DragonSource.Utils.Logic.GlobalCons">
            <summary>
            公共变量
            </summary>
        </member>
        <member name="F:DragonSource.Utils.Logic.GlobalCons.DefaultDateTime">
            <summary>
            全局日期类型默认值
            </summary>
        </member>
        <member name="F:DragonSource.Utils.Logic.GlobalCons.LogDir">
            <summary>
            全局日志记录路径,如果不配置的话,日志系统默认在当前程序根目录下建立Log文件夹
            </summary>
        </member>
        <member name="T:DragonSource.Utils.StringHelper">
            <summary>
            字符串处理类
            </summary>
        </member>
        <member name="M:DragonSource.Utils.StringHelper.TransferEncoding(System.String,System.Text.Encoding,System.Text.Encoding)">
            <summary>
            把字符串从一种编码转换到另一种编码
            </summary>
            <param name="fromText">需要转换的字符串</param>
            <param name="fromEncoding">原始编码</param>
            <param name="toEncoding">转换后的编码</param>
            <returns>转换结果</returns>
        </member>
        <member name="M:DragonSource.Utils.StringHelper.FromBase64(System.String,System.Text.Encoding)">
            <summary>
            将base64位编码字符串转化为指定编码格式的文本
            </summary>
            <param name="Input">要转化为的64位编码字符串</param>
            <param name="EncodingUsing">指定编码格式</param>
            <returns>指定格式的字符串</returns>
        </member>
        <member name="M:DragonSource.Utils.StringHelper.FromBase64(System.String)">
            <summary>
            将base64位编码转化为一个字节数组
            </summary>
            <param name="Input">base64编码字符串</param>
            <returns>字节数组</returns>
        </member>
        <member name="M:DragonSource.Utils.StringHelper.ToBase64(System.String,System.Text.Encoding)">
            <summary>
            将字符串以某种编码格式转化为base64位编码形式
            </summary>
            <param name="Input">输入</param>
            <param name="OriginalEncodingUsing">输入字符串的文本编码格式，默认为UTF-8</param>
            <returns>base64编码字符串</returns>
        </member>
        <member name="M:DragonSource.Utils.StringHelper.Left(System.String,System.Int32)">
            <summary>
            获取字符串左边起指定个数的子字符串
            </summary>
            <param name="Input">要获取其左边指定个数子字符串的源字符串</param>
            <param name="Length">指定个数</param>
            <returns></returns>
        </member>
        <member name="M:DragonSource.Utils.StringHelper.Right(System.String,System.Int32)">
            <summary>
            获取字符串右边起指定个数的子字符串
            </summary>
            <param name="Input">要获取其右边指定个数子字符串的源字符串</param>
            <param name="Length">要获取其左边指定个数子字符串的源字符串</param>
            <returns></returns>
        </member>
        <member name="M:DragonSource.Utils.StringHelper.ToByteArray(System.String,System.Text.Encoding)">
            <summary>
            将字符串转化为字节数组
            </summary>
            <param name="Input">要转化为字节数组的字符串</param>
            <param name="EncodingUsing">使用的编码格式，默认为UTF-8</param>
            <returns>字节数组</returns>
        </member>
        <member name="M:DragonSource.Utils.StringHelper.ToFirstCharacterUpperCase(System.String)">
            <summary>
            句首字符转大写
            </summary>
            <param name="Input">字符串输入</param>
            <returns>以大写字母开关的字符串</returns>
        </member>
        <member name="M:DragonSource.Utils.StringHelper.ToSentenceCapitalize(System.String)">
            <summary>
            将字符串以{ ".", "?", "!" }作为拆分依据划分成多个句子，并将每个句子首字符大写
            </summary>
            <param name="Input">Input string</param>
            <returns>String with each sentence capitalized</returns>
        </member>
        <member name="M:DragonSource.Utils.StringHelper.ToSentenceCapitalize(System.String,System.String[])">
            <summary>
            将字符串以分隔符数组作为拆分依据划分成多个句子，并将每个句子首字符大写
            </summary>
            <param name="Input">要拆分的文本</param>
            <param name="arrSeperator">分隔符数组，如{ ".", "?", "!" }</param>
            <returns></returns>
        </member>
        <member name="M:DragonSource.Utils.StringHelper.ToTitleCase(System.String)">
             <summary>
            将字符串每个单词的首字母大写
             </summary>
             <param name="Input">Input string</param>
             <returns>String with each word capitalized</returns>
        </member>
        <member name="M:DragonSource.Utils.StringHelper.NumberTimesOccurs(System.String,System.String)">
             <summary>
            获取一个子字符串在一个字符串中出现的次数
             </summary>
             <param name="Input">要检查子字符串出现次数的源字符串</param>
             <param name="Match">子字符串，也可是正则表达式</param>
             <returns>子字符串出现的次数</returns>
        </member>
        <member name="M:DragonSource.Utils.StringHelper.Reverse(System.String)">
            <summary>
            字符串倒置
            </summary>
            <param name="Input">要倒置的字符串</param>
            <returns></returns>
        </member>
        <member name="M:DragonSource.Utils.StringHelper.FilterOutText(System.String,System.String)">
            <summary>
            Removes the filter text from the input.
            </summary>
            <param name="Input">Input text</param>
            <param name="Filter">Regex expression of text to filter out</param>
            <returns>The input text minus the filter text.</returns>
        </member>
        <member name="M:DragonSource.Utils.StringHelper.KeepFilterText(System.String,System.String)">
            <summary>
            去除文本中不符合过滤格式的字符，只保留符合过滤格式的字符
            </summary>
            <param name="Input">输入文本</param>
            <param name="Filter">需要保留的字符串格式，一个正则表达式</param>
            <returns></returns>
        </member>
        <member name="M:DragonSource.Utils.StringHelper.AlphaNumericOnly(System.String)">
            <summary>
            只保留文本中的字母（大小写）、数字字符，去除所有其他字符
            </summary>
            <param name="Input">输入文本</param>
            <returns></returns>
        </member>
        <member name="M:DragonSource.Utils.StringHelper.AlphaCharactersOnly(System.String)">
            <summary>
            只保留文本中的字母(大小写)字符
            </summary>
            <param name="Input">输入文本</param>
            <returns></returns>
        </member>
        <member name="M:DragonSource.Utils.StringHelper.NumericOnly(System.String,System.Boolean)">
            <summary>
            去除文本中非数字字符【0-9】
            </summary>
            <param name="Input">输入文本</param>
            <param name="KeepNumericPunctuation">是否需要保留小数点【.】,默认为true</param>
            <returns></returns>
        </member>
        <member name="M:DragonSource.Utils.StringHelper.IsUnicode(System.String)">
            <summary>
            检查文本是否为Unicode格式编码
            </summary>
            <param name="Input">要检查的文本</param>
            <returns>如果是Unicode则返回true,否则返回false</returns>
        </member>
        <member name="M:DragonSource.Utils.StringHelper.RegexFormat(System.String,System.String,System.String,System.Text.RegularExpressions.RegexOptions)">
            <summary>
            用一个正则表达式来格式化字符串，即将满足正则格式的字符串(Format)替换为指定的替换字符串(OutputFormat)
            </summary>
            <param name="Input">要改变的字符串</param>
            <param name="Format">正则格式字符串</param>
            <param name="OutputFormat">替换字符串</param>
            <param name="Options">正达表达式选项</param>
            <returns>格式化后的字符串</returns>
        </member>
        <member name="M:DragonSource.Utils.StringHelper.Narrow(System.String)">
            <summary>
            全角转半角
            </summary>
            <param name="input">要转换的字符串</param>
            <returns>转换完的字符串</returns>
        </member>
        <member name="M:DragonSource.Utils.StringHelper.Wide(System.String)">
            <summary>
            半角转全角
            </summary>
            <param name="input">要转换的字符串</param>
            <returns>转换完的字符串</returns>
        </member>
        <member name="M:DragonSource.Utils.StringHelper.TraditionalChinese(System.String)">
            <summary>
            简体转繁体
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:DragonSource.Utils.StringHelper.SimplifiedChinese(System.String)">
            <summary>
            繁体转简体
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:DragonSource.Utils.StringHelper.ProperCase(System.String)">
            <summary>
            将每个单词首字母大写
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:DragonSource.Utils.StringHelper.ContainsHTML(System.String)">
            <summary>
            检查字符串是否包含Html内容即Html标签，如<b>**</b>,<body>**</body>等 
            </summary>
            <param name="Input">要检查的字符串</param>
            <returns>包含则返回true,否则返回false</returns>
        </member>
        <member name="M:DragonSource.Utils.StringHelper.RemoveURLIllegalCharacters(System.String)">
            <summary>
            去除字符串不合法的Url字符
            </summary>
            <param name="Input">要去除不合法Url字符的字符串</param>
            <returns></returns>
        </member>
        <!-- 对于成员“M:DragonSource.Utils.StringHelper.StripHTML(System.String)”忽略有格式错误的 XML 注释 -->
        <member name="M:DragonSource.Utils.StringHelper.ParseHtml(System.String)">
             <summary>
            从一段HTML文本中清除HTML标签
             </summary>
             <param name="html">要去除HTML标记的文本</param>
             <returns>结果</returns>
        </member>
        <member name="M:DragonSource.Utils.StringHelper.ParseHtml(System.String,System.String)">
            <summary>
            去除文本中指定的HTML标记
            </summary>
            <param name="html">要去除HTML标记的文本</param>
            <param name="tag">指定HTML标记</param>
            <returns>结果</returns>
        </member>
        <member name="M:DragonSource.Utils.StringHelper.WordCountExceptHtml(System.String)">
            <summary>
            统计字数（忽略HTML标记，也包括实体空格;全角空格，半角空格）
            </summary>
            <param name="inputHtml">要统计的字符串</param>
            <returns></returns>
        </member>
        <member name="M:DragonSource.Utils.StringHelper.IsUrlExists(System.String)">
            <summary>
            判断http地址是否存在
            </summary>
            <param name="Url">要检查的Url字符串</param>
            <returns></returns>
        </member>
        <member name="M:DragonSource.Utils.StringHelper.GetRealLength(System.String)">
            <summary>
            获取字符串的实际字节长度的方法
            </summary>
            <param name="source">字符串</param>
            <returns>实际长度</returns>
        </member>
        <member name="M:DragonSource.Utils.StringHelper.SubString(System.String,System.Int32,System.Boolean,System.String)">
            <summary>
            按字节数截取字符串的方法，为了避免将汉字截为“两半”，返回的字符串长度可能是n+1个字节。
            </summary>
            <param name="source">要截取的字符串</param>
            <param name="n">要截取的字节数</param>
            <param name="needEndDot">是否需要结尾的省略号“...”</param>
            <param name="endString">结尾字符串，只有在needEndDot为false才起作用</param>
            <returns>截取后的字符串</returns>
        </member>
        <member name="M:DragonSource.Utils.StringHelper.SqlFilter(System.String)">
            <summary>
            过滤字符串中注入SQL脚本的方法
            </summary>
            <param name="source">传入的字符串</param>
            <returns>过滤后的字符串</returns>
        </member>
        <member name="M:DragonSource.Utils.StringHelper.XSSFilter(System.String)">
            <summary>
            过滤字符串中的注入跨站脚本(先进行UrlDecode再过滤脚本关键字)
            过滤脚本如:<script>window.alert("test");</script>输出window.alert("test");
            如<a href = "javascript:onclick='fun1();'"/>输出<a href=" onXXX='fun1();'"/>
            过滤掉javascript和 onXXX
            </summary>
            <param name="source">需要过滤的字符串</param>
            <returns>过滤后的字符串</returns>
        </member>
        <member name="M:DragonSource.Utils.StringHelper.FlashFilter(System.String)">
            <summary>
            过滤字符串中注入Flash代码
            </summary>
            <param name="htmlCode">输入字符串</param>
            <returns>过滤后的字符串</returns>
        </member>
        <member name="M:DragonSource.Utils.StringHelper.TrimEndZeroForPrice(System.String)">
            <summary>
            去除价格小数点后末尾“0”的方法,如"15.0",处理后结果为:"15"
            </summary>
            <param name="price">去“0”之前的价格字符串</param>
            <returns>去“0”之后的价格字符串</returns>
        </member>
        <member name="M:DragonSource.Utils.StringHelper.FormatDoubleToPercent(System.Double)">
            <summary>
            把浮点类型格式化为百分比字符串,如：0.23，处理后返回为:"23%"，1.889=>"1.89%"
            </summary>
            <param name="num">浮点类型数据</param>
            <returns>百分比字符串</returns>
        </member>
        <member name="M:DragonSource.Utils.StringHelper.ComputeSimilarity(System.String,System.String)">
            <summary>
            比较两个字符串的相似性，采用编辑距离（Levenshtein Distance）算法。
            顾名思义，即：修改strA到strB需要的编辑次数。
            参见：http://www.codeproject.com/KB/recipes/Levenshtein.aspx
                        http://blog.sina.com.cn/s/blog_53e1c1230100bpe1.html
            </summary>
            <param name="strA">字符串A</param>
            <param name="strB">字符串B</param>
            <returns>返回((100 * 编辑次数) / Max(strALen, strBLen))，100代表完全相似，值越小，代表相似度越小。</returns>
        </member>
        <member name="M:DragonSource.Utils.StringHelper.ComputeEditTimes(System.String,System.String)">
            <summary>
            计算编辑次数，采用编辑距离（Levenshtein Distance）算法。
            顾名思义，即：修改strA到strB需要的编辑次数。
            参见：http://www.codeproject.com/KB/recipes/Levenshtein.aspx
                        http://blog.sina.com.cn/s/blog_53e1c1230100bpe1.html
            </summary>
            <param name="strA">字符串A</param>
            <param name="strB">字符串B</param>
            <returns>返回修改strA到strB需要的编辑次数。</returns>
        </member>
        <member name="M:DragonSource.Utils.StringHelper.RemoveExtraHyphen(System.String)">
            <summary>
            Removes extra hyphens from a string
            </summary>
            <param name="Input">string to be stripped</param>
            <returns>Stripped string</returns>
        </member>
        <member name="M:DragonSource.Utils.StringHelper.RemoveDiacritics(System.String)">
            <summary>
            Removes special characters (Diacritics) from the string
            </summary>
            <param name="Input">String to strip</param>
            <returns>Stripped string</returns>
        </member>
        <member name="T:DragonSource.Utils.IComparableExtensions">
            <summary>
            IComparable extensions
            </summary>
        </member>
        <member name="M:DragonSource.Utils.IComparableExtensions.Between``1(``0,``0,``0,System.Collections.Generic.IComparer{``0})">
            <summary>
            Checks if an item is between two values
            </summary>
            <typeparam name="T">Type of the value</typeparam>
            <param name="Value">Value to check</param>
            <param name="Min">Minimum value</param>
            <param name="Max">Maximum value</param>
            <param name="Comparer">Comparer used to compare the values (defaults to GenericComparer)"</param>
            <returns>True if it is between the values, false otherwise</returns>
        </member>
        <member name="T:DragonSource.Utils.FileInfoExtensions">
            <summary>
            Extension methods for <see cref="T:System.IO.FileInfo"/>
            </summary>
        </member>
        <member name="M:DragonSource.Utils.FileInfoExtensions.Append(System.IO.FileInfo,System.String,System.Text.Encoding)">
            <summary>
            Appends a string to a file
            </summary>
            <param name="File">File to append to</param>
            <param name="Content">Content to save to the file</param>
            <param name="EncodingUsing">The type of encoding the string is using (defaults to ASCII)</param>
            <returns>The FileInfo object</returns>
        </member>
        <member name="M:DragonSource.Utils.FileInfoExtensions.Append(System.IO.FileInfo,System.Byte[])">
            <summary>
            Appends a byte array to a file
            </summary>
            <param name="File">File to append to</param>
            <param name="Content">Content to append to the file</param>
            <returns>The FileInfo object</returns>
        </member>
        <member name="M:DragonSource.Utils.FileInfoExtensions.CompareTo(System.IO.FileInfo,System.IO.FileInfo)">
            <summary>
            Compares two files against one another
            </summary>
            <param name="File1">First file</param>
            <param name="File2">Second file</param>
            <returns>True if the content is the same, false otherwise</returns>
        </member>
        <member name="M:DragonSource.Utils.FileInfoExtensions.Read(System.IO.FileInfo)">
            <summary>
            Reads a file to the end as a string
            </summary>
            <param name="File">File to read</param>
            <returns>A string containing the contents of the file</returns>
        </member>
        <member name="M:DragonSource.Utils.FileInfoExtensions.ReadBinary(System.IO.FileInfo)">
            <summary>
            Reads a file to the end and returns a binary array
            </summary>
            <param name="File">File to open</param>
            <returns>A binary array containing the contents of the file</returns>
        </member>
        <member name="M:DragonSource.Utils.FileInfoExtensions.Save(System.IO.FileInfo,System.String,System.Text.Encoding)">
            <summary>
            Saves a string to a file
            </summary>
            <param name="File">File to save to</param>
            <param name="Content">Content to save to the file</param>
            <param name="EncodingUsing">Encoding that the content is using (defaults to ASCII)</param>
            <returns>The FileInfo object</returns>
        </member>
        <member name="M:DragonSource.Utils.FileInfoExtensions.Save(System.IO.FileInfo,System.Byte[])">
            <summary>
            Saves a byte array to a file
            </summary>
            <param name="File">File to save to</param>
            <param name="Content">Content to save to the file</param>
            <returns>The FileInfo object</returns>
        </member>
        <member name="M:DragonSource.Utils.FileInfoExtensions.SaveAsync(System.IO.FileInfo,System.String,System.AsyncCallback,System.Object,System.Text.Encoding)">
            <summary>
            Saves a string to a file (asynchronously)
            </summary>
            <param name="File">File to save to</param>
            <param name="Content">Content to save to the file</param>
            <param name="CallBack">Call back function</param>
            <param name="StateObject">State object</param>
            <param name="EncodingUsing">Encoding that the content is using (defaults to ASCII)</param>
            <returns>The FileInfo object</returns>
        </member>
        <member name="M:DragonSource.Utils.FileInfoExtensions.SaveAsync(System.IO.FileInfo,System.Byte[],System.AsyncCallback,System.Object)">
            <summary>
            Saves a byte array to a file (asynchronously)
            </summary>
            <param name="File">File to save to</param>
            <param name="Content">Content to save to the file</param>
            <param name="CallBack">Call back function</param>
            <param name="StateObject">State object</param>
            <returns>The FileInfo object</returns>
        </member>
        <member name="M:DragonSource.Utils.FileInfoExtensions.SetAttributes(System.IO.FileInfo,System.IO.FileAttributes)">
            <summary>
            Sets the attributes of a file
            </summary>
            <param name="File">File</param>
            <param name="Attributes">Attributes to set</param>
            <returns>The file info</returns>
        </member>
        <member name="T:DragonSource.Utils.Config.CommonPlatformConfiguration">
            <summary>
            公用平台配置入口类
            </summary>
        </member>
        <member name="F:DragonSource.Utils.Config.CommonPlatformConfiguration.m_instance">
            <summary>
            公用平台配置实例
            </summary>
        </member>
        <member name="M:DragonSource.Utils.Config.CommonPlatformConfiguration.GetValidatecodeConfigRoot">
            <summary>
            获得验证码配置
            </summary>
            <returns>验证码的配置对象</returns>
        </member>
        <member name="M:DragonSource.Utils.Config.CommonPlatformConfiguration.GetMailConfig">
            <summary>
            获取邮箱配置
            </summary>
            <returns></returns>
        </member>
        <member name="M:DragonSource.Utils.Config.CommonPlatformConfiguration.GetLogConfig">
            <summary>
            获取日志配置
            </summary>
            <returns></returns>
        </member>
        <member name="P:DragonSource.Utils.Config.CommonPlatformConfiguration.Instance">
            <summary>
            配置属性
            </summary>
        </member>
        <member name="T:DragonUtility.IO.Logging.FileLog">
            <summary>
            Outputs messages to a file
            </summary>
        </member>
        <member name="M:DragonUtility.IO.Logging.FileLog.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:DragonUtility.IO.Logging.FileLog.Init(System.String)">
            <summary>
            初始化文件日志
            </summary>
            <param name="currentname"></param>
        </member>
        <member name="T:DragonUtility.IO.FlashTools.FlvMetaDataReader">
            <summary>
            FLV视频文件帮助类，借助此类可以获取FLV文件的一些元数据信息，如时长，画面长度，画面宽度等信息
            </summary>
        </member>
    </members>
</doc>
